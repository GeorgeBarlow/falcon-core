{"version":3,"sources":["../../src/config/QueryManager.js"],"names":["validateQuery","query","schema","Joi","object","keys","id","string","required","name","type","color","errors","validate","abortEarly","error","details","length","errorsMessages","map","detail","message","fieldName","context","label","FalconError","JSON","stringify","QueryManager","BaseManager","itemType","validateBeforeCreation","Error"],"mappings":";;;;;;AACA;;;;AACA;;;;;;AAmBA,SAASA,aAAT,CAAuBC,KAAvB,EAAyC;AACvC,QAAMC,SAASC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BC,QAAIH,cAAII,MAAJ,GAAaC,QAAb,EAD2B;AAE/BC,UAAMN,cAAII,MAAJ,GAAaC,QAAb,EAFyB;AAG/BE,UAAMP,cAAII,MAAJ,GAAaC,QAAb,EAHyB;AAI/BP,WAAOE,cAAII,MAAJ,GAAaC,QAAb,EAJwB;AAK/BG,WAAOR,cAAII,MAAJ;AALwB,GAAlB,CAAf;;AAQA,QAAMK,SAAST,cAAIU,QAAJ,CAAaZ,KAAb,EAAoBC,MAApB,EAA4B;AACzCY,gBAAY;AAD6B,GAA5B,CAAf;;AAIA,MAAIF,OAAOG,KAAX,EAAkB;AAChB,QAAIH,OAAOG,KAAP,CAAaC,OAAb,CAAqBC,MAArB,GAA8B,CAAlC,EAAqC;AACnC,YAAMC,iBAAiBN,OAAOG,KAAP,CAAaC,OAAb,CAAqBG,GAArB,CAAyBC,WAAW;AACzDC,iBAASD,OAAOC,OADyC;AAEzDC,mBAAWF,OAAOG,OAAP,CAAeC;AAF+B,OAAX,CAAzB,CAAvB;;AAKA,YAAM,IAAIC,wBAAJ,CACH,sBAAqBC,KAAKC,SAAL,CAAeT,cAAf,CAA+B,EADjD,EAEJ,EAAEN,MAAF,EAFI,CAAN;AAID;AACF;AACF;;AAEc,MAAMgB,YAAN,SAA8BC,qBAA9B,CACkB;AAAA;AAAA;;AAAA,wCAC/BC,QAD+B,GACpB,SADoB;AAAA;;AAG/BC,yBAAuB9B,KAAvB,EAAyC;AACvC,YAAQA,MAAMS,IAAd;AACE,WAAK,QAAL;AAAe;AACbV,wBAAcC,KAAd;AACA;AACD;AACD;AAAS;AACP,gBAAM,IAAI+B,KAAJ,CACH,0BACC,KAAKF,QACN,4CAHG,CAAN;AAKD;AAXH;AAaD;AAjB8B;kBADZF,Y","file":"QueryManager.js","sourcesContent":["// @flow\nimport BaseManager, { FalconError } from './BaseManager';\nimport Joi from 'joi';\nimport type { ManagerInterface } from './ManagerInterface';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\nexport type queryType = {\n  // The internal id for the query\n  id: string,\n  // The name of the query\n  name: string,\n  // The type of database which the query was created for\n  type: databasesType,\n  // The connection which the query belongs to\n  connectionId: string,\n  // The query's text\n  query: string,\n  // The optional color highlighting of the query\n  color?: string\n};\n\nfunction validateQuery(query: queryType) {\n  const schema = Joi.object().keys({\n    id: Joi.string().required(),\n    name: Joi.string().required(),\n    type: Joi.string().required(),\n    query: Joi.string().required(),\n    color: Joi.string()\n  });\n\n  const errors = Joi.validate(query, schema, {\n    abortEarly: false\n  });\n\n  if (errors.error) {\n    if (errors.error.details.length > 0) {\n      const errorsMessages = errors.error.details.map(detail => ({\n        message: detail.message,\n        fieldName: detail.context.label\n      }));\n\n      throw new FalconError(\n        `Failed validation: ${JSON.stringify(errorsMessages)}`,\n        { errors }\n      );\n    }\n  }\n}\n\nexport default class QueryManager<T> extends BaseManager\n  implements ManagerInterface<T> {\n  itemType = 'queries';\n\n  validateBeforeCreation(query: queryType) {\n    switch (query.type) {\n      case 'sqlite': {\n        validateQuery(query);\n        break;\n      }\n      default: {\n        throw new Error(\n          `Unknown database type \"${\n            this.itemType\n          }\". This probably means it is not supported`\n        );\n      }\n    }\n  }\n}\n"]}