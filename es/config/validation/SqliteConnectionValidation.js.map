{"version":3,"sources":["../../../src/config/validation/SqliteConnectionValidation.js"],"names":["isFilePath","Joi","fs","path","Database","FalconError","SqliteConnectionValidation","connection","customJoi","extend","joi","base","string","name","language","file_has_absolute_path","file_is_valid","file_exists","sqlite_valid","rules","validate","params","value","state","options","isAbsolute","createError","v","q","existsSync","db","passed","readonly","fileMustExist","prepare","pluck","get","e","close","schema","object","keys","id","required","color","database","type","errors","abortEarly","error","details","length","errorsMessages","map","detail","message","fieldName","context","label","JSON","stringify"],"mappings":"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","file":"SqliteConnectionValidation.js","sourcesContent":["// @flow\nimport isFilePath from 'is-valid-path';\nimport Joi from 'joi';\nimport fs from 'fs';\nimport path from 'path';\nimport Database from 'better-sqlite3';\nimport { FalconError } from '../BaseManager';\nimport type {\n  connectionValidationType,\n  connectionType\n} from '../ConnectionManager';\n\nexport default function SqliteConnectionValidation(\n  connection: connectionType\n): Promise<connectionValidationType> {\n  const customJoi = Joi.extend(joi => ({\n    base: joi.string(),\n    name: 'string',\n    language: {\n      file_has_absolute_path: 'needs to be an absolute path',\n      file_is_valid: 'needs to be a file',\n      file_exists: 'does not exist',\n      sqlite_valid: 'is not valid'\n    },\n    rules: [\n      {\n        name: 'file_has_absolute_path',\n        validate(params, value, state, options) {\n          return !path.isAbsolute(value)\n            ? this.createError(\n                'string.file_has_absolute_path',\n                { v: value, q: params.q },\n                state,\n                options\n              )\n            : value;\n        }\n      },\n      {\n        name: 'file_is_valid',\n        validate(params, value, state, options) {\n          return !isFilePath(value)\n            ? this.createError(\n                'string.file_is_valid',\n                { v: value, q: params.q },\n                state,\n                options\n              )\n            : value;\n        }\n      },\n      {\n        name: 'file_exists',\n        validate(params, value, state, options) {\n          return fs.existsSync(value)\n            ? value\n            : this.createError(\n                'string.file_exists',\n                { v: value, q: params.q },\n                state,\n                options\n              );\n        }\n      },\n      {\n        name: 'sqlite_valid',\n        validate(params, value, state, options) {\n          let db;\n          let passed = true;\n          try {\n            db = new Database(value, {\n              readonly: true,\n              fileMustExist: true\n            });\n            if (\n              db\n                .prepare('PRAGMA quick_check')\n                .pluck()\n                .get() !== 'ok'\n            ) {\n              passed = false;\n            }\n          } catch (e) {\n            passed = false;\n          } finally {\n            if (db) {\n              db.close();\n            }\n          }\n\n          return passed\n            ? value\n            : this.createError(\n                'string.sqlite_valid',\n                {\n                  v: value,\n                  q: params.q\n                },\n                state,\n                options\n              );\n        }\n      }\n    ]\n  }));\n\n  const schema = customJoi.object().keys({\n    id: customJoi.string().required(),\n    name: customJoi.string().required(),\n    color: customJoi.string(),\n    database: customJoi\n      .string()\n      .file_is_valid()\n      .file_has_absolute_path()\n      .file_exists()\n      .sqlite_valid()\n      .required(),\n    type: customJoi.string().required()\n  });\n\n  const errors = customJoi.validate(connection, schema, {\n    abortEarly: false\n  });\n\n  if (errors.error) {\n    if (errors.error.details.length > 0) {\n      const errorsMessages = errors.error.details.map(detail => ({\n        message: detail.message,\n        fieldName: detail.context.label\n      }));\n\n      throw new FalconError(\n        `Failed validation: ${JSON.stringify(errorsMessages)}`,\n        { errors }\n      );\n    }\n  }\n}\n"]}