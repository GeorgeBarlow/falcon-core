{"version":3,"sources":["../../src/config/BaseManager.js"],"names":["FinalStore","process","env","NODE_ENV","require","BaseManager","store","defaults","connections","queries","validateBeforeCreation","add","item","rndm","then","e","default","itemWithDefaults","id","color","items","getAll","push","set","itemType","errorMessages","passed","data","remove","itemId","filtereditems","filter","removeAll","update","itemToUpdateIndex","findIndex","itm","error","errors","Error","get","itemIndex","conn","FalconError","constructor","message"],"mappings":"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","file":"BaseManager.js","sourcesContent":["// @flow\n// Manage saved items to databases. Encrypts passwords\nimport type { errorObject } from './ManagerInterface';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\ntype itemType = {\n  id: string,\n  type: databasesType,\n  meta?: any,\n  [prop: string]: string\n};\n\nexport type itemValidationType = {\n  errorMessages: Array<{\n    fieldName: string,\n    message: string\n  }>,\n  passed: boolean,\n  data?: {\n    [prop: string]: any\n  }\n};\n\n// We can't import electron in jest so electron-store won't work.\n// We need to use 'conf' as a drop-in replacement for electron-store\n// in the testing environment\nconst FinalStore =\n  process.env.NODE_ENV === 'test'\n    ? require('conf') // eslint-disable-line\n    : require('electron-store');\n\n/**\n * This class is a general manager for falcon database items.\n * It can be extended to fit the needs of specific databases. For\n * example, if a specific database requires encryption, the .get()\n * method can be modified\n */\nexport default class BaseManager {\n  itemType: 'connections' | 'queries';\n\n  /**\n   * @private\n   */\n  store = new FinalStore({\n    defaults: {\n      connections: [],\n      queries: []\n    }\n  });\n\n  /**\n   * @private\n   * @abstract\n   */\n  validateBeforeCreation() {}\n\n  async add(item: itemType): Promise<itemValidationType> {\n    const rndm = await import('rndm').then(e => e.default || e)\n    const itemWithDefaults = {\n      id: `conn-${rndm(16)}`,\n      color: 'gray',\n      ...item\n    };\n\n    try {\n      await this.validateBeforeCreation(item);\n    } catch (e) {\n      throw e;\n    }\n\n    const items = await this.getAll();\n    items.push(itemWithDefaults);\n    this.store.set(this.itemType, items);\n\n    return {\n      errorMessages: [],\n      passed: true,\n      data: {\n        item: itemWithDefaults\n      }\n    };\n  }\n\n  /**\n   * Remove a item by it's id\n   */\n  async remove(itemId: string) {\n    const items = await this.getAll();\n    const filtereditems = items.filter(item => item.id !== itemId);\n    this.store.set(this.itemType, filtereditems);\n  }\n\n  async removeAll() {\n    await this.store.set(this.itemType, []);\n  }\n\n  /**\n   * Update a item by giving a new config\n   */\n  async update(itemId: string, item: itemType): Promise<itemValidationType> {\n    const items = await this.getAll();\n    const itemToUpdateIndex = items.findIndex(itm => itm.id === itemId);\n\n    try {\n      await this.validateBeforeCreation(item);\n    } catch (error) {\n      return error.errors;\n    }\n\n    switch (itemToUpdateIndex) {\n      case -1: {\n        throw new Error(`item with id \"${itemId}\" not found`);\n      }\n      default: {\n        items[itemToUpdateIndex] = item;\n      }\n    }\n\n    this.store.set(this.itemType, items);\n\n    return {\n      errorMessages: [],\n      passed: true,\n      data: {\n        item\n      }\n    };\n  }\n\n  async getAll(): Promise<Array<itemType>> {\n    return this.store.get(this.itemType);\n  }\n\n  async get(itemId: string): Promise<itemType> {\n    const items = await this.getAll();\n    const itemIndex = items.findIndex(conn => conn.id === itemId);\n\n    switch (itemIndex) {\n      case -1: {\n        throw new Error(\n          `Item type \"${this.itemType}\" with id \"${itemId}\" not found`\n        );\n      }\n      default: {\n        return items[itemIndex];\n      }\n    }\n  }\n}\n\ntype dataType = {\n  [prop: string]: any,\n  errors: Array<errorObject>\n};\n\nexport class FalconError extends Error {\n  data: dataType;\n\n  constructor(\n    message: string = 'Validation failed',\n    data: dataType = { errors: [] }\n  ) {\n    super(message);\n    this.data = data;\n  }\n}\n"]}