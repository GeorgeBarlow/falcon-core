{"version":3,"sources":["../../src/formatters/SqliteFormatter.js"],"names":["sep","transform","val","fns","reduce","acc","fn","createShiftArr","space","Array","keys","i","concat","repeat","subqueryLevel","str","level","replace","length","allReplacements","tab","_","m","toUpperCase","RegExp","splitSql","r","split","splitIfEven","updateOutput","el","parensLevel","input","test","shiftArr","deep","sql","numSpaces","splitByQuotes","arr","prototype","map","len","output","originalEl","slice","Object","assign","out","trim"],"mappings":"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","file":"SqliteFormatter.js","sourcesContent":["// @flow\n// Taken from https://github.com/mrdziuban/sql-formatter/blob/master/es6/sql-formatter.js\ntype inputType = {\n  str: string,\n  shiftArr: Array<string>,\n  tab: string,\n  arr: Array<string>,\n  parensLevel: number,\n  deep: number\n};\n\nconst sep = '~::~';\n\ntype mapperFn =\n  | ((str: string) => string | Array<string>)\n  | ((str: Array<string>) => string)\n  | ((str: inputType) => string);\ntype fnsType = Array<mapperFn>;\n\nconst transform = (val, ...fns: fnsType): string | Array<string> =>\n  fns.reduce((acc, fn) => fn(acc), val);\n\nconst createShiftArr = (space: string): Array<string> =>\n  [...Array(100).keys()].reduce(\n    (acc, i) => acc.concat(`\\n${space.repeat(i)}`),\n    []\n  );\n\nconst subqueryLevel = (str, level) =>\n  level - (str.replace(/\\(/g, '').length - str.replace(/\\)/g, '').length);\n\ntype replaceType = (f: any, a: any) => string;\n\nconst allReplacements = (\n  tab: string\n): Array<[RegExp, string | replaceType]> => [\n  [/ AND /gi, `${sep + tab}AND `],\n  [/ BETWEEN /gi, `${sep + tab}BETWEEN `],\n  [/ CASE /gi, `${sep + tab}CASE `],\n  [/ ELSE /gi, `${sep + tab}ELSE `],\n  [/ END /gi, `${sep + tab}END `],\n  [/ FROM /gi, `${sep}FROM `],\n  [/ GROUP\\s+BY /gi, `${sep}GROUP BY `],\n  [/ HAVING /gi, `${sep}HAVING `],\n  [/ IN /gi, ' IN '],\n  [\n    / ((CROSS|INNER|LEFT|RIGHT) )?JOIN /gi,\n    (_, m) => `${sep + (m || '')}JOIN `.toUpperCase()\n  ],\n  [/ ON /gi, `${sep + tab}ON `],\n  [/ OR /gi, `${sep + tab}OR `],\n  [/ ORDER\\s+BY /gi, `${sep}ORDER BY `],\n  [/ OVER /gi, `${sep + tab}OVER `],\n  [/\\(\\s*SELECT /gi, `${sep}(SELECT `],\n  [/\\)\\s*SELECT /gi, `)${sep}SELECT `],\n  [/ THEN /gi, ` THEN${sep}${tab}`],\n  [/ UNION /gi, `${sep}UNION${sep}`],\n  [/ USING /gi, `${sep}USING `],\n  [/ WHEN /gi, `${sep + tab}WHEN `],\n  [/ WHERE /gi, `${sep}WHERE `],\n  [/ WITH /gi, `${sep}WITH `],\n  [/ SET /gi, `${sep}SET `],\n  [/ ALL /gi, ' ALL '],\n  [/ AS /gi, ' AS '],\n  [/ ASC /gi, ' ASC '],\n  [/ DESC /gi, ' DESC '],\n  [/ DISTINCT /gi, ' DISTINCT '],\n  [/ EXISTS /gi, ' EXISTS '],\n  [/ NOT /gi, ' NOT '],\n  [/ NULL /gi, ' NULL '],\n  [/ LIKE /gi, ' LIKE '],\n  [/\\s*SELECT /gi, 'SELECT '],\n  [/\\s*UPDATE /gi, 'UPDATE '],\n  [/\\s*DELETE /gi, 'DELETE '],\n  [new RegExp(`(${sep})+`), sep]\n];\n\nconst splitSql = (str: string, tab: string) =>\n  allReplacements(tab)\n    .reduce((acc, r) => acc.replace(r[0], r[1]), str.replace(/\\s+/g, ' '))\n    .split(sep);\n\nconst splitIfEven = (i, str, tab) => (i % 2 === 0 ? splitSql(str, tab) : [str]);\n\nconst updateOutput = (el, parensLevel: number, input: inputType) =>\n  /\\(\\s*SELECT/.test(el)\n    ? [`${input.str}${input.shiftArr[input.deep + 1]}${el}`, input.deep + 1]\n    : [\n        /'/.test(el)\n          ? `${input.str}${el}`\n          : `${input.str}${input.shiftArr[input.deep]}${el}`,\n        parensLevel < 1 && input.deep !== 0 ? input.deep - 1 : input.deep\n      ];\n\nexport default (sql: string, numSpaces: number = 2) => {\n  const tab = ' '.repeat(numSpaces);\n  const splitByQuotes: Array<string> = transform(\n    sql,\n    (str: string): string => str.replace(/\\s+/g, ' '),\n    (str: string): string => str.replace(/'/g, `${sep}'`),\n    (str: string): Array<string> => str.split(sep)\n  );\n  const input = {\n    str: '',\n    shiftArr: createShiftArr(tab),\n    tab,\n    arr: Array.prototype.concat(\n      ...[...Array(splitByQuotes.length).keys()].map(i =>\n        splitIfEven(i, splitByQuotes[i], tab)\n      )\n    ),\n    parensLevel: 0,\n    deep: 0\n  };\n\n  const len = input.arr.length;\n  const output: inputType = [...Array(len).keys()].reduce((acc, i) => {\n    const originalEl = acc.arr[i];\n    const parensLevel = subqueryLevel(originalEl, acc.parensLevel);\n    const arr = /SELECT|SET/.test(originalEl)\n      ? acc.arr\n          .slice(0, i)\n          .concat(originalEl.replace(/,\\s+/g, `,\\n${acc.tab}${acc.tab}`))\n          .concat(acc.arr.slice(i + 1))\n      : acc.arr;\n    const el = arr[i];\n    const [str, deep] = updateOutput(el, parensLevel, acc);\n    return Object.assign(acc, {\n      str,\n      arr,\n      parensLevel,\n      deep\n    });\n  }, input);\n\n  return transform(\n    output,\n    (out: inputType): string => out.str,\n    (str: string): string => str.replace(/\\s+\\n/g, '\\n'),\n    (str: string): string => str.replace(/\\n+/g, '\\n'),\n    (str: string): string => str.trim()\n  );\n};\n"]}