{"version":3,"sources":["../src/Logger.js"],"names":["debug","loggers","createLogger","namespace","Error","debugLogger","bind","error","setLogger","customLogger","Object","keys","forEach","logger"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,EAAhB;;AAEA,eAAe,SAASC,YAAT,CAAsBC,SAAtB,EAA0C;AACvD,MAAI,CAACA,SAAL,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED;AACA,QAAMC,cAAcL,MAAO,kBAAiBG,SAAU,EAAlC,CAApB;AACAF,UAAQE,SAAR,IAAqB;AACnBH,WAAOK,YAAYC,IAAZ,CAAiBD,WAAjB,CADY;AAEnBE,WAAOF,YAAYC,IAAZ,CAAiBD,WAAjB;AAFY,GAArB;;AAKA;AACA;AACA;AACA,SAAO,MAAMJ,QAAQE,SAAR,CAAb;AACD;;AAED;;;AAGA,OAAO,SAASK,SAAT,CAAmBC,YAAnB,EAA0D;AAC/DC,SAAOC,IAAP,CAAYV,OAAZ,EAAqBW,OAArB,CAA6BC,UAAU;AACrCZ,YAAQY,MAAR,IAAkBJ,aAAaI,MAAb,CAAlB;AACD,GAFD;AAGD","file":"Logger.js","sourcesContent":["// @flow\nimport debug from 'debug';\n\nconst loggers = {};\n\nexport default function createLogger(namespace?: string) {\n  if (!namespace) {\n    throw new Error('Missing log namespace');\n  }\n\n  // default logger\n  const debugLogger = debug(`sqlectron-core:${namespace}`);\n  loggers[namespace] = {\n    debug: debugLogger.bind(debugLogger),\n    error: debugLogger.bind(debugLogger)\n  };\n\n  // The logger is load through a function\n  // so is possible to access a new logger\n  // defined with setLogger\n  return () => loggers[namespace];\n}\n\n/**\n * Allow use a different logger\n */\nexport function setLogger(customLogger: (logger: any) => string) {\n  Object.keys(loggers).forEach(logger => {\n    loggers[logger] = customLogger(logger);\n  });\n}\n"]}