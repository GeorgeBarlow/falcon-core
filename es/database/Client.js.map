{"version":3,"sources":["../../src/database/Client.js"],"names":["Client","server","database","config","client","Error"],"mappings":";;;;;kBAWwBA,M;;AAVxB;;;;;;AACA;AACA;AACA;AAOe,SAASA,MAAT,CACbC,MADa,EAEbC,QAFa,EAGA;AACb,UAAQD,OAAOE,MAAP,CAAcC,MAAtB;AACE,SAAK,QAAL;AACE,aAAO,qCAAsBH,MAAtB,EAA8BC,QAA9B,CAAP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,YAAM,IAAIG,KAAJ,CACH,yBAAwBJ,OAAOE,MAAP,CAAcC,MAAO,kBAD1C,CAAN;AAVJ;AAcD","file":"Client.js","sourcesContent":["// @flow\nimport SqliteProviderFactory from './provider_clients/SqliteProviderFactory';\n// import CassandraProviderFactory from './provider_clients/CassandraProviderFactory';\n// import MysqlProviderFactory from './provider_clients/MysqlProviderFactory';\n// import PostgresqlProviderFactory from './provider_clients/PostgresqlProviderFactory';\nimport type {\n  FactoryType,\n  serverType,\n  databaseType\n} from './provider_clients/ProviderInterface';\n\nexport default function Client(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  switch (server.config.client) {\n    case 'sqlite':\n      return SqliteProviderFactory(server, database);\n    // case 'cassandra':\n    //   return CassandraProviderFactory(server, database);\n    // case 'mysql':\n    //   return MysqlProviderFactory(server, database);\n    // case 'postgresql':\n    //   return PostgresqlProviderFactory(server, database);\n    default:\n      throw new Error(\n        `Database client type \"${server.config.client}\" not recognized`\n      );\n  }\n}\n"]}