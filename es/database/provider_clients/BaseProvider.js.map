{"version":3,"sources":["../../../src/database/provider_clients/BaseProvider.js"],"names":["config","promisify","shim","writeFileAsync","util","writeFile","logger","BaseProvider","constructor","server","database","logs","_graphQLServerIsRunning","connect","connecting","Error","connection","disconnect","driver","clients","client","err","error","buildSchemaFilter","schema","schemaField","where","only","ignore","length","push","map","name","join","buildDatabseFilter","databaseField","db","getQuerySelectTop","table","limit","checkIsConnected","limitValue","loadConfigLimit","limitSelect","DEFAULT_LIMIT","getTableSelectScript","columnNames","getTableColumnNames","schemaSelection","resolveSchema","wrap","getTableInsertScript","fill","columns","listTableColumns","column","columnName","getTableUpdateScript","setColumnForm","col","getTableDeleteScript","identifier","Array","isArray","wrapIdentifier","item","limitQueryDefaultSelectTop","get","checkUnsupported","exportOptions","getJsonString","exporter","SqliteJsonExport","dbConfig","getSingleTable","tableName","Promise","resolve","reject","options","json","results","all","tables","then","tableJsonStrings","getCsvString","jsonString","parsedJson","JSON","parse","json2csvParser","Json2CsvParser","fields","Object","keys","exportJson","filename","exportCsv","csvString"],"mappings":"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","file":"BaseProvider.js","sourcesContent":["// @flow\nimport util from 'util';\nimport { writeFile } from 'fs';\nimport { Parser as Json2CsvParser } from 'json2csv';\nimport SqliteJsonExport from 'sqlite-json-export';\nimport promisify from 'util.promisify';\nimport clients from './';\nimport * as config from '../../Config';\nimport createLogger from '../../Logger';\nimport type {\n  serverType,\n  databaseType,\n  exportOptionsType,\n  logType\n} from './ProviderInterface';\n\npromisify.shim();\n\nconst writeFileAsync = util.promisify(writeFile);\n\nconst logger = createLogger('db');\n\n/**\n * Common superclass of all other providers. Contains common functionalities\n */\nexport default class BaseProvider {\n  server: serverType;\n\n  database: databaseType;\n\n  logs: Array<logType> = [];\n\n  _graphQLServerIsRunning: boolean = false;\n\n  static DEFAULT_LIMIT: number = 1000;\n\n  static limitSelect = null;\n\n  constructor(server: Object, database: Object) {\n    this.server = server;\n    this.database = database;\n  }\n\n  async connect() {\n    if (this.database.connecting) {\n      throw new Error(\n        'There is already a connection in progress for this server. Aborting this new request.'\n      );\n    }\n\n    if (this.database.connecting) {\n      throw new Error(\n        'There is already a connection in progress for this database. Aborting this new request.'\n      );\n    }\n\n    try {\n      this.database.connecting = true;\n\n      // terminate any previous lost connection for this DB\n      if (this.database.connection) {\n        this.database.connection.disconnect();\n      }\n\n      const driver = clients[this.server.config.client];\n      const connection = await driver(this.server, this.database);\n      this.database.connection = connection;\n    } catch (err) {\n      logger().error('Connection error %j', err);\n      this.disconnect();\n      throw err;\n    } finally {\n      this.database.connecting = false;\n    }\n  }\n\n  buildSchemaFilter(\n    { schema }: Object = {},\n    schemaField: string = 'schema_name'\n  ) {\n    if (!schema) {\n      return null;\n    }\n\n    if (typeof schema === 'string') {\n      return `${schemaField} = '${schema}'`;\n    }\n\n    const where = [];\n    const { only, ignore } = schema;\n\n    if (only && only.length) {\n      where.push(\n        `${schemaField} IN (${only.map(name => `'${name}'`).join(',')})`\n      );\n    }\n    if (ignore && ignore.length) {\n      where.push(\n        `${schemaField} NOT IN (${ignore.map(name => `'${name}'`).join(',')})`\n      );\n    }\n\n    return where.join(' AND ');\n  }\n\n  buildDatabseFilter({ database }: Object = {}, databaseField: string) {\n    if (!database) {\n      return null;\n    }\n\n    if (typeof database === 'string') {\n      return `${databaseField} = '${database}'`;\n    }\n\n    const where = [];\n    const { only, ignore } = database;\n\n    if (only && only.length) {\n      where.push(\n        `${databaseField} IN (${only.map(name => `'${name}'`).join(',')})`\n      );\n    }\n\n    if (ignore && ignore.length) {\n      where.push(\n        `${databaseField} NOT IN (${ignore.map(name => `'${name}'`).join(',')})`\n      );\n    }\n\n    return where.join(' AND ');\n  }\n\n  disconnect() {\n    this.database.connecting = false;\n\n    if (this.database.connection) {\n      this.database.connection.disconnect();\n      this.database.connection = null;\n    }\n\n    if (this.server.db[this.database.database]) {\n      delete this.server.db[this.database.database];\n    }\n  }\n\n  async getQuerySelectTop(table: string, limit: number, schema: string) {\n    this.checkIsConnected();\n    let limitValue = limit;\n\n    await this.loadConfigLimit();\n    limitValue =\n      BaseProvider.limitSelect === 'number'\n        ? BaseProvider.limitSelect\n        : BaseProvider.DEFAULT_LIMIT;\n\n    return this.database.connection.getQuerySelectTop(\n      table,\n      limitValue,\n      schema\n    );\n  }\n\n  async getTableSelectScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `SELECT ${this.wrap(columnNames).join(', ')}`,\n      `FROM ${schemaSelection}${this.wrap(table)};`\n    ].join(' ');\n  }\n\n  async getTableInsertScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `INSERT INTO ${schemaSelection}${this.wrap(table)}`,\n      `(${this.wrap(columnNames).join(', ')})\\n`,\n      `VALUES (${columnNames.fill('?').join(', ')});`\n    ].join(' ');\n  }\n\n  async getTableColumnNames(table: string) {\n    this.checkIsConnected();\n    const columns = await this.database.connection.listTableColumns(\n      this.database.database,\n      table\n    );\n    return columns.map(column => column.columnName);\n  }\n\n  async getTableUpdateScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const setColumnForm = this.wrap(columnNames)\n      .map(col => `${col}=?`)\n      .join(', ');\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `UPDATE ${schemaSelection}${this.wrap(table)}\\n`,\n      `SET ${setColumnForm}\\n`,\n      'WHERE <condition>;'\n    ].join(' ');\n  }\n\n  getTableDeleteScript(table: string, schema?: string) {\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `DELETE FROM ${schemaSelection}${this.wrap(table)}`,\n      'WHERE <condition>;'\n    ].join(' ');\n  }\n\n  resolveSchema(schema?: string) {\n    return schema ? `${this.wrap(schema)}.` : '';\n  }\n\n  wrap(identifier: any) {\n    this.checkIsConnected();\n    return !Array.isArray(identifier)\n      ? this.database.connection.wrapIdentifier(identifier)\n      : identifier.map(item => this.database.connection.wrapIdentifier(item));\n  }\n\n  async loadConfigLimit() {\n    if (BaseProvider.limitSelect === null) {\n      const { limitQueryDefaultSelectTop } = await config.get();\n      BaseProvider.limitSelect = limitQueryDefaultSelectTop;\n    }\n    return BaseProvider.limitSelect;\n  }\n\n  checkIsConnected() {\n    if (this.database.connecting || !this.database.connection) {\n      throw new Error('There is no connection available.');\n    }\n    return true;\n  }\n\n  checkUnsupported(exportOptions: exportOptionsType) {\n    if (!exportOptions) {\n      throw new Error('No exportOptions passed');\n    }\n  }\n\n  async getJsonString(exportOptions: exportOptionsType) {\n    const exporter = new SqliteJsonExport(this.connection.dbConfig.database);\n    this.checkUnsupported(exportOptions);\n\n    if ('tables' in exportOptions && 'table' in exportOptions) {\n      throw new Error('You cannot give both \"tables\" and \"table\". Choose one');\n    }\n\n    const getSingleTable = (tableName: string): Promise<string> =>\n      new Promise((resolve, reject) => {\n        const options = {\n          table: tableName\n        };\n        exporter.json(options, (err: Error, json: string) => {\n          if (err) return reject(err);\n          return resolve(json);\n        });\n      });\n\n    // Multiple tables\n    if ('tables' in exportOptions) {\n      const results = await Promise.all(\n        exportOptions.tables.map(tableName => getSingleTable(tableName))\n      ).then(tableJsonStrings => tableJsonStrings.join(','));\n\n      return ['[', ...results, ']'].join('');\n    }\n\n    // Single table\n    return getSingleTable(exportOptions.table);\n  }\n\n  async getCsvString(exportOptions: exportOptionsType) {\n    if ('tables' in exportOptions) {\n      throw new Error(\n        'Exporting multiple tables to csv is currently not supported'\n      );\n    }\n    const jsonString = await this.getJsonString(exportOptions);\n    const parsedJson = JSON.parse(jsonString);\n    const json2csvParser = new Json2CsvParser({\n      fields: Object.keys(parsedJson[0])\n    });\n    return json2csvParser.parse(parsedJson);\n  }\n\n  async exportJson(filename: string, exportOptions: exportOptionsType) {\n    const jsonString = await this.getJsonString(exportOptions);\n    await writeFileAsync(filename, jsonString);\n    return jsonString;\n  }\n\n  async exportCsv(filename: string, exportOptions: exportOptionsType) {\n    const csvString = await this.getCsvString(exportOptions);\n    await writeFileAsync(filename, csvString);\n    return csvString;\n  }\n}\n"]}