{"version":3,"sources":["../../../src/database/provider_clients/CassandraProviderFactory.js"],"names":["server","database","dbConfig","configDatabase","logger","createLogger","debug","client","Client","connect","CassandraProvider","CassandraFactory","identify","BaseProvider","constructor","connection","disconnect","shutdown","getTables","Promise","resolve","reject","sql","params","execute","err","data","rows","map","row","name","getViews","getRoutines","getTableColumns","table","sort","a","b","position","columnName","column_name","dataType","type","getTableTriggers","getTableIndexes","getSchemas","getTableReferences","constraintName","referencedTable","keyType","getTableValues","query","Error","insert","objectToInsert","executeQuery","queryText","commands","identifyCommands","item","parseRowQueryResult","getDatabases","keyspace_name","getQuerySelectTop","limit","wrapIdentifier","getTableCreateScript","getViewCreateScript","getRoutineCreateScript","value","matched","match","replace","truncateAllTables","result","tables","table_name","promises","truncateSQL","t","all","command","isSelect","Array","isArray","fields","columns","rowCount","rowLength","undefined","affectedRows","isNaN","config","contactPoints","host","protocolOptions","port","keyspace","sshTunnel","localHost","localPort","ssl"],"mappings":";;AA0OA;;;;;+BAIA,WACEA,MADF,EAEEC,QAFF,EAGe;AACb,UAAMC,WAAWC,eAAeH,MAAf,EAAuBC,QAAvB,CAAjB;AACA,UAAMG,SAASC,aAAa,sBAAb,CAAf;;AAEAD,aAASE,KAAT,CAAe,6BAAf,EAA8CJ,QAA9C;AACA,UAAMK,SAAS,IAAIC,MAAJ,CAAWN,QAAX,CAAf;;AAEAE,aAASE,KAAT,CAAe,YAAf;AACA,UAAMC,OAAOE,OAAP,EAAN;;AAEA,WAAO,IAAIC,iBAAJ,CAAsBV,MAAtB,EAA8BC,QAA9B,EAAwCM,MAAxC,CAAP;AACD,G;;kBAdcI,gB;;;;;;;AA9Of;AACA;AACA,SAASH,MAAT,QAAuB,kBAAvB;AACA,SAASI,QAAT,QAAyB,sBAAzB;AACA,OAAOC,YAAP;AACA,OAAOR,YAAP;;;AAQA,MAAMK,iBAAN,SAAgCG,YAAhC,CAA0E;;AAGxEC,cAAYd,MAAZ,EAAoBC,QAApB,EAA8Bc,UAA9B,EAAkD;AAChD,UAAMf,MAAN,EAAcC,QAAd;AACA,SAAKc,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,eAAa;AACX,SAAKD,UAAL,CAAgBE,QAAhB;AACD;;AAEDC,YAAUjB,QAAV,EAAoB;AAClB,WAAO,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAO;;;;OAAb;AAKA,YAAMC,SAAS,CAACtB,QAAD,CAAf;AACA,WAAKc,UAAL,CAAgBS,OAAhB,CAAwBF,GAAxB,EAA6BC,MAA7B,EAAqC,CAACE,GAAD,EAAMC,IAAN,KAAe;AAClD,YAAID,GAAJ,EAAS,OAAOJ,OAAOI,GAAP,CAAP;AACT,eAAOL,QAAQM,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAQ,EAAEC,MAAMD,IAAIC,IAAZ,EAAR,CAAd,CAAR,CAAP;AACD,OAHD;AAID,KAXM,CAAP;AAYD;;AAEDC,aAAW;AACT,WAAOZ,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDY,gBAAc;AACZ,WAAOb,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDa,kBAAgBhC,QAAhB,EAAkCiC,KAAlC,EAAiD;AAC/C,WAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAO;;;;;OAAb;AAMA,YAAMC,SAAS,CAACtB,QAAD,EAAWiC,KAAX,CAAf;AACA,WAAKnB,UAAL,CAAgBS,OAAhB,CAAwBF,GAAxB,EAA6BC,MAA7B,EAAqC,CAACE,GAAD,EAAMC,IAAN,KAAe;AAClD,YAAID,GAAJ,EAAS,OAAOJ,OAAOI,GAAP,CAAP;AACT,eAAOL,QACLM,KAAKC;AACH;AADF,SAEGQ,IAFH,CAEQ,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAEC,QAAF,GAAaF,EAAEE,QAFjC,EAGGV,GAHH,CAGOC,QAAQ;AACXU,sBAAYV,IAAIW,WADL;AAEXC,oBAAUZ,IAAIa;AAFH,SAAR,CAHP,CADK,CAAP;AASD,OAXD;AAYD,KApBM,CAAP;AAqBD;;AAEDC,qBAAmB;AACjB,WAAOxB,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;AACDwB,oBAAkB;AAChB,WAAOzB,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDyB,eAAa;AACX,WAAO1B,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED0B,uBAAqB;AACnB,WAAO3B,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDa,kBAAgBhC,QAAhB,EAAkCiC,KAAlC,EAAiD;AAC/C,WAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAO;;;;;;;OAAb;AAQA,YAAMC,SAAS,CAACtB,QAAD,EAAWiC,KAAX,CAAf;;AAEA,WAAKnB,UAAL,CAAgBS,OAAhB,CAAwBF,GAAxB,EAA6BC,MAA7B,EAAqC,CAACE,GAAD,EAAMC,IAAN,KAAe;AAClD,YAAID,GAAJ,EAAS,OAAOJ,OAAOI,GAAP,CAAP;AACT,eAAOL,QACLM,KAAKC,IAAL,CAAUC,GAAV,CAAcC,QAAQ;AACpBkB,0BAAgB,IADI;AAEpBR,sBAAYV,IAAIW,WAFI;AAGpBQ,2BAAiB,IAHG;AAIpBC,mBAAS;AAJW,SAAR,CAAd,CADK,CAAP;AAQD,OAVD;AAWD,KAtBM,CAAP;AAuBD;;AAEDC,mBAAiB;AACf,WAAO/B,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED+B,UAAQ;AACN,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED;AACAC,SAAOpD,QAAP,EAAyBiC,KAAzB,EAAwCoB,cAAxC,EAAgE;AAC9D,WAAOnC,QAAQC,OAAR,CAAgB,CAACkC,cAAD,CAAhB,CAAP;AACD;;AAEDC,eAAaC,SAAb,EAAgC;AAC9B,UAAMC,WAAW,KAAKC,gBAAL,CAAsBF,SAAtB,EAAiC5B,GAAjC,CAAqC+B,QAAQA,KAAKjB,IAAlD,CAAjB;;AAEA,WAAO,IAAIvB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKN,UAAL,CAAgBS,OAAhB,CAAwBgC,SAAxB,EAAmC,CAAC/B,GAAD,EAAMC,IAAN,KAAe;AAChD,YAAID,GAAJ,EAAS,OAAOJ,OAAOI,GAAP,CAAP;AACT,eAAOL,QAAQ,CAAC,KAAKwC,mBAAL,CAAyBlC,IAAzB,EAA+B+B,SAAS,CAAT,CAA/B,CAAD,CAAR,CAAP;AACD,OAHD;AAID,KALM,CAAP;AAMD;;AAEDI,iBAAe;AACb,WAAO,IAAI1C,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAM,mDAAZ;AACA,YAAMC,SAAS,EAAf;AACA,WAAKR,UAAL,CAAgBS,OAAhB,CAAwBF,GAAxB,EAA6BC,MAA7B,EAAqC,CAACE,GAAD,EAAMC,IAAN,KAAe;AAClD,YAAID,GAAJ,EAAS,OAAOJ,OAAOI,GAAP,CAAP;AACT,eAAOL,QAAQM,KAAKC,IAAL,CAAUC,GAAV,CAAcC,OAAOA,IAAIiC,aAAzB,CAAR,CAAP;AACD,OAHD;AAID,KAPM,CAAP;AAQD;;AAEDC,oBAAkB7B,KAAlB,EAAiC8B,KAAjC,EAAgD;AAC9C,WAAO7C,QAAQC,OAAR,CACJ,iBAAgB,KAAK6C,cAAL,CAAoB/B,KAApB,CAA2B,UAAS8B,KAAM,EADtD,CAAP;AAGD;;AAEDE,yBAAuB;AACrB,WAAO/C,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED+C,wBAAsB;AACpB,WAAOhD,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDgD,2BAAyB;AACvB,WAAOjD,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED6C,iBAAeI,KAAf,EAAsB;AACpB,QAAIA,UAAU,GAAd,EAAmB,OAAOA,KAAP;AACnB,UAAMC,UAAUD,MAAME,KAAN,CAAY,kBAAZ,CAAhB,CAFoB,CAE6B;AACjD,QAAID,OAAJ,EAAa,OAAO,KAAKL,cAAL,CAAoBK,QAAQ,CAAR,CAApB,IAAkCA,QAAQ,CAAR,CAAzC;AACb,WAAQ,IAAGD,MAAMG,OAAN,CAAc,IAAd,EAAoB,IAApB,CAA0B,GAArC;AACD;;AAEKC,mBAAN,CAAwBxE,QAAxB,EAAkC;AAAA;;AAAA;AAChC,YAAMqB,MAAO;;;+BAGcrB,QAAS;KAHpC;AAKA,YAAM,CAACyE,MAAD,IAAW,MAAM,MAAKnB,YAAL,CAAkBjC,GAAlB,CAAvB;AACA,YAAMqD,SAASD,OAAO/C,IAAP,CAAYC,GAAZ,CAAgB;AAAA,eAAOC,IAAI+C,UAAX;AAAA,OAAhB,CAAf;AACA,YAAMC,WAAWF,OAAO/C,GAAP,CAAW,aAAK;AAC/B,cAAMkD,cAAe;uBACJ,MAAKb,cAAL,CAAoBhE,QAApB,CAA8B,IAAG,MAAKgE,cAAL,CAAoBc,CAApB,CAAuB;KADzE;AAGA,eAAO,MAAKxB,YAAL,CAAkBuB,WAAlB,CAAP;AACD,OALgB,CAAjB;;AAOA,aAAO3D,QAAQ6D,GAAR,CAAYH,QAAZ,CAAP;AAfgC;AAgBjC;;AAEDjB,sBAAoBlC,IAApB,EAA0BuD,OAA1B,EAAmC;AACjC;AACA,UAAMC,WAAWD,UAAUA,YAAY,QAAtB,GAAiCE,MAAMC,OAAN,CAAc1D,KAAKC,IAAnB,CAAlD;AACA,WAAO;AACLsD,eAASA,WAAYC,YAAY,QAD5B;AAELvD,YAAMD,KAAKC,IAAL,IAAa,EAFd;AAGL0D,cAAQ3D,KAAK4D,OAAL,IAAgB,EAHnB;AAILC,gBAAUL,WAAWxD,KAAK8D,SAAL,IAAkB,CAA7B,GAAiCC,SAJtC;AAKLC,oBACE,CAACR,QAAD,IAAa,CAACS,MAAMjE,KAAK8D,SAAX,CAAd,GAAsC9D,KAAK8D,SAA3C,GAAuDC;AANpD,KAAP;AAQD;;AAED/B,mBAAiBF,SAAjB,EAAoC;AAClC,QAAI;AACF,aAAO5C,SAAS4C,SAAT,CAAP;AACD,KAFD,CAEE,OAAO/B,GAAP,EAAY;AACZ,aAAO,EAAP;AACD;AACF;AArMuE;;AAwM1E,SAAStB,cAAT,CAAwBH,MAAxB,EAAwCC,QAAxC,EAA0D;AACxD,QAAM2F,SAAS;AACbC,mBAAe,CAAC7F,OAAO4F,MAAP,CAAcE,IAAf,CADF;AAEbC,qBAAiB;AACfC,YAAMhG,OAAO4F,MAAP,CAAcI;AADL,KAFJ;AAKbC,cAAUhG,SAASA;AALN,GAAf;;AAQA,MAAID,OAAOkG,SAAX,EAAsB;AACpBN,WAAOC,aAAP,GAAuB,CAAC7F,OAAO4F,MAAP,CAAcO,SAAf,CAAvB;AACAP,WAAOG,eAAP,CAAuBC,IAAvB,GAA8BhG,OAAO4F,MAAP,CAAcQ,SAA5C;AACD;;AAED,MAAIpG,OAAO4F,MAAP,CAAcS,GAAlB,EAAuB;AACrB;AACD;;AAED,SAAOT,MAAP;AACD;;AAsBD,eAAejF,gBAAf","file":"CassandraProviderFactory.js","sourcesContent":["/* eslint-disable */\n// @TODO: Add flow annotation\nimport { Client } from 'cassandra-driver';\nimport { identify } from 'sql-query-identifier';\nimport BaseProvider from './BaseProvider';\nimport createLogger from '../../Logger';\nimport type {\n  FactoryType,\n  ProviderInterface,\n  serverType,\n  databaseType\n} from './ProviderInterface';\n\nclass CassandraProvider extends BaseProvider implements ProviderInterface {\n  connection: Client;\n\n  constructor(server, database, connection: Client) {\n    super(server, database);\n    this.connection = connection;\n  }\n\n  disconnect() {\n    this.connection.shutdown();\n  }\n\n  getTables(database) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT table_name as name\n        FROM system_schema.tables\n        WHERE keyspace_name = ?\n      `;\n      const params = [database];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(data.rows.map(row => ({ name: row.name })));\n      });\n    });\n  }\n\n  getViews() {\n    return Promise.resolve([]);\n  }\n\n  getRoutines() {\n    return Promise.resolve([]);\n  }\n\n  getTableColumns(database: string, table: string) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT position, column_name, type\n        FROM system_schema.columns\n        WHERE keyspace_name = ?\n          AND table_name = ?\n      `;\n      const params = [database, table];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(\n          data.rows\n            // force pks be placed at the results beginning\n            .sort((a, b) => b.position - a.position)\n            .map(row => ({\n              columnName: row.column_name,\n              dataType: row.type\n            }))\n        );\n      });\n    });\n  }\n\n  getTableTriggers() {\n    return Promise.resolve([]);\n  }\n  getTableIndexes() {\n    return Promise.resolve([]);\n  }\n\n  getSchemas() {\n    return Promise.resolve([]);\n  }\n\n  getTableReferences() {\n    return Promise.resolve([]);\n  }\n\n  getTableColumns(database: string, table: string) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT column_name\n        FROM system_schema.columns\n        WHERE keyspace_name = ?\n          AND table_name = ?\n          AND kind = 'partition_key'\n        ALLOW FILTERING\n      `;\n      const params = [database, table];\n\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(\n          data.rows.map(row => ({\n            constraintName: null,\n            columnName: row.column_name,\n            referencedTable: null,\n            keyType: 'PRIMARY KEY'\n          }))\n        );\n      });\n    });\n  }\n\n  getTableValues() {\n    return Promise.resolve([]);\n  }\n\n  query() {\n    throw new Error('\"query\" is not implementd by cassandra this.connection.');\n  }\n\n  // @TODO\n  insert(database: string, table: string, objectToInsert: Object) {\n    return Promise.resolve([objectToInsert]);\n  }\n\n  executeQuery(queryText: string) {\n    const commands = this.identifyCommands(queryText).map(item => item.type);\n\n    return new Promise((resolve, reject) => {\n      this.connection.execute(queryText, (err, data) => {\n        if (err) return reject(err);\n        return resolve([this.parseRowQueryResult(data, commands[0])]);\n      });\n    });\n  }\n\n  getDatabases() {\n    return new Promise((resolve, reject) => {\n      const sql = 'SELECT keyspace_name FROM system_schema.keyspaces';\n      const params = [];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(data.rows.map(row => row.keyspace_name));\n      });\n    });\n  }\n\n  getQuerySelectTop(table: string, limit: number) {\n    return Promise.resolve(\n      `SELECT * FROM ${this.wrapIdentifier(table)} LIMIT ${limit}`\n    );\n  }\n\n  getTableCreateScript() {\n    return Promise.resolve('');\n  }\n\n  getViewCreateScript() {\n    return Promise.resolve('');\n  }\n\n  getRoutineCreateScript() {\n    return Promise.resolve('');\n  }\n\n  wrapIdentifier(value) {\n    if (value === '*') return value;\n    const matched = value.match(/(.*?)(\\[[0-9]\\])/); // eslint-disable-line no-useless-escape\n    if (matched) return this.wrapIdentifier(matched[1]) + matched[2];\n    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  async truncateAllTables(database) {\n    const sql = `\n      SELECT table_name\n      FROM system_schema.tables\n      WHERE keyspace_name = '${database}'\n    `;\n    const [result] = await this.executeQuery(sql);\n    const tables = result.rows.map(row => row.table_name);\n    const promises = tables.map(t => {\n      const truncateSQL = `\n      TRUNCATE TABLE ${this.wrapIdentifier(database)}.${this.wrapIdentifier(t)};\n    `;\n      return this.executeQuery(truncateSQL);\n    });\n\n    return Promise.all(promises);\n  }\n\n  parseRowQueryResult(data, command) {\n    // Fallback in case the identifier could not reconize the command\n    const isSelect = command ? command === 'SELECT' : Array.isArray(data.rows);\n    return {\n      command: command || (isSelect && 'SELECT'),\n      rows: data.rows || [],\n      fields: data.columns || [],\n      rowCount: isSelect ? data.rowLength || 0 : undefined,\n      affectedRows:\n        !isSelect && !isNaN(data.rowLength) ? data.rowLength : undefined\n    };\n  }\n\n  identifyCommands(queryText: string) {\n    try {\n      return identify(queryText);\n    } catch (err) {\n      return [];\n    }\n  }\n}\n\nfunction configDatabase(server: Object, database: Object) {\n  const config = {\n    contactPoints: [server.config.host],\n    protocolOptions: {\n      port: server.config.port\n    },\n    keyspace: database.database\n  };\n\n  if (server.sshTunnel) {\n    config.contactPoints = [server.config.localHost];\n    config.protocolOptions.port = server.config.localPort;\n  }\n\n  if (server.config.ssl) {\n    // TODO: sslOptions\n  }\n\n  return config;\n}\n\n/**\n * Construct the CassandraProvider. Wait for the client to connect and then instantiate\n * the provider\n */\nasync function CassandraFactory(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  const dbConfig = configDatabase(server, database);\n  const logger = createLogger('db:clients:cassandra');\n\n  logger().debug('creating database client %j', dbConfig);\n  const client = new Client(dbConfig);\n\n  logger().debug('connecting');\n  await client.connect();\n\n  return new CassandraProvider(server, database, client);\n}\n\nexport default CassandraFactory;\n"]}