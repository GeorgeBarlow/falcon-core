{"version":3,"sources":["../../../src/database/provider_clients/SshProvider.js"],"names":["BaseProvider","Tunnel","CLIENTS","SshProvider","connect","database","connecting","Error","connection","disconnect","server","config","ssh","sshTunnel","console","log","address","port","localHost","localPort","driver","client","Promise","all","handleSSHError","err","resolve","reject","on","error"],"mappings":";;AACA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,GAAxB;;;AAGA,eAAe,MAAMC,WAAN,SAA0BH,YAA1B,CAAuC;AAC9CI,SAAN,GAAgB;AAAA;;AAAA;AACd,UAAI,MAAKC,QAAL,CAAcC,UAAlB,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CACJ,uFADI,CAAN;AAGD;;AAED,UAAI,MAAKF,QAAL,CAAcC,UAAlB,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CACJ,yFADI,CAAN;AAGD;;AAED,UAAI;AACF,cAAKF,QAAL,CAAcC,UAAd,GAA2B,IAA3B;;AAEA;AACA,YAAI,MAAKD,QAAL,CAAcG,UAAlB,EAA8B;AAC5B,gBAAKH,QAAL,CAAcG,UAAd,CAAyBC,UAAzB;AACD;;AAED;AACA,YAAI,MAAKC,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,IAA0B,CAAC,MAAKF,MAAL,CAAYG,SAA3C,EAAsD;AACpDC,kBAAQC,GAAR,CAAY,qBAAZ;AACA,gBAAKL,MAAL,CAAYG,SAAZ,GAAwB,MAAMZ,OAAO,MAAKS,MAAL,CAAYC,MAAnB,CAA9B;;AAEA,gBAAM,EAAEK,OAAF,EAAWC,IAAX,KAAoB,MAAKP,MAAL,CAAYG,SAAZ,CAAsBG,OAAtB,EAA1B;AACAF,kBAAQC,GAAR,CACE,+CADF,EAEEC,OAFF,EAGEC,IAHF;;AAMA,gBAAKP,MAAL,CAAYC,MAAZ,CAAmBO,SAAnB,GAA+BF,OAA/B;AACA,gBAAKN,MAAL,CAAYC,MAAZ,CAAmBQ,SAAnB,GAA+BF,IAA/B;AACD;;AAED,cAAMG,SAASlB,QAAQ,MAAKQ,MAAL,CAAYC,MAAZ,CAAmBU,MAA3B,CAAf;;AAEA,cAAM,CAACb,UAAD,IAAe,MAAMc,QAAQC,GAAR,CAAY,CACrCH,OAAO,MAAKV,MAAZ,EAAoB,MAAKL,QAAzB,CADqC,EAErC,MAAKmB,cAAL,CAAoB,MAAKd,MAAL,CAAYG,SAAhC,CAFqC,CAAZ,CAA3B;;AAKA,cAAKR,QAAL,CAAcG,UAAd,GAA2BA,UAA3B;AACD,OAhCD,CAgCE,OAAOiB,GAAP,EAAY;AACZX,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCU,GAAnC;AACA,cAAKhB,UAAL;AACA,cAAMgB,GAAN;AACD,OApCD,SAoCU;AACR,cAAKpB,QAAL,CAAcC,UAAd,GAA2B,KAA3B;AACD;AAnDa;AAoDf;;AAEDkB,iBAAeX,SAAf,EAA0C;AACxC,WAAO,IAAIS,OAAJ,CAAY,CAACI,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAI,CAACd,SAAL,EAAgB;AACd,eAAOa,QAAQ,IAAR,CAAP;AACD;;AAEDb,gBAAUe,EAAV,CAAa,SAAb,EAAwBF,OAAxB;AACAb,gBAAUe,EAAV,CAAa,OAAb,EAAsBC,SAAS;AAC7Bf,gBAAQC,GAAR,CAAY,cAAZ,EAA4Bc,KAA5B;AACAF,eAAOE,KAAP;AACD,OAHD;;AAKA,aAAOH,QAAQ,IAAR,CAAP;AACD,KAZM,CAAP;AAaD;AArEmD","file":"SshProvider.js","sourcesContent":["// @flow\nimport BaseProvider from './BaseProvider';\nimport Tunnel from '../Tunnel';\nimport { CLIENTS } from '.';\nimport type { sshTunnelType } from '../Tunnel';\n\nexport default class SshProvider extends BaseProvider {\n  async connect() {\n    if (this.database.connecting) {\n      throw new Error(\n        'There is already a connection in progress for this server. Aborting this new request.'\n      );\n    }\n\n    if (this.database.connecting) {\n      throw new Error(\n        'There is already a connection in progress for this database. Aborting this new request.'\n      );\n    }\n\n    try {\n      this.database.connecting = true;\n\n      // terminate any previous lost connection for this DB\n      if (this.database.connection) {\n        this.database.connection.disconnect();\n      }\n\n      // reuse existing tunnel\n      if (this.server.config.ssh && !this.server.sshTunnel) {\n        console.log('creating ssh tunnel');\n        this.server.sshTunnel = await Tunnel(this.server.config);\n\n        const { address, port } = this.server.sshTunnel.address();\n        console.log(\n          'ssh forwarding through local connection %s:%d',\n          address,\n          port\n        );\n\n        this.server.config.localHost = address;\n        this.server.config.localPort = port;\n      }\n\n      const driver = CLIENTS[this.server.config.client];\n\n      const [connection] = await Promise.all([\n        driver(this.server, this.database),\n        this.handleSSHError(this.server.sshTunnel)\n      ]);\n\n      this.database.connection = connection;\n    } catch (err) {\n      console.log('Connection error %j', err);\n      this.disconnect();\n      throw err;\n    } finally {\n      this.database.connecting = false;\n    }\n  }\n\n  handleSSHError(sshTunnel?: sshTunnelType) {\n    return new Promise((resolve, reject) => {\n      if (!sshTunnel) {\n        return resolve(true);\n      }\n\n      sshTunnel.on('success', resolve);\n      sshTunnel.on('error', error => {\n        console.log('ssh error %j', error);\n        reject(error);\n      });\n\n      return resolve(true);\n    });\n  }\n}\n"]}