{"version":3,"sources":["../../../src/database/provider_clients/PostgresqlProviderFactory.js"],"names":["server","database","dbConfig","configDatabase","logger","createLogger","debug","connection","pool","pg","Pool","provider","PostgresqlProvider","getSchema","PostgresqlProviderFactory","identify","BaseProvider","createCancelablePromise","errors","types","setTypeParser","val","constructor","pgErrors","CANCELED","disconnect","end","getTables","filter","schemaFilter","buildSchemaFilter","sql","data","driverExecuteQuery","query","rows","getViews","getRoutines","map","schema","row","routine_schema","routineName","routine_name","routineType","routine_type","getTableColumns","table","defaultSchema","params","columnName","column_name","dataType","data_type","getTableTriggers","trigger_name","getTableIndexes","index_name","getSchemas","schema_name","getTableReferences","referenced_table_name","constraintName","constraint_name","referencedTable","keyType","constraint_type","queryText","pid","canceling","cancelable","CANCELED_BY_USER","sqlectronError","execute","runWithConnection","dataPid","Promise","race","wait","executeQuery","err","code","discard","cancel","Error","pg_cancel_backend","multiple","commands","identifyCommands","item","type","result","index","parseRowQueryResult","getDatabases","databaseFilter","buildDatabseFilter","datname","getQuerySelectTop","limit","wrapIdentifier","getTableCreateScript","createtable","getViewCreateScript","view","createViewSql","pg_get_viewdef","getRoutineCreateScript","routine","_","pg_get_functiondef","value","matched","match","replace","truncateAllTables","truncateAll","table_name","join","command","isSelect","fields","rowCount","undefined","affectedRows","isNaN","queryArgs","runQuery","args","text","values","multiResult","resolve","reject","run","connect","release","config","host","port","user","password","max","sshTunnel","localHost","localPort","ssl"],"mappings":"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","file":"PostgresqlProviderFactory.js","sourcesContent":["/* eslint-disable */\n// @TODO: Add flow annotation\nimport pg from 'pg';\nimport { identify } from 'sql-query-identifier';\nimport BaseProvider from './BaseProvider';\nimport createLogger from '../../Logger';\nimport { createCancelablePromise } from '../../Utils';\nimport errors from '../../Errors';\nimport type {\n  ProviderInterface,\n  FactoryType,\n  serverType,\n  databaseType,\n  queryArgsType\n} from './ProviderInterface';\n\n/**\n * Do not convert DATE types to JS date.\n * It gnores of applying a wrong timezone to the date.\n *\n * @TODO: Do not convert as well these same types with array\n *        (types 1115, 1182, 1185)\n */\npg.types.setTypeParser(1082, 'text', val => val); // date\npg.types.setTypeParser(1114, 'text', val => val); // timestamp without timezone\npg.types.setTypeParser(1184, 'text', val => val); // timestamp\n\ntype connectionType = {\n  pool: {},\n  release: () => void,\n  query: (\n    query: string,\n    args: Array<string>,\n    cb: (\n      err?: Error,\n      data: Array<{\n        column_name: string,\n        data_type: string,\n\n        scheme: string\n      }>,\n      fields: Array<string>\n    ) => void\n  ) => void,\n  pool: {\n    end: () => void,\n    connect: () => void,\n    getConnection: (\n      cb: (errPool: Array<Error>, connection: connectionType) => void\n    ) => void\n  }\n};\n\nclass PostgresqlProvider extends BaseProvider implements ProviderInterface {\n  connection: connectionType;\n\n  pgErrors = {\n    CANCELED: '57014'\n  };\n\n  constructor(\n    server: serverType,\n    database: databaseType,\n    connection: connectionType\n  ) {\n    super(server, database);\n    this.connection = connection;\n  }\n\n  disconnect() {\n    this.connection.pool.end();\n  }\n\n  async getTables(filter) {\n    const schemaFilter = this.buildSchemaFilter(filter, 'table_schema');\n    const sql = `\n      SELECT\n        table_schema as schema,\n        table_name as name\n      FROM information_schema.tables\n      WHERE table_type NOT LIKE '%VIEW%'\n      ${schemaFilter ? `AND ${schemaFilter}` : ''}\n      ORDER BY table_schema, table_name\n    `;\n\n    const data = await this.driverExecuteQuery({ query: sql });\n\n    return data.rows;\n  }\n\n  async getViews(filter) {\n    const schemaFilter = this.buildSchemaFilter(filter, 'table_schema');\n    const sql = `\n      SELECT\n        table_schema as schema,\n        table_name as name\n      FROM information_schema.views\n      ${schemaFilter ? `WHERE ${schemaFilter}` : ''}\n      ORDER BY table_schema, table_name\n    `;\n\n    const data = await this.driverExecuteQuery({ query: sql });\n\n    return data.rows;\n  }\n\n  async getRoutines(filter) {\n    const schemaFilter = this.buildSchemaFilter(filter, 'routine_schema');\n    const sql = `\n      SELECT\n        routine_schema,\n        routine_name,\n        routine_type\n      FROM information_schema.routines\n      ${schemaFilter ? `WHERE ${schemaFilter}` : ''}\n      GROUP BY routine_schema, routine_name, routine_type\n      ORDER BY routine_schema, routine_name\n    `;\n\n    const data = await this.driverExecuteQuery({ query: sql });\n\n    return data.rows.map(row => ({\n      schema: row.routine_schema,\n      routineName: row.routine_name,\n      routineType: row.routine_type\n    }));\n  }\n\n  async getTableColumns(database, table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT column_name, data_type\n      FROM information_schema.columns\n      WHERE table_schema = $1\n      AND table_name = $2\n    `;\n\n    const params = [schema, table];\n\n    type dataType = {\n      rows: Array<{\n        columnName: string,\n        dataType: string\n      }>\n    };\n\n    const data: dataType = await this.driverExecuteQuery({\n      query: sql,\n      params\n    });\n\n    return data.rows.map(row => ({\n      columnName: row.column_name,\n      dataType: row.data_type\n    }));\n  }\n\n  async getTableTriggers(table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT trigger_name\n      FROM information_schema.triggers\n      WHERE event_object_schema = $1\n      AND event_object_table = $2\n    `;\n    const params = [schema, table];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n    return data.rows.map(row => row.trigger_name);\n  }\n\n  async getTableIndexes(table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT indexname as index_name\n      FROM pg_indexes\n      WHERE schemaname = $1\n      AND tablename = $2\n    `;\n    const params = [schema, table];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.rows.map(row => row.index_name);\n  }\n\n  async getSchemas(filter) {\n    const schemaFilter = this.buildSchemaFilter(filter);\n    const sql = `\n      SELECT schema_name\n      FROM information_schema.schemata\n      ${schemaFilter ? `WHERE ${schemaFilter}` : ''}\n      ORDER BY schema_name\n    `;\n    const data = await this.driverExecuteQuery({ query: sql });\n\n    return data.rows.map(row => row.schema_name);\n  }\n\n  async getTableReferences(table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT ctu.table_name AS referenced_table_name\n      FROM information_schema.table_constraints AS tc\n      JOIN information_schema.constraint_table_usage AS ctu\n      ON ctu.constraint_name = tc.constraint_name\n      WHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_name = $1\n      AND tc.table_schema = $2\n    `;\n    const params = [table, schema];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.rows.map(row => row.referenced_table_name);\n  }\n\n  async getTableColumns(database, table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT\n        tc.constraint_name,\n        kcu.column_name,\n        CASE WHEN tc.constraint_type LIKE '%FOREIGN%' THEN ctu.table_name\n        ELSE NULL\n        END AS referenced_table_name,\n        tc.constraint_type\n      FROM information_schema.table_constraints AS tc\n      JOIN information_schema.key_column_usage AS kcu\n        USING (constraint_schema, constraint_name)\n      JOIN information_schema.constraint_table_usage as ctu\n        USING (constraint_schema, constraint_name)\n      WHERE tc.table_name = $1\n      AND tc.table_schema = $2\n      AND tc.constraint_type IN ('PRIMARY KEY', 'FOREIGN KEY')\n\n    `;\n    const params = [table, schema];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.rows.map(row => ({\n      constraintName: row.constraint_name,\n      columnName: row.column_name,\n      referencedTable: row.referenced_table_name,\n      keyType: row.constraint_type\n    }));\n  }\n\n  query(queryText) {\n    let pid = null;\n    let canceling = false;\n    const cancelable = createCancelablePromise({\n      ...errors.CANCELED_BY_USER,\n      sqlectronError: 'CANCELED_BY_USER'\n    });\n\n    return {\n      execute() {\n        return this.runWithConnection(async () => {\n          // const connectionClient = { connection };\n\n          const dataPid = await this.driverExecuteQuery({\n            query: 'SELECT pg_backend_pid() AS pid'\n          });\n\n          pid = dataPid.rows[0].pid;\n\n          try {\n            const data = await Promise.race([\n              cancelable.wait(),\n              this.executeQuery(this.connection, queryText)\n            ]);\n\n            pid = null;\n\n            return data;\n          } catch (err) {\n            if (canceling && err.code === this.pgErrors.CANCELED) {\n              canceling = false;\n              err.sqlectronError = 'CANCELED_BY_USER';\n            }\n\n            throw err;\n          } finally {\n            cancelable.discard();\n          }\n        });\n      },\n\n      async cancel() {\n        if (!pid) {\n          throw new Error('Query not ready to be canceled');\n        }\n\n        canceling = true;\n        try {\n          const data = await this.driverExecuteQuery({\n            query: `SELECT pg_cancel_backend(${pid});`\n          });\n\n          if (!data.rows[0].pg_cancel_backend) {\n            throw new Error(`Failed canceling query with pid ${pid}.`);\n          }\n\n          cancelable.cancel();\n        } catch (err) {\n          canceling = false;\n          throw err;\n        }\n      }\n    };\n  }\n\n  async executeQuery(queryText: string) {\n    const data = await this.driverExecuteQuery({\n      query: queryText,\n      multiple: true\n    });\n    const commands = this.identifyCommands(queryText).map(item => item.type);\n\n    return data.map((result, index) =>\n      this.parseRowQueryResult(result, commands[index])\n    );\n  }\n\n  async getDatabases(filter) {\n    const databaseFilter = this.buildDatabseFilter(filter, 'datname');\n    const sql = `\n      SELECT datname\n      FROM pg_database\n      WHERE datistemplate = $1\n      ${databaseFilter ? `AND ${databaseFilter}` : ''}\n      ORDER BY datname\n    `;\n    const params = [false];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n    return data.rows.map(row => row.datname);\n  }\n\n  async getQuerySelectTop(table, limit, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    return `SELECT * FROM ${this.wrapIdentifier(schema)}.${this.wrapIdentifier(\n      table\n    )} LIMIT ${limit}`;\n  }\n\n  async getTableCreateScript(table, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    // Reference http://stackoverflow.com/a/32885178\n    const sql = `\n      SELECT\n        'CREATE TABLE ' || quote_ident(tabdef.schema_name) || '.' || quote_ident(tabdef.table_name) || E' (\\n' ||\n        array_to_string(\n          array_agg(\n            '  ' || quote_ident(tabdef.column_name) || ' ' ||  tabdef.type || ' '|| tabdef.not_null\n          )\n          , E',\\n'\n        ) || E'\\n);\\n' ||\n        CASE WHEN tc.constraint_name IS NULL THEN ''\n            ELSE E'\\nALTER TABLE ' || quote_ident($2) || '.' || quote_ident(tabdef.table_name) ||\n            ' ADD CONSTRAINT ' || quote_ident(tc.constraint_name)  ||\n            ' PRIMARY KEY ' || '(' || substring(constr.column_name from 0 for char_length(constr.column_name)-1) || ')'\n        END AS createtable\n      FROM\n      ( SELECT\n          c.relname AS table_name,\n          a.attname AS column_name,\n          pg_catalog.format_type(a.atttypid, a.atttypmod) AS type,\n          CASE\n            WHEN a.attnotnull THEN 'NOT NULL'\n          ELSE 'NULL'\n          END AS not_null,\n          n.nspname as schema_name\n        FROM pg_class c,\n        pg_attribute a,\n        pg_type t,\n        pg_namespace n\n        WHERE c.relname = $1\n        AND a.attnum > 0\n        AND a.attrelid = c.oid\n        AND a.atttypid = t.oid\n        AND n.oid = c.relnamespace\n        AND n.nspname = $2\n        ORDER BY a.attnum DESC\n      ) AS tabdef\n      LEFT JOIN information_schema.table_constraints tc\n      ON  tc.table_name       = tabdef.table_name\n      AND tc.table_schema     = tabdef.schema_name\n      AND tc.constraint_Type  = 'PRIMARY KEY'\n      LEFT JOIN LATERAL (\n        SELECT column_name || ', ' AS column_name\n        FROM   information_schema.key_column_usage kcu\n        WHERE  kcu.constraint_name = tc.constraint_name\n        AND kcu.table_name = tabdef.table_name\n        AND kcu.table_schema = tabdef.schema_name\n        ORDER BY ordinal_position\n      ) AS constr ON true\n      GROUP BY tabdef.schema_name, tabdef.table_name, tc.constraint_name, constr.column_name;\n    `;\n    const params = [table, schema];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n    return data.rows.map(row => row.createtable);\n  }\n\n  async getViewCreateScript(view, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const createViewSql = `CREATE OR REPLACE VIEW ${this.wrapIdentifier(\n      schema\n    )}.${view} AS`;\n    const sql = 'SELECT pg_get_viewdef($1::regclass, true)';\n    const params = [view];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n    return data.rows.map(row => `${createViewSql}\\n${row.pg_get_viewdef}`);\n  }\n\n  async getRoutineCreateScript(routine, _, defaultSchema: string) {\n    const schema = defaultSchema || (await this.getSchema());\n    const sql = `\n      SELECT pg_get_functiondef(p.oid)\n      FROM pg_proc p\n      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace\n      WHERE proname = $1\n      AND n.nspname = $2\n    `;\n    const params = [routine, schema];\n    const data = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.rows.map(row => row.pg_get_functiondef);\n  }\n\n  wrapIdentifier(value: string) {\n    if (value === '*') {\n      return value;\n    }\n\n    const matched = value.match(/(.*?)(\\[[0-9]\\])/); // eslint-disable-line no-useless-escape\n\n    return matched\n      ? this.wrapIdentifier(matched[1]) + matched[2]\n      : `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  async getSchema() {\n    const sql = 'SELECT current_schema() AS schema';\n    const data = await this.driverExecuteQuery({ query: sql });\n    return data.rows[0].schema;\n  }\n\n  async truncateAllTables(schema) {\n    return this.runWithConnection(async () => {\n      const sql = `\n        SELECT quote_ident(table_name) as table_name\n        FROM information_schema.tables\n        WHERE table_schema = $1\n        AND table_type NOT LIKE '%VIEW%'\n      `;\n\n      const params = [schema];\n\n      const data = await this.driverExecuteQuery({ query: sql, params });\n\n      const truncateAll = data.rows\n        .map(\n          row => `\n          TRUNCATE TABLE ${this.wrapIdentifier(schema)}.${this.wrapIdentifier(\n            row.table_name\n          )}\n          RESTART IDENTITY CASCADE;\n        `\n        )\n        .join('');\n\n      await this.driverExecuteQuery({\n        query: truncateAll,\n        multiple: true\n      });\n    });\n  }\n\n  parseRowQueryResult(data, command) {\n    const isSelect = data.command === 'SELECT';\n    return {\n      command: command || data.command,\n      rows: data.rows,\n      fields: data.fields,\n      rowCount: isSelect ? data.rowCount : undefined,\n      affectedRows:\n        !isSelect && !isNaN(data.rowCount) ? data.rowCount : undefined\n    };\n  }\n\n  identifyCommands(queryText) {\n    try {\n      return identify(queryText);\n    } catch (err) {\n      return [];\n    }\n  }\n\n  driverExecuteQuery(queryArgs: queryArgsType) {\n    const runQuery = () => {\n      const args = {\n        text: queryArgs.query,\n        values: queryArgs.params,\n        multiResult: queryArgs.multiple\n      };\n\n      // node-postgres has support for Promise query\n      // but that always returns the \"fields\" property empty\n      return new Promise((resolve, reject) => {\n        this.connection.query(args, (err, data) => {\n          if (err) return reject(err);\n          return resolve(data);\n        });\n      });\n    };\n\n    return this.connection ? runQuery() : this.runWithConnection(runQuery);\n  }\n\n  async runWithConnection(run) {\n    await this.connection.pool.connect();\n\n    try {\n      return await run();\n    } finally {\n      this.connection.release();\n    }\n  }\n}\n\nfunction configDatabase(server: serverType, database: databaseType) {\n  const config = {\n    host: server.config.host,\n    port: server.config.port,\n    user: server.config.user,\n    password: server.config.password,\n    database: database.database,\n    max: 5 // max idle connections per time (30 secs)\n  };\n\n  if (server.sshTunnel) {\n    config.host = server.config.localHost;\n    config.port = server.config.localPort;\n  }\n\n  if (server.config.ssl) {\n    config.ssl = server.config.ssl;\n  }\n\n  return config;\n}\n\nasync function PostgresqlProviderFactory(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  const dbConfig = configDatabase(server, database);\n  const logger = createLogger('db:clients:postgresql');\n  logger().debug('create driver client for postgres with config %j', dbConfig);\n\n  const connection = {\n    pool: new pg.Pool(dbConfig)\n  };\n\n  logger().debug('connected');\n\n  const provider = new PostgresqlProvider(server, database, connection);\n  await provider.getSchema();\n\n  return provider;\n}\n\nexport default PostgresqlProviderFactory;\n"]}