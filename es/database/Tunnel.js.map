{"version":3,"sources":["../../src/database/Tunnel.js"],"names":["serverInfo","config","username","ssh","user","port","host","dstPort","dstHost","sshPort","srcPort","srcHost","localHost","localPort","getPort","password","passphrase","privateKey","readFile","configTunnel","net","Client","createLogger","Tunnel","logger","Promise","resolve","reject","debug","connections","server","createServer","conn","on","emit","err","client","push","forwardOut","sshStream","error","close","pipe","connect","once","forEach","end","listen","undefined"],"mappings":"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","file":"Tunnel.js","sourcesContent":["// @flow\nimport net from 'net';\nimport { Client } from 'ssh2';\nimport { getPort, readFile } from '../Utils';\nimport createLogger from '../Logger';\n\nexport type tunnelConfigType = {\n  username: string,\n  port: number,\n  host: string,\n  dstPort: string,\n  dstHost: string,\n  sshPort: number,\n  srcPort: number,\n  srcHost: string,\n  localHost: string,\n  localPort: number,\n  password?: string,\n  passphrase?: string,\n  privateKey?: string,\n  ssl?: {\n    rejectUnauthorized: boolean\n  }\n};\n\nexport type sshTunnelType = {\n  address: () => {\n    address: string,\n    port: number\n  },\n  on: (event: 'success' | 'error', () => void) => sshTunnelType\n};\n\nasync function configTunnel(serverInfo): Promise<tunnelConfigType> {\n  const config: tunnelConfigType = {\n    username: serverInfo.ssh.user,\n    port: serverInfo.ssh.port,\n    host: serverInfo.ssh.host,\n    dstPort: serverInfo.port,\n    dstHost: serverInfo.host,\n    sshPort: 22,\n    srcPort: 0,\n    srcHost: 'localhost',\n    localHost: 'localhost',\n    localPort: await getPort()\n  };\n\n  if (serverInfo.ssh.password) {\n    config.password = serverInfo.ssh.password;\n  }\n  if (serverInfo.ssh.passphrase) {\n    config.passphrase = serverInfo.ssh.passphrase;\n  }\n  if (serverInfo.ssh.privateKey) {\n    config.privateKey = await readFile(serverInfo.ssh.privateKey);\n  }\n\n  return config;\n}\n\nexport default function Tunnel(serverInfo: Object): Promise<Object> {\n  const logger = createLogger('db:tunnel');\n\n  return new Promise(async (resolve, reject) => {\n    logger().debug('configuring tunnel');\n    const config = await configTunnel(serverInfo);\n\n    const connections = [];\n\n    logger().debug('creating ssh tunnel server');\n    const server = net.createServer(async conn => {\n      conn.on('error', err => server.emit('error', err));\n\n      logger().debug('creating ssh tunnel client');\n      const client = new Client();\n      connections.push(conn);\n\n      client.on('error', err => server.emit('error', err));\n\n      client.on('ready', () => {\n        logger().debug('connected ssh tunnel client');\n        connections.push(client);\n\n        logger().debug('forwarding ssh tunnel client output');\n        client.forwardOut(\n          config.srcHost,\n          config.srcPort,\n          config.dstHost,\n          config.dstPort,\n          (err, sshStream) => {\n            if (err) {\n              logger().error('error ssh connection %j', err);\n              server.close();\n              server.emit('error', err);\n              return;\n            }\n            server.emit('success');\n            conn.pipe(sshStream).pipe(conn);\n          }\n        );\n      });\n\n      try {\n        const localPort = await getPort();\n\n        logger().debug('connecting ssh tunnel client');\n        client.connect({ ...config, localPort });\n      } catch (err) {\n        server.emit('error', err);\n      }\n    });\n\n    server.once('close', () => {\n      logger().debug('close ssh tunnel server');\n      connections.forEach(conn => conn.end());\n    });\n\n    logger().debug('connecting ssh tunnel server');\n    server.listen(config.localPort, config.localHost, undefined, err => {\n      if (err) return reject(err);\n      logger().debug('connected ssh tunnel server');\n      return resolve(server);\n    });\n  });\n}\n"]}