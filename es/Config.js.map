{"version":3,"sources":["../src/Config.js"],"names":["uuid","utils","EMPTY_CONFIG","servers","sanitizeServers","data","map","server","srv","id","v4","ssl","undefined","filename","getConfigPath","fileExistsResult","fileExists","writeJSONFile","result","readJSONFile","prepare","prepareSync","fileExistsSync","writeJSONFileSync","readJSONFileSync","get","getSync","save"],"mappings":";;;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,KAAZ;;AAEA,MAAMC,eAAe,EAAEC,SAAS,EAAX,EAArB;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAOA,KAAKF,OAAL,CAAaG,GAAb,CAAiBC,UAAU;AAChC,UAAMC,mBAAWD,MAAX,CAAN;;AAEA;AACA,QAAI,EAAE,QAAQC,GAAV,CAAJ,EAAoB;AAClBA,UAAIC,EAAJ,GAAST,KAAKU,EAAL,EAAT;AACD;;AAED;AACA,QAAIF,IAAIG,GAAJ,KAAYC,SAAhB,EAA2B;AACzBJ,UAAIG,GAAJ,GAAU,KAAV;AACD;;AAED,WAAOH,GAAP;AACD,GAdM,CAAP;AAeD;;AAED;;;AAGA;AAAA,+BAAO,aAAyB;AAC9B,UAAMK,WAAWZ,MAAMa,aAAN,EAAjB;AACA,UAAMC,mBAAmB,MAAMd,MAAMe,UAAN,CAAiBH,QAAjB,CAA/B;AACA,QAAI,CAACE,gBAAL,EAAuB;AACrB,YAAMd,MAAMgB,aAAN,CAAoBJ,QAApB,EAA8BX,YAA9B,CAAN;AACD;;AAED,UAAMgB,SAAS,MAAMjB,MAAMkB,YAAN,CAAmBN,QAAnB,CAArB;;AAEAK,WAAOf,OAAP,GAAiBC,gBAAgBc,MAAhB,CAAjB;;AAEA,UAAMjB,MAAMgB,aAAN,CAAoBJ,QAApB,EAA8BK,MAA9B,CAAN;;AAEA;AACA;AACA;AACA;AACD,GAjBD;;AAAA,kBAAsBE,OAAtB;AAAA;AAAA;AAAA;;AAmBA,OAAO,SAASC,WAAT,GAAuB;AAC5B,QAAMR,WAAWZ,MAAMa,aAAN,EAAjB;AACA,QAAMC,mBAAmBd,MAAMqB,cAAN,CAAqBT,QAArB,CAAzB;AACA,MAAI,CAACE,gBAAL,EAAuB;AACrBd,UAAMsB,iBAAN,CAAwBV,QAAxB,EAAkCX,YAAlC;AACD;;AAED,QAAMgB,SAASjB,MAAMuB,gBAAN,CAAuBX,QAAvB,CAAf;;AAEAK,SAAOf,OAAP,GAAiBC,gBAAgBc,MAAhB,CAAjB;;AAEAjB,QAAMsB,iBAAN,CAAwBV,QAAxB,EAAkCK,MAAlC;;AAEA;AACA;AACA;AACA;AACD;;AAED,OAAO,SAASO,GAAT,GAAe;AACpB,QAAMZ,WAAWZ,MAAMa,aAAN,EAAjB;AACA,SAAOb,MAAMkB,YAAN,CAAmBN,QAAnB,CAAP;AACD;;AAED,OAAO,SAASa,OAAT,GAAmB;AACxB,QAAMb,WAAWZ,MAAMa,aAAN,EAAjB;AACA,SAAOb,MAAMuB,gBAAN,CAAuBX,QAAvB,CAAP;AACD;;AAED,OAAO,SAASc,IAAT,CAActB,IAAd,EAA4B;AACjC,QAAMQ,WAAWZ,MAAMa,aAAN,EAAjB;AACA,SAAOb,MAAMgB,aAAN,CAAoBJ,QAApB,EAA8BR,IAA9B,CAAP;AACD","file":"Config.js","sourcesContent":["// @flow\nimport uuid from 'uuid';\nimport * as utils from './Utils';\n\nconst EMPTY_CONFIG = { servers: [] };\n\nfunction sanitizeServers(data) {\n  return data.servers.map(server => {\n    const srv = { ...server };\n\n    // ensure all server has an unique id\n    if (!('id' in srv)) {\n      srv.id = uuid.v4();\n    }\n\n    // ensure all servers has the new fileld SSL\n    if (srv.ssl === undefined) {\n      srv.ssl = false;\n    }\n\n    return srv;\n  });\n}\n\n/**\n * Prepare the configuration file sanitizing and validating all fields availbale\n */\nexport async function prepare() {\n  const filename = utils.getConfigPath();\n  const fileExistsResult = await utils.fileExists(filename);\n  if (!fileExistsResult) {\n    await utils.writeJSONFile(filename, EMPTY_CONFIG);\n  }\n\n  const result = await utils.readJSONFile(filename);\n\n  result.servers = sanitizeServers(result);\n\n  await utils.writeJSONFile(filename, result);\n\n  // @TODO: Validate whole configuration file\n  // if (!configValidate(result)) {\n  //   throw new Error('Invalid ~/.sqlectron.json file format');\n  // }\n}\n\nexport function prepareSync() {\n  const filename = utils.getConfigPath();\n  const fileExistsResult = utils.fileExistsSync(filename);\n  if (!fileExistsResult) {\n    utils.writeJSONFileSync(filename, EMPTY_CONFIG);\n  }\n\n  const result = utils.readJSONFileSync(filename);\n\n  result.servers = sanitizeServers(result);\n\n  utils.writeJSONFileSync(filename, result);\n\n  // TODO: Validate whole configuration file\n  // if (!configValidate(result)) {\n  //   throw new Error('Invalid ~/.sqlectron.json file format');\n  // }\n}\n\nexport function get() {\n  const filename = utils.getConfigPath();\n  return utils.readJSONFile(filename);\n}\n\nexport function getSync() {\n  const filename = utils.getConfigPath();\n  return utils.readJSONFileSync(filename);\n}\n\nexport function save(data: Object) {\n  const filename = utils.getConfigPath();\n  return utils.writeJSONFile(filename, data);\n}\n"]}