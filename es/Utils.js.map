{"version":3,"sources":["../src/Utils.js"],"names":["fs","path","pf","homedir","process","env","platform","getConfigPath","NODE_ENV","join","__dirname","fileExists","filename","Promise","resolve","stat","err","stats","isFile","fileExistsSync","statSync","e","writeFile","data","reject","writeJSONFile","JSON","stringify","writeJSONFileSync","writeFileSync","resolveHomePathToAbsolute","test","substring","readFile","filePath","toString","readJSONFile","then","parse","readJSONFileSync","readFileSync","enconding","getPort","host","port","wait","time","setTimeout","createCancelablePromise","error","timeIdle","canceled","discarded","Error","message","Object","getOwnPropertyNames","forEach","key","cancel","discard"],"mappings":"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","file":"Utils.js","sourcesContent":["// @flow\nimport fs from 'fs';\nimport path from 'path';\nimport pf from 'portfinder';\n\nexport function homedir() {\n  return (\n    process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || 'HOME'\n  );\n}\n\nexport function getConfigPath() {\n  return process.env.NODE_ENV === 'test'\n    ? path.join(__dirname, '..', 'test', 'fixtures', '.tmp.sqlectron.json')\n    : path.join(homedir(), '.sqlectron.json');\n}\n\nexport function fileExists(filename: string): Promise<boolean> {\n  return new Promise(resolve => {\n    fs.stat(filename, (err, stats) => {\n      if (err) return resolve(false);\n      return resolve(stats.isFile());\n    });\n  });\n}\n\nexport function fileExistsSync(filename: string) {\n  try {\n    return fs.statSync(filename).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function writeFile(filename: string, data: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(filename, data, err => {\n      if (err) return reject(err);\n      return resolve();\n    });\n  });\n}\n\nexport function writeJSONFile(filename: string, data: Object) {\n  return writeFile(filename, JSON.stringify(data, null, 2));\n}\n\nexport function writeJSONFileSync(filename: string, data: Object) {\n  return fs.writeFileSync(filename, JSON.stringify(data, null, 2));\n}\n\nexport function resolveHomePathToAbsolute(filename: string) {\n  if (!/^~\\//.test(filename)) {\n    return filename;\n  }\n\n  return path.join(homedir(), filename.substring(2));\n}\n\nexport function readFile(filename: string): Promise<string> {\n  const filePath = resolveHomePathToAbsolute(filename);\n  return new Promise((resolve, reject) => {\n    fs.readFile(path.resolve(filePath), (err, data) => {\n      if (err) return reject(err);\n      return resolve(data.toString());\n    });\n  });\n}\n\nexport function readJSONFile(filename: string): Promise<Object> {\n  return readFile(filename).then(data => JSON.parse(data));\n}\n\nexport function readJSONFileSync(filename: string) {\n  const filePath = resolveHomePathToAbsolute(filename);\n  const data = fs.readFileSync(path.resolve(filePath), { enconding: 'utf-8' });\n  return JSON.parse(data.toString());\n}\n\nexport function getPort(): Promise<number> {\n  return new Promise((resolve, reject) => {\n    pf.getPort({ host: 'localhost' }, (err, port) => {\n      if (err) return reject(err);\n      return resolve(port);\n    });\n  });\n}\n\nconst wait = time => new Promise(resolve => setTimeout(resolve, time));\n\nexport function createCancelablePromise(error: Error, timeIdle: number = 100) {\n  let canceled = false;\n  let discarded = false;\n\n  return {\n    async wait() {\n      while (!canceled && !discarded) {\n        // eslint-disable-next-line\n        await wait(timeIdle);\n      }\n\n      if (canceled) {\n        const err = new Error(error.message || 'Promise canceled.');\n\n        Object.getOwnPropertyNames(error).forEach(\n          // eslint-disable-next-line\n          key => (err[key] = error[key])\n        );\n\n        throw new Error(err);\n      }\n    },\n    cancel() {\n      canceled = true;\n    },\n    discard() {\n      discarded = true;\n    }\n  };\n}\n"]}