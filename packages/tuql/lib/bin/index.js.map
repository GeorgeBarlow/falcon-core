{"version":3,"sources":["../../src/bin/index.js"],"names":["FilePath","path","fs","existsSync","console","log","error","process","exit","realpathSync","optionDefinitions","name","alias","type","Boolean","description","defaultValue","Number","options","help","usage","header","content","optionList","promise","infile","db","schema","then","stdout","write","app","message","use","graphiql","listen","port"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AAKA,MAAMA,WAAWC,QAAQ;AACvB,MAAI,CAACC,aAAGC,UAAH,CAAcF,IAAd,CAAL,EAA0B;AACxBG,YAAQC,GAAR,CAAY,EAAZ;AACAD,YAAQE,KAAR,CAAe,2BAA0BL,IAAK,EAA9C;AACAM,YAAQC,IAAR;AACD;;AAED,SAAON,aAAGO,YAAH,CAAgBR,IAAhB,CAAP;AACD,CARD;;AAUA,MAAMS,oBAAoB,CACxB;AACEC,QAAM,UADR;AAEEC,SAAO,GAFT;AAGEC,QAAMC,OAHR;AAIEC,eAAa;AAJf,CADwB,EAOxB;AACEJ,QAAM,IADR;AAEEE,QAAMb,QAFR;AAGEgB,gBAAc,iBAHhB;AAIED,eACE;AALJ,CAPwB,EAcxB;AACEJ,QAAM,QADR;AAEEE,QAAMb,QAFR;AAGEe,eAAa;AAHf,CAdwB,EAmBxB;AACEJ,QAAM,MADR;AAEEC,SAAO,GAFT;AAGEC,QAAMI,MAHR;AAIED,gBAAc,IAJhB;AAKED,eAAa;AALf,CAnBwB,EA0BxB;AACEJ,QAAM,QADR;AAEEC,SAAO,GAFT;AAGEC,QAAMC,OAHR;AAIEC,eAAa;AAJf,CA1BwB,EAgCxB,EAAEJ,MAAM,MAAR,EAAgBC,OAAO,GAAvB,EAA4BC,MAAMC,OAAlC,EAA2CC,aAAa,kBAAxD,EAhCwB,CAA1B;;AAmCA,MAAMG,UAAU,+BAAgBR,iBAAhB,CAAhB;;AAEA,IAAIQ,QAAQC,IAAZ,EAAkB;AAChB,QAAMC,QAAQ,gCAAiB,CAC7B;AACEC,YAAQ,MADV;AAEEC,aACE;AAHJ,GAD6B,EAM7B;AACED,YAAQ,aADV;AAEEC,aAAS;AAFX,GAN6B,EAU7B;AACED,YAAQ,SADV;AAEEE,gBAAYb;AAFd,GAV6B,EAc7B;AACEY,aAAS;AADX,GAd6B,CAAjB,CAAd;AAkBAlB,UAAQC,GAAR,CAAYe,KAAZ;AACAb,UAAQC,IAAR;AACD;;AAED,MAAMgB,UAAUN,QAAQO,MAAR,GACZ,mCAAsBP,QAAQO,MAA9B,CADY,GAEZ,qCAAwBP,QAAQQ,EAAhC,CAFJ;;AAIA,IAAIR,QAAQS,MAAZ,EAAoB;AAClBH,UAAQI,IAAR,CAAaD,UAAUpB,QAAQsB,MAAR,CAAeC,KAAf,CAAqB,0BAAYH,MAAZ,CAArB,CAAvB;AACD,CAFD,MAEO;AACL,QAAMI,MAAM,wBAAZ;;AAEA,QAAMC,UAAUd,QAAQO,MAAR,GACX,oCAAmCP,QAAQO,MAAO,EADvC,GAEX,uBAAsBP,QAAQQ,EAAG,EAFtC;;AAIAtB,UAAQC,GAAR,CAAY,EAAZ;AACAD,UAAQC,GAAR,CAAa,MAAK2B,OAAQ,EAA1B;;AAEAR,UAAQI,IAAR,CAAaD,UAAU;AACrBI,QAAIE,GAAJ,CACE,UADF,EAEE,qBAFF,EAGE,8BAAY;AACVN,YADU;AAEVO,gBAAUhB,QAAQgB;AAFR,KAAZ,CAHF;;AASAH,QAAII,MAAJ,CAAWjB,QAAQkB,IAAnB,EAAyB,MACvBhC,QAAQC,GAAR,CAAa,kCAAiCa,QAAQkB,IAAK,UAA3D,CADF;AAGD,GAbD;AAcD","file":"index.js","sourcesContent":["\n\nimport fs from 'fs';\nimport express from 'express';\nimport graphqlHTTP from 'express-graphql';\nimport cors from 'cors';\nimport commandLineArgs from 'command-line-args';\nimport commandLineUsage from 'command-line-usage';\nimport { printSchema } from 'graphql';\n\nimport {\n  buildSchemaFromDatabase,\n  buildSchemaFromInfile,\n} from '../builders/schema';\n\nconst FilePath = path => {\n  if (!fs.existsSync(path)) {\n    console.log('');\n    console.error(` > File does not exist: ${path}`);\n    process.exit();\n  }\n\n  return fs.realpathSync(path);\n};\n\nconst optionDefinitions = [\n  {\n    name: 'graphiql',\n    alias: 'g',\n    type: Boolean,\n    description: 'Enable graphiql UI',\n  },\n  {\n    name: 'db',\n    type: FilePath,\n    defaultValue: 'database.sqlite',\n    description:\n      'Path to the sqlite database you want to create a graphql endpoint for',\n  },\n  {\n    name: 'infile',\n    type: FilePath,\n    description: 'Path to a sql file to bootstrap an in-memory database with',\n  },\n  {\n    name: 'port',\n    alias: 'p',\n    type: Number,\n    defaultValue: 4000,\n    description: 'Port to run on (Default: 4000)',\n  },\n  {\n    name: 'schema',\n    alias: 's',\n    type: Boolean,\n    description: 'Write string representation of schema to stdout',\n  },\n  { name: 'help', alias: 'h', type: Boolean, description: 'This help output' },\n];\n\nconst options = commandLineArgs(optionDefinitions);\n\nif (options.help) {\n  const usage = commandLineUsage([\n    {\n      header: 'tuql',\n      content:\n        '[underline]{tuql} turns just about any sqlite database into a graphql endpoint, including inferring associations',\n    },\n    {\n      header: 'Basic usage',\n      content: 'tuql --db path/to/db.sqlite',\n    },\n    {\n      header: 'Options',\n      optionList: optionDefinitions,\n    },\n    {\n      content: 'Project home: [underline]{https://github.com/bradleyboy/tuql}',\n    },\n  ]);\n  console.log(usage);\n  process.exit();\n}\n\nconst promise = options.infile\n  ? buildSchemaFromInfile(options.infile)\n  : buildSchemaFromDatabase(options.db);\n\nif (options.schema) {\n  promise.then(schema => process.stdout.write(printSchema(schema)));\n} else {\n  const app = express();\n\n  const message = options.infile\n    ? `Creating in-memory database with ${options.infile}`\n    : `Reading schema from ${options.db}`;\n\n  console.log('');\n  console.log(` > ${message}`);\n\n  promise.then(schema => {\n    app.use(\n      '/graphql',\n      cors(),\n      graphqlHTTP({\n        schema,\n        graphiql: options.graphiql,\n      })\n    );\n\n    app.listen(options.port, () =>\n      console.log(` > Running at http://localhost:${options.port}/graphql`)\n    );\n  });\n}\n"]}