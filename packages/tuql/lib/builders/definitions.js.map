{"version":3,"sources":["../../src/builders/definitions.js"],"names":["transformColumnToType","column","c","toLowerCase","includes","INTEGER","TEXT","REAL","NUMERIC","BLOB","columns","tableName","reduce","acc","name","type","primaryKey","pk","field","allowNull","notnull","dflt_value","defaultValue","autoIncrement"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,wBAAwBC,UAAU;AACtC,QAAMC,IAAID,OAAOE,WAAP,EAAV;;AAEA,MAAID,EAAEE,QAAF,CAAW,KAAX,CAAJ,EAAuB;AACrB,WAAOC,kBAAP;AACD;;AAED,MAAIH,EAAEE,QAAF,CAAW,MAAX,KAAsBF,MAAM,MAA5B,IAAsCA,MAAM,MAAhD,EAAwD;AACtD,WAAOI,eAAP;AACD;;AAED,MAAIJ,EAAEE,QAAF,CAAW,QAAX,KAAwBF,MAAM,MAA9B,IAAwCA,MAAM,OAAlD,EAA2D;AACzD,WAAOK,eAAP;AACD;;AAED,MACEL,EAAEE,QAAF,CAAW,SAAX,KACAF,EAAEE,QAAF,CAAW,SAAX,CADA,IAEAF,MAAM,SAFN,IAGAA,MAAM,MAHN,IAIAA,MAAM,UALR,EAME;AACA,WAAOM,kBAAP;AACD;;AAED,SAAOC,eAAP;AACD,CA1BD;;kBA4Be,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACrC,SAAOD,QAAQE,MAAR,CAAe,CAACC,GAAD,EAAMZ,MAAN,KAAiB;AACrCY,QAAI,4BAAgBZ,OAAOa,IAAvB,CAAJ,IAAoC;AAClCC,YAAMf,sBAAsBC,OAAOc,IAA7B,CAD4B;AAElCC,kBAAYf,OAAOgB,EAAP,KAAc,CAFQ;AAGlCC,aAAOjB,OAAOa,IAHoB;AAIlCK,iBAAWlB,OAAOmB,OAAP,KAAmB,CAAnB,IAAwBnB,OAAOoB,UAAP,KAAsB,IAJvB;AAKlCC,oBAAcrB,OAAOoB,UALa;AAMlCE,qBAAetB,OAAOc,IAAP,KAAgB,SAAhB,IAA6Bd,OAAOgB,EAAP,KAAc;AANxB,KAApC;;AASA,WAAOJ,GAAP;AACD,GAXM,EAWJ,EAXI,CAAP;AAYD,C","file":"definitions.js","sourcesContent":["import { TEXT, INTEGER, REAL, NUMERIC, BLOB } from 'sequelize';\nimport { singular } from 'pluralize';\nimport { formatFieldName } from '../utils';\n\nconst transformColumnToType = column => {\n  const c = column.toLowerCase();\n\n  if (c.includes('int')) {\n    return INTEGER;\n  }\n\n  if (c.includes('char') || c === 'clob' || c === 'text') {\n    return TEXT;\n  }\n\n  if (c.includes('double') || c === 'real' || c === 'float') {\n    return REAL;\n  }\n\n  if (\n    c.includes('decimal') ||\n    c.includes('numeric') ||\n    c === 'boolean' ||\n    c === 'date' ||\n    c === 'datetime'\n  ) {\n    return NUMERIC;\n  }\n\n  return BLOB;\n};\n\nexport default (columns, tableName) => {\n  return columns.reduce((acc, column) => {\n    acc[formatFieldName(column.name)] = {\n      type: transformColumnToType(column.type),\n      primaryKey: column.pk === 1,\n      field: column.name,\n      allowNull: column.notnull === 0 || column.dflt_value !== null,\n      defaultValue: column.dflt_value,\n      autoIncrement: column.type === 'INTEGER' && column.pk === 1,\n    };\n\n    return acc;\n  }, {});\n};\n"]}