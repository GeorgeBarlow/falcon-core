{"version":3,"sources":["../../src/builders/schema.js"],"names":["console","log","foo","defaultArgs","defaultListArgs","GenericResponseType","GraphQLObjectType","name","fields","success","type","GraphQLBoolean","buildSchemaFromDatabase","databaseFile","Promise","resolve","reject","db","Sequelize","dialect","storage","logging","operatorsAliases","Op","build","buildSchemaFromInfile","infile","contents","fs","readFileSync","statements","toString","split","filter","s","length","stmt","query","models","associations","tables","table","info","infoMeta","foreignKeys","concat","define","timestamps","tableName","forEach","from","to","options","key","fromKey","toKey","types","mutations","queries","Object","keys","model","fieldAssociations","hasMany","map","belongsTo","belongsToMany","sides","includes","associatedModel","GraphQLList","args","fieldName","other","side","obj","values","thing","create","pkKey","findOne","where","update","destroy","nameBits","connector","prefix","join","otherArgumentKey","thingOne","findById","thingTwo","method","mutation","GraphQLSchema"],"mappings":"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","file":"schema.js","sourcesContent":["import fs from 'fs';\nimport {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLBoolean,\n} from 'graphql';\nimport foo, {\n  resolver,\n  attributeFields,\n  defaultListArgs,\n  defaultArgs,\n} from '@falcon-client/graphql-sequelize';\nimport { singular } from 'pluralize';\nimport Sequelize from 'sequelize';\n\nimport createDefinitions from './definitions';\nimport {\n  isJoinTable,\n  findModelKey,\n  formatFieldName,\n  formatTypeName,\n  pascalCase,\n} from '../utils';\nimport { joinTableAssociations, tableAssociations } from './associations';\nimport {\n  makeCreateArgs,\n  makeUpdateArgs,\n  makeDeleteArgs,\n  getPkFieldKey,\n  makePolyArgs,\n  getPolyKeys,\n} from './arguments';\n\nconsole.log(foo, defaultArgs, defaultListArgs)\n\nconst GenericResponseType = new GraphQLObjectType({\n  name: 'GenericResponse',\n  fields: {\n    success: { type: GraphQLBoolean },\n  },\n});\n\nexport const buildSchemaFromDatabase = databaseFile => new Promise(async (resolve, reject) => {\n    const db = new Sequelize({\n      dialect: 'sqlite',\n      storage: databaseFile,\n      logging: false,\n      operatorsAliases: Sequelize.Op,\n    });\n\n    resolve(await build(db));\n  });\n\nexport const buildSchemaFromInfile = infile => new Promise(async (resolve, reject) => {\n    const db = new Sequelize({\n      dialect: 'sqlite',\n      storage: ':memory:',\n      logging: false,\n      operatorsAliases: Sequelize.Op,\n    });\n\n    const contents = fs.readFileSync(infile);\n    const statements = contents\n      .toString()\n      .split(/\\r?\\n|\\r/g)\n      .filter(s => s.length);\n\n    for (const stmt of statements) {\n      await db.query(stmt);\n    }\n\n    resolve(await build(db));\n  });\n\nconst build = db => new Promise(async (resolve, reject) => {\n    const models = {};\n    let associations = [];\n\n    const tables = await db.query(\n      'SELECT name FROM sqlite_master WHERE type = \"table\" AND name NOT LIKE \"sqlite_%\"'\n    );\n\n    for (const table of tables) {\n      const [info, infoMeta] = await db.query(`PRAGMA table_info(\"${table}\")`);\n      const foreignKeys = await db.query(`PRAGMA foreign_key_list(\"${table}\")`);\n\n      if (isJoinTable(table, tables)) {\n        associations = associations.concat(\n          joinTableAssociations(table, info, foreignKeys)\n        );\n      } else {\n        models[table] = db.define(table, createDefinitions(info, table), {\n          timestamps: false,\n          tableName: table,\n        });\n\n        associations = associations.concat(\n          tableAssociations(table, info, foreignKeys)\n        );\n      }\n    }\n\n    associations.forEach(({ from, to, type, options }) => {\n      const key = type === 'belongsTo' ? singular(to) : to;\n      const fromKey = findModelKey(from, models);\n      const toKey = findModelKey(to, models);\n      models[fromKey][key] = models[fromKey][type](models[toKey], options);\n    });\n\n    const types = {};\n    const mutations = {};\n    const queries = {};\n\n    Object.keys(models).forEach(key => {\n      const model = models[key];\n      const fieldAssociations = {\n        hasMany: associations\n          .filter(({ type }) => type === 'hasMany')\n          .filter(({ from }) => from === key)\n          .map(({ to }) => models[to]),\n        belongsTo: associations\n          .filter(({ type }) => type === 'belongsTo')\n          .filter(({ from }) => from === key)\n          .map(({ to }) => models[to]),\n        belongsToMany: associations\n          .filter(({ type }) => type === 'belongsToMany')\n          .map(({ from, to }) => [from, to])\n          .filter(sides => sides.includes(key)),\n      };\n\n      const type = new GraphQLObjectType({\n        name: formatTypeName(model.name),\n        fields() {\n          const fields = attributeFields(model);\n\n          fieldAssociations.hasMany.forEach(associatedModel => {\n            fields[formatFieldName(associatedModel.name)] = {\n              type: new GraphQLList(types[associatedModel.name]),\n              args: defaultListArgs(model[associatedModel.name]),\n              resolve: resolver(model[associatedModel.name]),\n            };\n          });\n\n          fieldAssociations.belongsTo.forEach(associatedModel => {\n            const fieldName = singular(associatedModel.name);\n            fields[formatFieldName(fieldName)] = {\n              type: types[associatedModel.name],\n              resolve: resolver(model[fieldName]),\n            };\n          });\n\n          fieldAssociations.belongsToMany.forEach(sides => {\n            const [other] = sides.filter(side => side !== model.name);\n            fields[formatFieldName(other)] = {\n              type: new GraphQLList(types[other]),\n              resolve: resolver(model[other]),\n            };\n          });\n\n          return fields;\n        },\n      });\n\n      types[key] = type;\n\n      queries[formatFieldName(key)] = {\n        type: new GraphQLList(type),\n        args: defaultListArgs(model),\n        resolve: resolver(model),\n      };\n\n      queries[singular(formatFieldName(key))] = {\n        type,\n        args: defaultArgs(model),\n        resolve: resolver(model),\n      };\n\n      mutations[`create${type}`] = {\n        type,\n        args: makeCreateArgs(model),\n        resolve: async (obj, values, info) => {\n          const thing = await model.create(values);\n          return thing;\n        },\n      };\n\n      mutations[`update${type}`] = {\n        type,\n        args: makeUpdateArgs(model),\n        resolve: async (obj, values, info) => {\n          const pkKey = getPkFieldKey(model);\n\n          const thing = await model.findOne({\n            where: { [pkKey]: values[pkKey] },\n          });\n\n          await thing.update(values);\n\n          return thing;\n        },\n      };\n\n      mutations[`delete${type}`] = {\n        type: GenericResponseType,\n        args: makeDeleteArgs(model),\n        resolve: async (obj, values, info) => {\n          const thing = await model.findOne({\n            where: values,\n          });\n\n          await thing.destroy();\n\n          return {\n            success: true,\n          };\n        },\n      };\n\n      fieldAssociations.belongsToMany.forEach(sides => {\n        const [other] = sides.filter(side => side !== model.name);\n        const nameBits = [formatTypeName(model.name), formatTypeName(other)];\n\n        ['add', 'remove'].forEach(prefix => {\n          const connector = prefix === 'add' ? 'To' : 'From';\n          const name = `${prefix}${nameBits.join(connector)}`;\n          mutations[name] = {\n            type: GenericResponseType,\n            args: makePolyArgs(model, models[other]),\n            resolve: async (obj, values, info) => {\n              const key = getPkFieldKey(model);\n              const [, , otherArgumentKey] = getPolyKeys(model, models[other]);\n\n              const thingOne = await model.findById(values[key]);\n              const thingTwo = await models[other].findById(\n                values[otherArgumentKey]\n              );\n\n              const method = `${prefix}${pascalCase(singular(other))}`;\n\n              await thingOne[method](thingTwo);\n\n              return {\n                success: true,\n              };\n            },\n          };\n        });\n      });\n    });\n\n    const query = new GraphQLObjectType({\n      name: 'Query',\n      fields: queries,\n    });\n\n    const mutation = new GraphQLObjectType({\n      name: 'Mutation',\n      fields: mutations,\n    });\n\n    resolve(\n      new GraphQLSchema({\n        query,\n        mutation,\n      })\n    );\n  });\n"]}