{"version":3,"sources":["../../src/builders/arguments.js"],"names":["getPkFieldKey","model","Object","keys","attributes","find","key","attr","primaryKey","makeCreateArgs","fields","pk","makeUpdateArgs","reduce","acc","field","type","GraphQLNonNull","ofType","makeDeleteArgs","getPolyKeys","otherModel","otherKey","name","makePolyArgs","otherKeyFormatted","otherFields"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,wCAAgBC,SAASC,OAAOC,IAAP,CAAYF,MAAMG,UAAlB,EAA8BC,IAA9B,CAAmCC,OAAO;AAC9E,QAAMC,OAAON,MAAMG,UAAN,CAAiBE,GAAjB,CAAb;AACA,SAAOC,KAAKC,UAAZ;AACD,CAHqC,CAA/B;;AAKA,MAAMC,0CAAiBR,SAAS;AACrC,QAAMS,SAAS,uCAAgBT,KAAhB,CAAf;AACA,QAAMU,KAAKX,cAAcC,KAAd,CAAX;;AAEA,SAAOS,OAAOC,EAAP,CAAP;;AAEA,SAAOD,MAAP;AACD,CAPM;;AASA,MAAME,0CAAiBX,SAAS;AACrC,QAAMS,SAAS,uCAAgBT,KAAhB,CAAf;;AAEA,SAAOC,OAAOC,IAAP,CAAYO,MAAZ,EAAoBG,MAApB,CAA2B,CAACC,GAAD,EAAMR,GAAN,KAAc;AAC9C,UAAMS,QAAQL,OAAOJ,GAAP,CAAd;;AAEA,QAAIS,MAAMC,IAAN,YAAsBC,uBAA1B,EAA0C;AACxCF,YAAMC,IAAN,GAAaD,MAAMC,IAAN,CAAWE,MAAxB;AACD;;AAEDJ,QAAIR,GAAJ,IAAWS,KAAX;AACA,WAAOD,GAAP;AACD,GATM,EASJJ,MATI,CAAP;AAUD,CAbM;;AAeA,MAAMS,0CAAiBlB,SAAS;AACrC,QAAMS,SAAS,uCAAgBT,KAAhB,CAAf;AACA,QAAMU,KAAKX,cAAcC,KAAd,CAAX;;AAEA,SAAO,EAAE,CAACU,EAAD,GAAMD,OAAOC,EAAP,CAAR,EAAP;AACD,CALM;;AAOA,MAAMS,oCAAc,CAACnB,KAAD,EAAQoB,UAAR,KAAuB;AAChD,QAAMf,MAAMN,cAAcC,KAAd,CAAZ;AACA,QAAMqB,WAAWtB,cAAcqB,UAAd,CAAjB;;AAEA,MAAIC,aAAahB,GAAjB,EAAsB;AACpB,WAAO,CACLA,GADK,EAELgB,QAFK,EAGL,yBAAW,GAAE,yBAASD,WAAWE,IAApB,CAA0B,IAAGD,QAAS,EAAnD,CAHK,CAAP;AAKD;;AAED,SAAO,CAAChB,GAAD,EAAMgB,QAAN,EAAgBA,QAAhB,CAAP;AACD,CAbM;;AAeA,MAAME,sCAAe,CAACvB,KAAD,EAAQoB,UAAR,KAAuB;AACjD,QAAM,CAACf,GAAD,EAAMgB,QAAN,EAAgBG,iBAAhB,IAAqCL,YAAYnB,KAAZ,EAAmBoB,UAAnB,CAA3C;AACA,QAAMX,SAAS,uCAAgBT,KAAhB,CAAf;AACA,QAAMyB,cAAc,uCAAgBL,UAAhB,CAApB;;AAEA,SAAO;AACL,KAACf,GAAD,GAAOI,OAAOJ,GAAP,CADF;AAEL,KAACmB,iBAAD,GAAqBC,YAAYJ,QAAZ;AAFhB,GAAP;AAID,CATM","file":"arguments.js","sourcesContent":["import { attributeFields } from '@falcon-client/graphql-sequelize';\nimport { singular } from 'pluralize';\nimport { GraphQLNonNull } from 'graphql';\nimport camelcase from 'camelcase';\n\nexport const getPkFieldKey = model => Object.keys(model.attributes).find(key => {\n  const attr = model.attributes[key];\n  return attr.primaryKey;\n});\n\nexport const makeCreateArgs = model => {\n  const fields = attributeFields(model);\n  const pk = getPkFieldKey(model);\n\n  delete fields[pk];\n\n  return fields;\n};\n\nexport const makeUpdateArgs = model => {\n  const fields = attributeFields(model);\n\n  return Object.keys(fields).reduce((acc, key) => {\n    const field = fields[key];\n\n    if (field.type instanceof GraphQLNonNull) {\n      field.type = field.type.ofType;\n    }\n\n    acc[key] = field;\n    return acc;\n  }, fields);\n};\n\nexport const makeDeleteArgs = model => {\n  const fields = attributeFields(model);\n  const pk = getPkFieldKey(model);\n\n  return { [pk]: fields[pk] };\n};\n\nexport const getPolyKeys = (model, otherModel) => {\n  const key = getPkFieldKey(model);\n  const otherKey = getPkFieldKey(otherModel);\n\n  if (otherKey === key) {\n    return [\n      key,\n      otherKey,\n      camelcase(`${singular(otherModel.name)}_${otherKey}`),\n    ];\n  }\n\n  return [key, otherKey, otherKey];\n};\n\nexport const makePolyArgs = (model, otherModel) => {\n  const [key, otherKey, otherKeyFormatted] = getPolyKeys(model, otherModel);\n  const fields = attributeFields(model);\n  const otherFields = attributeFields(otherModel);\n\n  return {\n    [key]: fields[key],\n    [otherKeyFormatted]: otherFields[otherKey],\n  };\n};\n"]}