{"version":3,"sources":["../../src/builders/associations.js"],"names":["FK_SUFFIX_REGEX","formJoinTableAssociations","a","b","aKey","bKey","table","from","to","type","options","through","foreignKey","timestamps","joinTableFromForeignKeys","foreignKeys","joinTableAssociations","info","length","split","map","plural","keys","column","name","filter","key","indexOf","tableAssociations","associations","fkColumns","forEach","otherTable","push","pk","includes","test","root","replace"],"mappings":"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","file":"associations.js","sourcesContent":["import { plural, singular } from 'pluralize';\nimport { formatFieldName } from '../utils';\n\nconst FK_SUFFIX_REGEX = /(_id|Id)$/;\n\nconst formJoinTableAssociations = (a, b, aKey, bKey, table) => {\n  return [\n    {\n      from: a,\n      to: b,\n      type: 'belongsToMany',\n      options: {\n        through: table,\n        foreignKey: aKey,\n        timestamps: false,\n      },\n    },\n    {\n      from: b,\n      to: a,\n      type: 'belongsToMany',\n      options: {\n        through: table,\n        foreignKey: bKey,\n        timestamps: false,\n      },\n    },\n  ];\n};\n\nconst joinTableFromForeignKeys = (table, foreignKeys) => {\n  const [{ table: a, from: aKey }, { table: b, from: bKey }] = foreignKeys;\n  return formJoinTableAssociations(a, b, aKey, bKey, table);\n};\n\nexport const joinTableAssociations = (table, info, foreignKeys) => {\n  if (foreignKeys.length) {\n    return joinTableFromForeignKeys(table, foreignKeys);\n  }\n\n  const [a, b] = table.split('_').map(plural);\n  const keys = info.map(column => column.name);\n  const [aKey] = keys.filter(key => key.indexOf(singular(a)) === 0);\n  const [bKey] = keys.filter(key => key.indexOf(singular(b)) === 0);\n\n  return formJoinTableAssociations(a, b, aKey, bKey, table);\n};\n\nexport const tableAssociations = (table, info, foreignKeys) => {\n  const associations = [];\n  const fkColumns = foreignKeys.map(({ from }) => from);\n\n  foreignKeys.forEach(({ table: otherTable, from }) => {\n    associations.push({\n      from: otherTable,\n      to: table,\n      type: 'hasMany',\n      options: {\n        foreignKey: formatFieldName(from),\n      },\n    });\n\n    associations.push({\n      from: table,\n      to: otherTable,\n      type: 'belongsTo',\n      options: {\n        foreignKey: formatFieldName(from),\n      },\n    });\n  });\n\n  info\n    .filter(({ name, pk }) => !pk && !fkColumns.includes(name))\n    .filter(({ name }) => {\n      return FK_SUFFIX_REGEX.test(name);\n    })\n    .forEach(column => {\n      const root = column.name.replace(FK_SUFFIX_REGEX, '');\n\n      associations.push({\n        from: plural(root),\n        to: table,\n        type: 'hasMany',\n        options: {\n          foreignKey: column.name,\n        },\n      });\n\n      associations.push({\n        from: table,\n        to: plural(root),\n        type: 'belongsTo',\n        options: {\n          foreignKey: column.name,\n        },\n      });\n    });\n\n  return associations;\n};\n"]}