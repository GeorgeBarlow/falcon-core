{"version":3,"sources":["../../src/utils/index.js"],"names":["isJoinTable","tableName","tableList","sides","split","map","plural","length","one","two","includes","formatTypeName","name","pascalCase","string","cameled","substr","toUpperCase","findModelKey","key","models","pluralKey","singularKey","Error","formatFieldName","camelcase"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEO,MAAMA,oCAAc,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACnD,QAAMC,QAAQF,UAAUG,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,CAAyBC,iBAAzB,CAAd;;AAEA,MAAIH,MAAMI,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,QAAM,CAACC,GAAD,EAAMC,GAAN,IAAaN,KAAnB;;AAEA,SAAOD,UAAUQ,QAAV,CAAmBF,GAAnB,KAA2BN,UAAUQ,QAAV,CAAmBD,GAAnB,CAAlC;AACD,CAVM;;AAYA,MAAME,0CAAiBC,QAAQ;AACpC,SAAOC,WAAW,yBAASD,IAAT,CAAX,CAAP;AACD,CAFM;;AAIA,MAAMC,kCAAaC,UAAU;AAClC,QAAMC,UAAU,yBAAUD,MAAV,CAAhB;AACA,SAAOC,QAAQC,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,WAArB,KAAqCF,QAAQC,MAAR,CAAe,CAAf,CAA5C;AACD,CAHM;;AAKA,MAAME,sCAAe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC3C,MAAIA,OAAOD,GAAP,CAAJ,EAAiB;AACf,WAAOA,GAAP;AACD;;AAED,QAAME,YAAY,uBAAOF,GAAP,CAAlB;;AAEA,MAAIC,OAAOC,SAAP,CAAJ,EAAuB;AACrB,WAAOA,SAAP;AACD;;AAED,QAAMC,cAAc,yBAASH,GAAT,CAApB;;AAEA,MAAIC,OAAOE,WAAP,CAAJ,EAAyB;AACvB,WAAOA,WAAP;AACD;;AAED,QAAMC,MAAO,cAAaJ,GAAI,iBAAxB,CAAN;AACD,CAlBM;;AAoBA,MAAMK,4CAAkBC,mBAAxB","file":"index.js","sourcesContent":["import { plural, singular } from 'pluralize';\nimport camelcase from 'camelcase';\n\nexport const isJoinTable = (tableName, tableList) => {\n  const sides = tableName.split('_').map(plural);\n\n  if (sides.length !== 2) {\n    return false;\n  }\n\n  const [one, two] = sides;\n\n  return tableList.includes(one) && tableList.includes(two);\n};\n\nexport const formatTypeName = name => {\n  return pascalCase(singular(name));\n};\n\nexport const pascalCase = string => {\n  const cameled = camelcase(string);\n  return cameled.substr(0, 1).toUpperCase() + cameled.substr(1);\n};\n\nexport const findModelKey = (key, models) => {\n  if (models[key]) {\n    return key;\n  }\n\n  const pluralKey = plural(key);\n\n  if (models[pluralKey]) {\n    return pluralKey;\n  }\n\n  const singularKey = singular(key);\n\n  if (models[singularKey]) {\n    return singularKey;\n  }\n\n  throw Error(`Model with ${key} does not exist`);\n};\n\nexport const formatFieldName = camelcase;\n"]}