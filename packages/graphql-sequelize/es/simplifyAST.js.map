{"version":3,"sources":["../src/simplifyAST.js"],"names":["deepMerge","a","b","Object","keys","forEach","key","indexOf","fields","hasFragments","info","fragments","length","isFragment","ast","name","value","kind","simplifyObjectValue","objectValue","reduce","memo","field","parseInt","parseFloat","simplifyValue","values","map","variableValues","simplifyAST","parent","selections","selectionSet","Array","isArray","simpleAST","args","selection","alias","arguments","arg","defineProperty","enumerable"],"mappings":"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","file":"simplifyAST.js","sourcesContent":["function deepMerge(a, b) {\n  Object.keys(b).forEach(function (key) {\n    if (['fields', 'args'].indexOf(key) !== -1) return;\n\n    if (a[key] && b[key] && typeof a[key] === 'object' && typeof b[key] === 'object') {\n      a[key] = deepMerge(a[key], b[key]);\n    } else {\n      a[key] = b[key];\n    }\n  });\n\n  if (a.fields && b.fields) {\n    a.fields = deepMerge(a.fields, b.fields);\n  } else if (a.fields || b.fields) {\n    a.fields = a.fields || b.fields;\n  }\n\n  return a;\n}\n\nfunction hasFragments(info) {\n  return info.fragments && Object.keys(info.fragments).length > 0;\n}\n\nfunction isFragment(info, ast) {\n  return hasFragments(info) &&\n    ast.name &&\n    info.fragments[ast.name.value] &&\n    ast.kind !== 'FragmentDefinition';\n}\n\nfunction simplifyObjectValue(objectValue) {\n  return objectValue.fields.reduce((memo, field) => {\n    memo[field.name.value] =\n      field.value.kind === 'IntValue' ? parseInt( field.value.value, 10 ) :\n      field.value.kind === 'FloatValue' ? parseFloat( field.value.value ) :\n      field.value.kind === 'ObjectValue' ? simplifyObjectValue( field.value ) :\n        field.value.value;\n\n    return memo;\n  }, {});\n}\n\nfunction simplifyValue(value, info) {\n  if (value.values) {\n    return value.values.map(value => simplifyValue(value, info));\n  }\n  if ('value' in value) {\n    return value.value;\n  }\n  if (value.kind === 'ObjectValue') {\n    return simplifyObjectValue(value);\n  }\n  if (value.name && info.variableValues) {\n    return info.variableValues[value.name.value];\n  }\n}\n\nexport default function simplifyAST(ast, info, parent) {\n  var selections;\n  info = info || {};\n\n  if (ast.selectionSet) selections = ast.selectionSet.selections;\n  if (Array.isArray(ast)) {\n    let simpleAST = {};\n    ast.forEach(ast => {\n      simpleAST = deepMerge(\n        simpleAST, simplifyAST(ast, info)\n      );\n    });\n\n    return simpleAST;\n  }\n\n  if (isFragment(info, ast)) {\n    return simplifyAST(info.fragments[ast.name.value], info);\n  }\n\n  if (!selections) return {\n    fields: {},\n    args: {}\n  };\n\n  return selections.reduce(function (simpleAST, selection) {\n    if (selection.kind === 'FragmentSpread' || selection.kind === 'InlineFragment') {\n      simpleAST = deepMerge(\n        simpleAST, simplifyAST(selection, info)\n      );\n      return simpleAST;\n    }\n\n    var name = selection.name.value\n      , alias = selection.alias && selection.alias.value\n      , key = alias || name;\n\n    simpleAST.fields[key] = simpleAST.fields[key] || {};\n    simpleAST.fields[key] = deepMerge(\n      simpleAST.fields[key], simplifyAST(selection, info, simpleAST.fields[key])\n    );\n\n    if (alias) {\n      simpleAST.fields[key].key = name;\n    }\n\n    simpleAST.fields[key].args = selection.arguments.reduce(function (args, arg) {\n      args[arg.name.value] = simplifyValue(arg.value, info);\n      return args;\n    }, {});\n\n    if (parent) {\n      Object.defineProperty(simpleAST.fields[key], '$parent', { value: parent, enumerable: false });\n    }\n\n    return simpleAST;\n  }, {\n    fields: {},\n    args: {}\n  });\n};\n"]}