{"version":3,"sources":["../../src/types/jsonType.js"],"names":["GraphQLScalarType","GraphQLInt","GraphQLFloat","GraphQLBoolean","GraphQLString","_","Kind","astToJson","INT","ast","parseLiteral","FLOAT","BOOLEAN","STRING","ENUM","String","value","LIST","values","map","astItem","JSONType","OBJECT","obj","fields","forEach","field","name","VARIABLE","property","description","serialize","parseValue","JSON","parse","parser","kind","call"],"mappings":";;AAAA,SACEA,iBADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,cAJF,EAKEC,aALF,QAMO,SANP;AAOA,OAAOC,CAAP,MAAc,QAAd;;AAEA,SAASC,IAAT,QAAqB,kBAArB;;AAGA,MAAMC,YAAY;AAChB,GAACD,KAAKE,GAAN,EAAWC,GAAX,EAAgB;AACd,WAAOR,WAAWS,YAAX,CAAwBD,GAAxB,CAAP;AACD,GAHe;AAIhB,GAACH,KAAKK,KAAN,EAAaF,GAAb,EAAkB;AAChB,WAAOP,aAAaQ,YAAb,CAA0BD,GAA1B,CAAP;AACD,GANe;AAOhB,GAACH,KAAKM,OAAN,EAAeH,GAAf,EAAoB;AAClB,WAAON,eAAeO,YAAf,CAA4BD,GAA5B,CAAP;AACD,GATe;AAUhB,GAACH,KAAKO,MAAN,EAAcJ,GAAd,EAAmB;AACjB,WAAOL,cAAcM,YAAd,CAA2BD,GAA3B,CAAP;AACD,GAZe;AAahB,GAACH,KAAKQ,IAAN,EAAYL,GAAZ,EAAiB;AACf,WAAOM,OAAON,IAAIO,KAAX,CAAP;AACD,GAfe;AAgBhB,GAACV,KAAKW,IAAN,EAAYR,GAAZ,EAAiB;AACf,WAAOA,IAAIS,MAAJ,CAAWC,GAAX,CAAeC,WAAW;AAC/B,aAAOC,SAASX,YAAT,CAAsBU,OAAtB,CAAP;AACD,KAFM,CAAP;AAGD,GApBe;AAqBhB,GAACd,KAAKgB,MAAN,EAAcb,GAAd,EAAmB;AACjB,QAAIc,MAAM,EAAV;AACAd,QAAIe,MAAJ,CAAWC,OAAX,CAAmBC,SAAS;AAC1BH,UAAIG,MAAMC,IAAN,CAAWX,KAAf,IAAwBK,SAASX,YAAT,CAAsBgB,MAAMV,KAA5B,CAAxB;AACD,KAFD;AAGA,WAAOO,GAAP;AACD,GA3Be;AA4BhB,GAACjB,KAAKsB,QAAN,EAAgBnB,GAAhB,EAAqB;AACnB;;;;;;;AAOA,WAAOJ,EAAEwB,QAAF,CAAWpB,IAAIkB,IAAJ,CAASX,KAApB,CAAP;AACD;AArCe,CAAlB;;AAyCA,MAAMK,WAAW,IAAIrB,iBAAJ,CAAsB;AACrC2B,QAAM,eAD+B;AAErCG,eAAa,uDAFwB;AAGrCC,aAAWf,SAASA,KAHiB;AAIrCgB,cAAYhB,SAAS,OAAOA,KAAP,KAAiB,QAAjB,GAA4BiB,KAAKC,KAAL,CAAWlB,KAAX,CAA5B,GAAgDA,KAJhC;AAKrCN,gBAAcD,OAAO;AACnB,UAAM0B,SAAS5B,UAAUE,IAAI2B,IAAd,CAAf;AACA,WAAOD,SAASA,OAAOE,IAAP,CAAY,KAAZ,EAAkB5B,GAAlB,CAAT,GAAkC,IAAzC;AACD;AARoC,CAAtB,CAAjB;;AAYA,eAAeY,QAAf","file":"jsonType.js","sourcesContent":["import {\n  GraphQLScalarType,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLString\n} from 'graphql';\nimport _ from 'lodash';\n\nimport { Kind } from 'graphql/language';\n\n\nconst astToJson = {\n  [Kind.INT](ast) {\n    return GraphQLInt.parseLiteral(ast);\n  },\n  [Kind.FLOAT](ast) {\n    return GraphQLFloat.parseLiteral(ast);\n  },\n  [Kind.BOOLEAN](ast) {\n    return GraphQLBoolean.parseLiteral(ast);\n  },\n  [Kind.STRING](ast) {\n    return GraphQLString.parseLiteral(ast);\n  },\n  [Kind.ENUM](ast) {\n    return String(ast.value);\n  },\n  [Kind.LIST](ast) {\n    return ast.values.map(astItem => {\n      return JSONType.parseLiteral(astItem);\n    });\n  },\n  [Kind.OBJECT](ast) {\n    let obj = {};\n    ast.fields.forEach(field => {\n      obj[field.name.value] = JSONType.parseLiteral(field.value);\n    });\n    return obj;\n  },\n  [Kind.VARIABLE](ast) {\n    /*\n    this way converted query variables would be easily\n    converted to actual values in the resolver.js by just\n    passing the query variables object in to function below.\n    We can`t convert them just in here because query variables\n    are not accessible from GraphQLScalarType's parseLiteral method\n    */\n    return _.property(ast.name.value);\n  }\n};\n\n\nconst JSONType = new GraphQLScalarType({\n  name: 'SequelizeJSON',\n  description: 'The `JSON` scalar type represents raw JSON as values.',\n  serialize: value => value,\n  parseValue: value => typeof value === 'string' ? JSON.parse(value) : value,\n  parseLiteral: ast => {\n    const parser = astToJson[ast.kind];\n    return parser ? parser.call(this, ast) : null;\n  }\n});\n\n\nexport default JSONType;\n"]}