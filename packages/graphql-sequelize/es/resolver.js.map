{"version":3,"sources":["../src/resolver.js"],"names":["GraphQLList","_","argsToFindOptions","isConnection","handleConnection","nodeType","invariant","Promise","whereQueryVarsToValues","o","vals","forEach","v","k","resolverFactory","targetMaybeThunk","options","contextToOptions","assign","include","undefined","before","after","result","source","args","context","info","target","findAndCountAll","resolve","isModel","getTableName","isAssociation","associationType","association","model","type","returnType","list","targetAttributes","Object","keys","rawAttributes","findOptions","ofType","attributes","logging","graphqlContext","each","as","key","then","where","isEmpty","variableValues","order","primaryKeyAttribute","get","accessors"],"mappings":"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","file":"resolver.js","sourcesContent":["import { GraphQLList } from 'graphql';\nimport _ from 'lodash';\nimport argsToFindOptions from './argsToFindOptions';\nimport { isConnection, handleConnection, nodeType } from './relay';\nimport invariant from 'assert';\nimport Promise from 'bluebird';\n\nfunction whereQueryVarsToValues(o, vals) {\n  _.forEach(o, (v, k) => {\n    if (typeof v === 'function') {\n      o[k] = o[k](vals);\n    } else if (v && typeof v === 'object') {\n      whereQueryVarsToValues(v, vals);\n    }\n  });\n}\n\nfunction resolverFactory(targetMaybeThunk, options = {}) {\n  const contextToOptions = _.assign({}, resolverFactory.contextToOptions, options.contextToOptions);\n\n  invariant(options.include === undefined, 'Include support has been removed in favor of dataloader batching');\n  if (options.before === undefined) options.before = (options) => options;\n  if (options.after === undefined) options.after = (result) => result;\n  if (options.handleConnection === undefined) options.handleConnection = true;\n\n  return async function (source, args, context, info) {\n    let target = typeof targetMaybeThunk === 'function' && targetMaybeThunk.findAndCountAll === undefined ?\n                 await Promise.resolve(targetMaybeThunk(source, args, context, info)) : targetMaybeThunk\n      , isModel = !!target.getTableName\n      , isAssociation = !!target.associationType\n      , association = isAssociation && target\n      , model = isAssociation && target.target || isModel && target\n      , type = info.returnType\n      , list = options.list || type instanceof GraphQLList;\n\n    let targetAttributes = Object.keys(model.rawAttributes)\n      , findOptions = argsToFindOptions(args, targetAttributes);\n\n    info = {\n      ...info,\n      type: type,\n      source: source,\n      target: target\n    };\n\n    context = context || {};\n\n    if (isConnection(type)) {\n      type = nodeType(type);\n    }\n\n    type = type.ofType || type;\n\n    findOptions.attributes = targetAttributes;\n    findOptions.logging = findOptions.logging || context.logging;\n    findOptions.graphqlContext = context;\n\n    _.each(contextToOptions, (as, key) => {\n      findOptions[as] = context[key];\n    });\n\n    return Promise.resolve(options.before(findOptions, args, context, info)).then(function (findOptions) {\n      if (args.where && !_.isEmpty(info.variableValues)) {\n        whereQueryVarsToValues(args.where, info.variableValues);\n        whereQueryVarsToValues(findOptions.where, info.variableValues);\n      }\n\n      if (list && !findOptions.order) {\n        findOptions.order = [[model.primaryKeyAttribute, 'ASC']];\n      }\n\n      if (association) {\n        if (source.get(association.as) !== undefined) {\n          // The user did a manual include\n          const result = source.get(association.as);\n          if (options.handleConnection && isConnection(info.returnType)) {\n            return handleConnection(result, args);\n          }\n\n          return result;\n        } else {\n          return source[association.accessors.get](findOptions).then(function (result) {\n            if (options.handleConnection && isConnection(info.returnType)) {\n              return handleConnection(result, args);\n            }\n            return result;\n          });\n        }\n      }\n\n      return model[list ? 'findAll' : 'findOne'](findOptions);\n    }).then(function (result) {\n      return options.after(result, args, context, info);\n    });\n  };\n}\n\nresolverFactory.contextToOptions = {};\n\nexport default resolverFactory;\n"]}