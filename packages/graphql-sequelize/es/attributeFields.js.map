{"version":3,"sources":["../src/attributeFields.js"],"names":["typeMapper","GraphQLNonNull","GraphQLEnumType","globalIdField","Model","options","cache","result","Object","keys","rawAttributes","reduce","memo","key","exclude","Array","isArray","indexOf","only","attribute","type","map","toGraphQL","sequelize","constructor","typeName","name","allowNull","primaryKey","commentToDescription","comment","description","globalId","id","instance","primaryKeyAttribute"],"mappings":"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","file":"attributeFields.js","sourcesContent":["import * as typeMapper from './typeMapper';\nimport { GraphQLNonNull, GraphQLEnumType } from 'graphql';\nimport { globalIdField } from 'graphql-relay';\n\nexport default function (Model, options = {}) {\n  var cache = options.cache || {};\n  var result = Object.keys(Model.rawAttributes).reduce(function (memo, key) {\n    if (options.exclude) {\n      if (typeof options.exclude === 'function' && options.exclude(key)) return memo;\n      if (Array.isArray(options.exclude) && ~options.exclude.indexOf(key)) return memo;\n    }\n    if (options.only) {\n      if (typeof options.only === 'function' && !options.only(key)) return memo;\n      if (Array.isArray(options.only) && !~options.only.indexOf(key)) return memo;\n    }\n\n    var attribute = Model.rawAttributes[key]\n      , type = attribute.type;\n\n\n    if (options.map) {\n      if (typeof options.map === 'function') {\n        key = options.map(key) || key;\n      } else {\n        key = options.map[key] || key;\n      }\n    }\n\n    memo[key] = {\n      type: typeMapper.toGraphQL(type, Model.sequelize.constructor)\n    };\n\n    if (memo[key].type instanceof GraphQLEnumType ) {\n      var typeName = `${Model.name}${key}EnumType`;\n      /*\n      Cache enum types to prevent duplicate type name error\n      when calling attributeFields multiple times on the same model\n      */\n      if (cache[typeName]) {\n        memo[key].type = cache[typeName];\n      } else {\n        memo[key].type.name = typeName;\n        cache[typeName] = memo[key].type;\n      }\n\n    }\n\n    if (!options.allowNull) {\n      if (attribute.allowNull === false || attribute.primaryKey === true) {\n        memo[key].type = new GraphQLNonNull(memo[key].type);\n      }\n    }\n\n    if (options.commentToDescription) {\n      if (typeof attribute.comment === 'string') {\n        memo[key].description = attribute.comment;\n      }\n    }\n\n    return memo;\n  }, {});\n\n  if (options.globalId) {\n    result.id = globalIdField(Model.name, instance => instance[Model.primaryKeyAttribute]);\n  }\n\n  return result;\n};\n"]}