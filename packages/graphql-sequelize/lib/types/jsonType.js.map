{"version":3,"sources":["../../src/types/jsonType.js"],"names":["astToJson","Kind","INT","ast","GraphQLInt","parseLiteral","FLOAT","GraphQLFloat","BOOLEAN","GraphQLBoolean","STRING","GraphQLString","ENUM","String","value","LIST","values","map","astItem","JSONType","OBJECT","obj","fields","forEach","field","name","VARIABLE","_","property","GraphQLScalarType","description","serialize","parseValue","JSON","parse","parser","kind","call"],"mappings":";;;;;;AAAA;;AAOA;;;;AAEA;;;;AAGA,MAAMA,YAAY;AAChB,GAACC,eAAKC,GAAN,EAAWC,GAAX,EAAgB;AACd,WAAOC,oBAAWC,YAAX,CAAwBF,GAAxB,CAAP;AACD,GAHe;AAIhB,GAACF,eAAKK,KAAN,EAAaH,GAAb,EAAkB;AAChB,WAAOI,sBAAaF,YAAb,CAA0BF,GAA1B,CAAP;AACD,GANe;AAOhB,GAACF,eAAKO,OAAN,EAAeL,GAAf,EAAoB;AAClB,WAAOM,wBAAeJ,YAAf,CAA4BF,GAA5B,CAAP;AACD,GATe;AAUhB,GAACF,eAAKS,MAAN,EAAcP,GAAd,EAAmB;AACjB,WAAOQ,uBAAcN,YAAd,CAA2BF,GAA3B,CAAP;AACD,GAZe;AAahB,GAACF,eAAKW,IAAN,EAAYT,GAAZ,EAAiB;AACf,WAAOU,OAAOV,IAAIW,KAAX,CAAP;AACD,GAfe;AAgBhB,GAACb,eAAKc,IAAN,EAAYZ,GAAZ,EAAiB;AACf,WAAOA,IAAIa,MAAJ,CAAWC,GAAX,CAAeC,WAAW;AAC/B,aAAOC,SAASd,YAAT,CAAsBa,OAAtB,CAAP;AACD,KAFM,CAAP;AAGD,GApBe;AAqBhB,GAACjB,eAAKmB,MAAN,EAAcjB,GAAd,EAAmB;AACjB,QAAIkB,MAAM,EAAV;AACAlB,QAAImB,MAAJ,CAAWC,OAAX,CAAmBC,SAAS;AAC1BH,UAAIG,MAAMC,IAAN,CAAWX,KAAf,IAAwBK,SAASd,YAAT,CAAsBmB,MAAMV,KAA5B,CAAxB;AACD,KAFD;AAGA,WAAOO,GAAP;AACD,GA3Be;AA4BhB,GAACpB,eAAKyB,QAAN,EAAgBvB,GAAhB,EAAqB;AACnB;;;;;;;AAOA,WAAOwB,iBAAEC,QAAF,CAAWzB,IAAIsB,IAAJ,CAASX,KAApB,CAAP;AACD;AArCe,CAAlB;;AAyCA,MAAMK,WAAW,IAAIU,0BAAJ,CAAsB;AACrCJ,QAAM,eAD+B;AAErCK,eAAa,uDAFwB;AAGrCC,aAAWjB,SAASA,KAHiB;AAIrCkB,cAAYlB,SAAS,OAAOA,KAAP,KAAiB,QAAjB,GAA4BmB,KAAKC,KAAL,CAAWpB,KAAX,CAA5B,GAAgDA,KAJhC;AAKrCT,gBAAcF,OAAO;AACnB,UAAMgC,SAASnC,UAAUG,IAAIiC,IAAd,CAAf;AACA,WAAOD,SAASA,OAAOE,IAAP,YAAkBlC,GAAlB,CAAT,GAAkC,IAAzC;AACD;AARoC,CAAtB,CAAjB;;kBAYegB,Q","file":"jsonType.js","sourcesContent":["import {\n  GraphQLScalarType,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLString\n} from 'graphql';\nimport _ from 'lodash';\n\nimport { Kind } from 'graphql/language';\n\n\nconst astToJson = {\n  [Kind.INT](ast) {\n    return GraphQLInt.parseLiteral(ast);\n  },\n  [Kind.FLOAT](ast) {\n    return GraphQLFloat.parseLiteral(ast);\n  },\n  [Kind.BOOLEAN](ast) {\n    return GraphQLBoolean.parseLiteral(ast);\n  },\n  [Kind.STRING](ast) {\n    return GraphQLString.parseLiteral(ast);\n  },\n  [Kind.ENUM](ast) {\n    return String(ast.value);\n  },\n  [Kind.LIST](ast) {\n    return ast.values.map(astItem => {\n      return JSONType.parseLiteral(astItem);\n    });\n  },\n  [Kind.OBJECT](ast) {\n    let obj = {};\n    ast.fields.forEach(field => {\n      obj[field.name.value] = JSONType.parseLiteral(field.value);\n    });\n    return obj;\n  },\n  [Kind.VARIABLE](ast) {\n    /*\n    this way converted query variables would be easily\n    converted to actual values in the resolver.js by just\n    passing the query variables object in to function below.\n    We can`t convert them just in here because query variables\n    are not accessible from GraphQLScalarType's parseLiteral method\n    */\n    return _.property(ast.name.value);\n  }\n};\n\n\nconst JSONType = new GraphQLScalarType({\n  name: 'SequelizeJSON',\n  description: 'The `JSON` scalar type represents raw JSON as values.',\n  serialize: value => value,\n  parseValue: value => typeof value === 'string' ? JSON.parse(value) : value,\n  parseLiteral: ast => {\n    const parser = astToJson[ast.kind];\n    return parser ? parser.call(this, ast) : null;\n  }\n});\n\n\nexport default JSONType;\n"]}