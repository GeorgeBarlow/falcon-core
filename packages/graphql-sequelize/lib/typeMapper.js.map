{"version":3,"sources":["../src/typeMapper.js"],"names":["mapType","toGraphQL","customTypeMapper","mapFunc","sequelizeType","sequelizeTypes","result","BOOLEAN","ENUM","FLOAT","CHAR","DECIMAL","DOUBLE","INTEGER","BIGINT","STRING","TEXT","UUID","DATE","DATEONLY","TIME","ARRAY","VIRTUAL","JSON","specialCharsMap","Map","GraphQLBoolean","GraphQLFloat","GraphQLInt","GraphQLString","elementType","type","GraphQLList","GraphQLEnumType","name","values","mapKeys","sanitizeEnumValue","mapValues","v","value","returnType","JSONType","console","log","key","_graphql","Error","toSql","trim","replace","_","p","get","split","map","i","upperFirst","join"],"mappings":"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","file":"typeMapper.js","sourcesContent":["import {\n   GraphQLInt,\n   GraphQLString,\n   GraphQLBoolean,\n   GraphQLFloat,\n   GraphQLEnumType,\n   GraphQLList\n } from 'graphql';\nimport JSONType from './types/jsonType';\nimport _ from 'lodash';\n\nlet customTypeMapper;\n/**\n * A function to set a custom mapping of types\n * @param {Function} mapFunc\n */\nexport function mapType(mapFunc) {\n  customTypeMapper = mapFunc;\n}\n\n\n/**\n * Checks the type of the sequelize data type and\n * returns the corresponding type in GraphQL\n * @param  {Object} sequelizeType\n * @param  {Object} sequelizeTypes\n * @return {Function} GraphQL type declaration\n */\nexport function toGraphQL(sequelizeType, sequelizeTypes) {\n\n  // did the user supply a mapping function?\n  // use their mapping, if it returns truthy\n  // else use our defaults\n  if (customTypeMapper) {\n    let result = customTypeMapper(sequelizeType);\n    if (result) return result;\n  }\n\n  const {\n    BOOLEAN,\n    ENUM,\n    FLOAT,\n    CHAR,\n    DECIMAL,\n    DOUBLE,\n    INTEGER,\n    BIGINT,\n    STRING,\n    TEXT,\n    UUID,\n    DATE,\n    DATEONLY,\n    TIME,\n    ARRAY,\n    VIRTUAL,\n    JSON\n  } = sequelizeTypes;\n\n  // Map of special characters\n  const specialCharsMap = new Map([\n    ['¼', 'frac14'],\n    ['½', 'frac12'],\n    ['¾', 'frac34']\n  ]);\n\n  if (sequelizeType instanceof BOOLEAN) return GraphQLBoolean;\n\n  if (sequelizeType instanceof FLOAT ||\n      sequelizeType instanceof DOUBLE) return GraphQLFloat;\n\n  if (sequelizeType instanceof INTEGER) {\n    return GraphQLInt;\n  }\n\n  if (sequelizeType instanceof CHAR ||\n      sequelizeType instanceof STRING ||\n      sequelizeType instanceof TEXT ||\n      sequelizeType instanceof UUID ||\n      sequelizeType instanceof DATE ||\n      sequelizeType instanceof DATEONLY ||\n      sequelizeType instanceof TIME ||\n      sequelizeType instanceof BIGINT ||\n      sequelizeType instanceof DECIMAL) {\n    return GraphQLString;\n  }\n\n  if (sequelizeType instanceof ARRAY) {\n    let elementType = toGraphQL(sequelizeType.type, sequelizeTypes);\n    return new GraphQLList(elementType);\n  }\n\n  if (sequelizeType instanceof ENUM) {\n    return new GraphQLEnumType({\n      name: 'tempEnumName',\n      values: _(sequelizeType.values)\n        .mapKeys(sanitizeEnumValue)\n        .mapValues(v => ({value: v}))\n        .value()\n    });\n  }\n\n  if (sequelizeType instanceof VIRTUAL) {\n    let returnType = sequelizeType.returnType\n        ? toGraphQL(sequelizeType.returnType, sequelizeTypes)\n        : GraphQLString;\n    return returnType;\n  }\n\n  if (sequelizeType instanceof JSON) {\n    return JSONType;\n  }\n\n  console.log(sequelizeType)\n\n  if (sequelizeType.key === 'BLOB') {\n    return _graphql.GraphQLString\n  }\n\n  throw new Error(`Unable to convert ${sequelizeType.key || sequelizeType.toSql()} to a GraphQL type`);\n\n  function sanitizeEnumValue(value) {\n    return value\n      .trim()\n      .replace(/([^_a-zA-Z0-9])/g, (_, p) => specialCharsMap.get(p) || ' ')\n      .split(' ')\n      .map((v, i) => i ? _.upperFirst(v) : v)\n      .join('')\n      .replace(/(^\\d)/, '_$1');\n  }\n}\n"]}