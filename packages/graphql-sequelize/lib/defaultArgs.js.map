{"version":3,"sources":["../src/defaultArgs.js"],"names":["Model","result","key","primaryKeyAttribute","attribute","rawAttributes","type","typeMapper","toGraphQL","sequelize","constructor","where","JSONType","description"],"mappings":";;;;;;kBAGe,UAAUA,KAAV,EAAiB;AAC9B,MAAIC,SAAS,EAAb;AAAA,MACIC,MAAMF,MAAMG,mBADhB;AAAA,MAEIC,YAAYJ,MAAMK,aAAN,CAAoBH,GAApB,CAFhB;AAAA,MAGII,IAHJ;;AAKA,MAAIJ,OAAOE,SAAX,EAAsB;AACpBE,WAAOC,WAAWC,SAAX,CAAqBJ,UAAUE,IAA/B,EAAqCN,MAAMS,SAAN,CAAgBC,WAArD,CAAP;AACAT,WAAOC,GAAP,IAAc;AACZI,YAAMA;AADM,KAAd;AAGD;;AAED;AACAL,SAAOU,KAAP,GAAe;AACbL,UAAMM,kBADO;AAEbC,iBAAa;AAFA,GAAf;;AAKA,SAAOZ,MAAP;AACD,C;;AAvBD;;IAAYM,U;;AACZ;;;;;;;;AAsBC","file":"defaultArgs.js","sourcesContent":["import * as typeMapper from './typeMapper';\nimport JSONType from './types/jsonType';\n\nexport default function (Model) {\n  var result = {}\n    , key = Model.primaryKeyAttribute\n    , attribute = Model.rawAttributes[key]\n    , type;\n\n  if (key && attribute) {\n    type = typeMapper.toGraphQL(attribute.type, Model.sequelize.constructor);\n    result[key] = {\n      type: type\n    };\n  }\n\n  // add where\n  result.where = {\n    type: JSONType,\n    description: 'A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/'\n  };\n\n  return result;\n};\n"]}