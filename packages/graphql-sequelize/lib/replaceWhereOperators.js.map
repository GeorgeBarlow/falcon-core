{"version":3,"sources":["../src/replaceWhereOperators.js"],"names":["replaceWhereOperators","replaceKeyDeep","obj","keyMap","Object","keys","reduce","memo","key","targetKey","Array","isArray","forEach","val","idx","prototype","toString","call","where","and","or","gt","gte","lt","lte","ne","between","notBetween","in","notIn","notLike","iLike","notILike","like","overlap","contains","contained","any","col"],"mappings":";;;;;QAqCgBA,qB,GAAAA,qB;AArChB;;;;;;AAMA,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqC;AACnC,SAAOC,OAAOC,IAAP,CAAYH,GAAZ,EAAiBI,MAAjB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAc;;AAE3C;AACA,QAAIC,YAAYN,OAAOK,GAAP,IAAcL,OAAOK,GAAP,CAAd,GAA4BA,GAA5C;;AAEA;AACAD,SAAKE,SAAL,IAAkBP,IAAIM,GAAJ,CAAlB;;AAEA;AACA,QAAIE,MAAMC,OAAN,CAAcJ,KAAKE,SAAL,CAAd,CAAJ,EAAoC;AAClCF,WAAKE,SAAL,EAAgBG,OAAhB,CAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,YAAIV,OAAOW,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAA5C,EAA+D;AAC7DN,eAAKE,SAAL,EAAgBK,GAAhB,IAAuBb,eAAeY,GAAf,EAAoBV,MAApB,CAAvB;AACD;AACF,OAJD;AAKD,KAND,MAMO,IAAIC,OAAOW,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BV,KAAKE,SAAL,CAA/B,MAAoD,iBAAxD,EAA2E;AAChF;AACAF,WAAKE,SAAL,IAAkBR,eAAeM,KAAKE,SAAL,CAAf,EAAgCN,MAAhC,CAAlB;AACD;;AAED;AACA,WAAOI,IAAP;AACD,GAtBM,EAsBJ,EAtBI,CAAP;AAuBD;;AAED;;;;;AAKO,SAASP,qBAAT,CAA+BkB,KAA/B,EAAsC;AAC3C,SAAOjB,eAAeiB,KAAf,EAAsB;AAC3BC,SAAK,MADsB;AAE3BC,QAAI,KAFuB;AAG3BC,QAAI,KAHuB;AAI3BC,SAAK,MAJsB;AAK3BC,QAAI,KALuB;AAM3BC,SAAK,MANsB;AAO3BC,QAAI,KAPuB;AAQ3BC,aAAS,UARkB;AAS3BC,gBAAY,aATe;AAU3BC,QAAI,KAVuB;AAW3BC,WAAO,QAXoB;AAY3BC,aAAS,UAZkB;AAa3BC,WAAO,QAboB;AAc3BC,cAAU,WAdiB;AAe3BC,UAAM,OAfqB;AAgB3BC,aAAS,UAhBkB;AAiB3BC,cAAU,WAjBiB;AAkB3BC,eAAW,YAlBgB;AAmB3BC,SAAK,MAnBsB;AAoB3BC,SAAK;AApBsB,GAAtB,CAAP;AAsBD","file":"replaceWhereOperators.js","sourcesContent":["/**\n * Replace a key deeply in an object\n * @param obj\n * @param keyMap\n * @returns {Object}\n */\nfunction replaceKeyDeep(obj, keyMap) {\n  return Object.keys(obj).reduce((memo, key)=> {\n\n    // determine which key we are going to use\n    let targetKey = keyMap[key] ? keyMap[key] : key;\n\n    // assign the new value\n    memo[targetKey] = obj[key];\n\n    // recurse if an array\n    if (Array.isArray(memo[targetKey])) {\n      memo[targetKey].forEach((val, idx) => {\n        if (Object.prototype.toString.call(val) === '[object Object]') {\n          memo[targetKey][idx] = replaceKeyDeep(val, keyMap);\n        }\n      });\n    } else if (Object.prototype.toString.call(memo[targetKey]) === '[object Object]') {\n      // recurse if Object\n      memo[targetKey] = replaceKeyDeep(memo[targetKey], keyMap);\n    }\n\n    // return the modified object\n    return memo;\n  }, {});\n}\n\n/**\n * Replace the where arguments object and return the sequelize compatible version.\n * @param where arguments object in GraphQL Safe format meaning no leading \"$\" chars.\n * @returns {Object}\n */\nexport function replaceWhereOperators(where) {\n  return replaceKeyDeep(where, {\n    and: '$and',\n    or: '$or',\n    gt: '$gt',\n    gte: '$gte',\n    lt: '$lt',\n    lte: '$lte',\n    ne: '$ne',\n    between: '$between',\n    notBetween: '$notBetween',\n    in: '$in',\n    notIn: '$notIn',\n    notLike: '$notLike',\n    iLike: '$iLike',\n    notILike: '$notILike',\n    like: '$like',\n    overlap: '$overlap',\n    contains: '$contains',\n    contained: '$contained',\n    any: '$any',\n    col: '$col'\n  });\n}\n"]}