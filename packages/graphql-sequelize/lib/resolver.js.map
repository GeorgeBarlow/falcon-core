{"version":3,"sources":["../src/resolver.js"],"names":["whereQueryVarsToValues","o","vals","_","forEach","v","k","resolverFactory","targetMaybeThunk","options","contextToOptions","assign","include","undefined","before","after","result","handleConnection","source","args","context","info","target","findAndCountAll","Promise","resolve","isModel","getTableName","isAssociation","associationType","association","model","type","returnType","list","GraphQLList","targetAttributes","Object","keys","rawAttributes","findOptions","ofType","attributes","logging","graphqlContext","each","as","key","then","where","isEmpty","variableValues","order","primaryKeyAttribute","get","accessors"],"mappings":"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","file":"resolver.js","sourcesContent":["import { GraphQLList } from 'graphql';\nimport _ from 'lodash';\nimport argsToFindOptions from './argsToFindOptions';\nimport { isConnection, handleConnection, nodeType } from './relay';\nimport invariant from 'assert';\nimport Promise from 'bluebird';\n\nfunction whereQueryVarsToValues(o, vals) {\n  _.forEach(o, (v, k) => {\n    if (typeof v === 'function') {\n      o[k] = o[k](vals);\n    } else if (v && typeof v === 'object') {\n      whereQueryVarsToValues(v, vals);\n    }\n  });\n}\n\nfunction resolverFactory(targetMaybeThunk, options = {}) {\n  const contextToOptions = _.assign({}, resolverFactory.contextToOptions, options.contextToOptions);\n\n  invariant(options.include === undefined, 'Include support has been removed in favor of dataloader batching');\n  if (options.before === undefined) options.before = (options) => options;\n  if (options.after === undefined) options.after = (result) => result;\n  if (options.handleConnection === undefined) options.handleConnection = true;\n\n  return async function (source, args, context, info) {\n    let target = typeof targetMaybeThunk === 'function' && targetMaybeThunk.findAndCountAll === undefined ?\n                 await Promise.resolve(targetMaybeThunk(source, args, context, info)) : targetMaybeThunk\n      , isModel = !!target.getTableName\n      , isAssociation = !!target.associationType\n      , association = isAssociation && target\n      , model = isAssociation && target.target || isModel && target\n      , type = info.returnType\n      , list = options.list || type instanceof GraphQLList;\n\n    let targetAttributes = Object.keys(model.rawAttributes)\n      , findOptions = argsToFindOptions(args, targetAttributes);\n\n    info = {\n      ...info,\n      type: type,\n      source: source,\n      target: target\n    };\n\n    context = context || {};\n\n    if (isConnection(type)) {\n      type = nodeType(type);\n    }\n\n    type = type.ofType || type;\n\n    findOptions.attributes = targetAttributes;\n    findOptions.logging = findOptions.logging || context.logging;\n    findOptions.graphqlContext = context;\n\n    _.each(contextToOptions, (as, key) => {\n      findOptions[as] = context[key];\n    });\n\n    return Promise.resolve(options.before(findOptions, args, context, info)).then(function (findOptions) {\n      if (args.where && !_.isEmpty(info.variableValues)) {\n        whereQueryVarsToValues(args.where, info.variableValues);\n        whereQueryVarsToValues(findOptions.where, info.variableValues);\n      }\n\n      if (list && !findOptions.order) {\n        findOptions.order = [[model.primaryKeyAttribute, 'ASC']];\n      }\n\n      if (association) {\n        if (source.get(association.as) !== undefined) {\n          // The user did a manual include\n          const result = source.get(association.as);\n          if (options.handleConnection && isConnection(info.returnType)) {\n            return handleConnection(result, args);\n          }\n\n          return result;\n        } else {\n          return source[association.accessors.get](findOptions).then(function (result) {\n            if (options.handleConnection && isConnection(info.returnType)) {\n              return handleConnection(result, args);\n            }\n            return result;\n          });\n        }\n      }\n\n      return model[list ? 'findAll' : 'findOne'](findOptions);\n    }).then(function (result) {\n      return options.after(result, args, context, info);\n    });\n  };\n}\n\nresolverFactory.contextToOptions = {};\n\nexport default resolverFactory;\n"]}