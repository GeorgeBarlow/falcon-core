{"version":3,"sources":["../../src/core/InlineBlock.js"],"names":["tokenTypes","INLINE_MAX_LENGTH","InlineBlock","constructor","level","beginIfPossible","tokens","index","isInlineBlock","end","isActive","length","i","token","value","type","OPEN_PAREN","CLOSE_PAREN","isForbiddenToken","RESERVED_TOPLEVEL","RESERVED_NEWLINE","COMMENT","BLOCK_COMMENT"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,oBAAoB,EAA1B;;AAEA;;;;;;;AAOA,eAAe,MAAMC,WAAN,CAAkB;AAC/BC,gBAAc;AACZ,SAAKC,KAAL,GAAa,CAAb;AACD;;AAED;;;;;;AAMAC,kBAAgBC,MAAhB,EAAwBC,KAAxB,EAA+B;AAC7B,QAAI,KAAKH,KAAL,KAAe,CAAf,IAAoB,KAAKI,aAAL,CAAmBF,MAAnB,EAA2BC,KAA3B,CAAxB,EAA2D;AACzD,WAAKH,KAAL,GAAa,CAAb;AACD,KAFD,MAEO,IAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;AACzB,WAAKA,KAAL;AACD,KAFM,MAEA;AACL,WAAKA,KAAL,GAAa,CAAb;AACD;AACF;;AAED;;;;AAIAK,QAAM;AACJ,SAAKL,KAAL;AACD;;AAED;;;;AAIAM,aAAW;AACT,WAAO,KAAKN,KAAL,GAAa,CAApB;AACD;;AAED;AACA;AACAI,gBAAcF,MAAd,EAAsBC,KAAtB,EAA6B;AAC3B,QAAII,SAAS,CAAb;AACA,QAAIP,QAAQ,CAAZ;;AAEA,SAAK,IAAIQ,IAAIL,KAAb,EAAoBK,IAAIN,OAAOK,MAA/B,EAAuCC,GAAvC,EAA4C;AAC1C,YAAMC,QAAQP,OAAOM,CAAP,CAAd;AACAD,gBAAUE,MAAMC,KAAN,CAAYH,MAAtB;;AAEA;AACA,UAAIA,SAASV,iBAAb,EAAgC;AAC9B,eAAO,KAAP;AACD;;AAED,UAAIY,MAAME,IAAN,KAAef,WAAWgB,UAA9B,EAA0C;AACxCZ;AACD,OAFD,MAEO,IAAIS,MAAME,IAAN,KAAef,WAAWiB,WAA9B,EAA2C;AAChDb;AACA,YAAIA,UAAU,CAAd,EAAiB;AACf,iBAAO,IAAP;AACD;AACF;;AAED,UAAI,KAAKc,gBAAL,CAAsBL,KAAtB,CAAJ,EAAkC;AAChC,eAAO,KAAP;AACD;AACF;AACD,WAAO,KAAP;AACD;;AAED;AACA;AACAK,mBAAiB,EAAEH,IAAF,EAAQD,KAAR,EAAjB,EAAkC;AAChC,WACEC,SAASf,WAAWmB,iBAApB,IACAJ,SAASf,WAAWoB,gBADpB,IAEAL,SAASf,WAAWqB,OAFpB,IAGAN,SAASf,WAAWsB,aAHpB,IAIAR,UAAU,GALZ;AAOD;AA9E8B","file":"InlineBlock.js","sourcesContent":["import tokenTypes from './tokenTypes';\n\nconst INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor() {\n    this.level = 0;\n  }\n\n  /**\n   * Begins inline block when lookahead through upcoming tokens determines\n   * that the block would be smaller than INLINE_MAX_LENGTH.\n   * @param  {Object[]} tokens Array of all tokens\n   * @param  {Number} index Current token position\n   */\n  beginIfPossible(tokens, index) {\n    if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n      this.level = 1;\n    } else if (this.level > 0) {\n      this.level++;\n    } else {\n      this.level = 0;\n    }\n  }\n\n  /**\n   * Finishes current inline block.\n   * There might be several nested ones.\n   */\n  end() {\n    this.level--;\n  }\n\n  /**\n   * True when inside an inline block\n   * @return {Boolean}\n   */\n  isActive() {\n    return this.level > 0;\n  }\n\n  // Check if this should be an inline parentheses block\n  // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n  isInlineBlock(tokens, index) {\n    let length = 0;\n    let level = 0;\n\n    for (let i = index; i < tokens.length; i++) {\n      const token = tokens[i];\n      length += token.value.length;\n\n      // Overran max length\n      if (length > INLINE_MAX_LENGTH) {\n        return false;\n      }\n\n      if (token.type === tokenTypes.OPEN_PAREN) {\n        level++;\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        level--;\n        if (level === 0) {\n          return true;\n        }\n      }\n\n      if (this.isForbiddenToken(token)) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  isForbiddenToken({ type, value }) {\n    return (\n      type === tokenTypes.RESERVED_TOPLEVEL ||\n      type === tokenTypes.RESERVED_NEWLINE ||\n      type === tokenTypes.COMMENT ||\n      type === tokenTypes.BLOCK_COMMENT ||\n      value === ';'\n    );\n  }\n}\n"]}