{"version":3,"sources":["../../src/core/Indentation.js"],"names":["repeat","last","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","constructor","indent","indentTypes","getIndent","length","increaseToplevel","push","increaseBlockLevel","decreaseTopLevel","pop","decreaseBlockLevel","type"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,wBAAwB,WAA9B;AACA,MAAMC,0BAA0B,aAAhC;;AAEA;;;;;;;;AAQA,eAAe,MAAMC,WAAN,CAAkB;AAC/B;;;AAGAC,cAAYC,MAAZ,EAAoB;AAClB,SAAKA,MAAL,GAAcA,UAAU,IAAxB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD;;AAED;;;;AAIAC,cAAY;AACV,WAAOR,OAAO,KAAKM,MAAZ,EAAoB,KAAKC,WAAL,CAAiBE,MAArC,CAAP;AACD;;AAED;;;AAGAC,qBAAmB;AACjB,SAAKH,WAAL,CAAiBI,IAAjB,CAAsBT,qBAAtB;AACD;;AAED;;;AAGAU,uBAAqB;AACnB,SAAKL,WAAL,CAAiBI,IAAjB,CAAsBR,uBAAtB;AACD;;AAED;;;;AAIAU,qBAAmB;AACjB,QAAIZ,KAAK,KAAKM,WAAV,MAA2BL,qBAA/B,EAAsD;AACpD,WAAKK,WAAL,CAAiBO,GAAjB;AACD;AACF;;AAED;;;;;AAKAC,uBAAqB;AACnB,WAAO,KAAKR,WAAL,CAAiBE,MAAjB,GAA0B,CAAjC,EAAoC;AAClC,YAAMO,OAAO,KAAKT,WAAL,CAAiBO,GAAjB,EAAb;AACA,UAAIE,SAASd,qBAAb,EAAoC;AAClC;AACD;AACF;AACF;AArD8B","file":"Indentation.js","sourcesContent":["import repeat from 'lodash/repeat';\nimport last from 'lodash/last';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\n */\nexport default class Indentation {\n  /**\n   * @param {String} indent Indent value, default is \"  \" (2 spaces)\n   */\n  constructor(indent) {\n    this.indent = indent || '  ';\n    this.indentTypes = [];\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {String}\n   */\n  getIndent() {\n    return repeat(this.indent, this.indentTypes.length);\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseToplevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n}\n"]}