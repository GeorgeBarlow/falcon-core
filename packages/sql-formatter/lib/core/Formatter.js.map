{"version":3,"sources":["../../src/core/Formatter.js"],"names":["Formatter","constructor","cfg","tokenizer","indentation","Indentation","indent","inlineBlock","InlineBlock","params","Params","previousReservedWord","format","query","tokens","tokenize","formattedQuery","getFormattedQueryFromTokens","trim","forEach","token","index","type","tokenTypes","WHITESPACE","LINE_COMMENT","formatLineComment","BLOCK_COMMENT","formatBlockComment","RESERVED_TOPLEVEL","formatToplevelReservedWord","RESERVED_NEWLINE","formatNewlineReservedWord","RESERVED","formatWithSpaces","OPEN_PAREN","formatOpeningParentheses","CLOSE_PAREN","formatClosingParentheses","PLACEHOLDER","formatPlaceholder","value","formatComma","formatWithSpaceAfter","formatWithoutSpaces","addNewline","indentComment","comment","replace","getIndent","decreaseTopLevel","increaseToplevel","equalizeWhitespace","string","previousToken","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","get","test"],"mappings":"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","file":"Formatter.js","sourcesContent":["import trimEnd from 'lodash/trimEnd';\nimport tokenTypes from './tokenTypes';\nimport Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\n\nexport default class Formatter {\n  /**\n   * @param {Object} cfg\n   *   @param {Object} cfg.indent\n   *   @param {Object} cfg.params\n   * @param {Tokenizer} tokenizer\n   */\n  constructor(cfg, tokenizer) {\n    this.cfg = cfg || {};\n    this.indentation = new Indentation(this.cfg.indent);\n    this.inlineBlock = new InlineBlock();\n    this.params = new Params(this.cfg.params);\n    this.tokenizer = tokenizer;\n    this.previousReservedWord = {};\n  }\n\n  /**\n   * Formats whitespaces in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n  format(query) {\n    const tokens = this.tokenizer.tokenize(query);\n    const formattedQuery = this.getFormattedQueryFromTokens(tokens);\n\n    return formattedQuery.trim();\n  }\n\n  getFormattedQueryFromTokens(tokens) {\n    let formattedQuery = '';\n\n    tokens.forEach((token, index) => {\n      if (token.type === tokenTypes.WHITESPACE) {\n      } else if (token.type === tokenTypes.LINE_COMMENT) {\n        formattedQuery = this.formatLineComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.BLOCK_COMMENT) {\n        formattedQuery = this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.RESERVED_TOPLEVEL) {\n        formattedQuery = this.formatToplevelReservedWord(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.RESERVED_NEWLINE) {\n        formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.RESERVED) {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.OPEN_PAREN) {\n        formattedQuery = this.formatOpeningParentheses(\n          tokens,\n          index,\n          formattedQuery\n        );\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        formattedQuery = this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.PLACEHOLDER) {\n        formattedQuery = this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === ',') {\n        formattedQuery = this.formatComma(token, formattedQuery);\n      } else if (token.value === ':') {\n        formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === '.' || token.value === ';') {\n        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);\n      } else {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  }\n\n  formatLineComment(token, query) {\n    return this.addNewline(query + token.value);\n  }\n\n  formatBlockComment(token, query) {\n    return this.addNewline(\n      this.addNewline(query) + this.indentComment(token.value)\n    );\n  }\n\n  indentComment(comment) {\n    return comment.replace(/\\n/g, `\\n${this.indentation.getIndent()}`);\n  }\n\n  formatToplevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseToplevel();\n\n    query += this.equalizeWhitespace(token.value);\n    return this.addNewline(query);\n  }\n\n  formatNewlineReservedWord(token, query) {\n    return `${this.addNewline(query) + this.equalizeWhitespace(token.value)} `;\n  }\n\n  // Replace any sequence of whitespace characters with single space\n  equalizeWhitespace(string) {\n    return string.replace(/\\s+/g, ' ');\n  }\n\n  // Opening parentheses increase the block indent level and start a new line\n  formatOpeningParentheses(tokens, index, query) {\n    // Take out the preceding space unless there was whitespace there in the original query or another opening parens\n    const previousToken = tokens[index - 1];\n    if (\n      previousToken &&\n      previousToken.type !== tokenTypes.WHITESPACE &&\n      previousToken.type !== tokenTypes.OPEN_PAREN\n    ) {\n      query = trimEnd(query);\n    }\n    query += tokens[index].value;\n\n    this.inlineBlock.beginIfPossible(tokens, index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  }\n\n  // Closing parentheses decrease the block indent level\n  formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    }\n\n    this.indentation.decreaseBlockLevel();\n    return this.formatWithSpaces(token, this.addNewline(query));\n  }\n\n  formatPlaceholder(token, query) {\n    return `${query + this.params.get(token)} `;\n  }\n\n  // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n  formatComma(token, query) {\n    query = `${trimEnd(query) + token.value} `;\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n      return query;\n    }\n\n    return this.addNewline(query);\n  }\n\n  formatWithSpaceAfter(token, query) {\n    return `${trimEnd(query) + token.value} `;\n  }\n\n  formatWithoutSpaces(token, query) {\n    return trimEnd(query) + token.value;\n  }\n\n  formatWithSpaces(token, query) {\n    return `${query + token.value} `;\n  }\n\n  addNewline(query) {\n    return `${trimEnd(query)}\\n${this.indentation.getIndent()}`;\n  }\n}\n"]}