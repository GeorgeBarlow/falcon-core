{"version":3,"sources":["../src/Config.js"],"names":["filename","utils","getConfigPath","fileExistsResult","fileExists","writeJSONFile","EMPTY_CONFIG","result","readJSONFile","servers","sanitizeServers","prepare","prepareSync","get","getSync","save","data","map","server","srv","id","v4","ssl","undefined","fileExistsSync","writeJSONFileSync","readJSONFileSync"],"mappings":";;;;;;;;;AAwBA;;;;+BAGO,aAAyB;AAC9B,UAAMA,WAAWC,MAAMC,aAAN,EAAjB;AACA,UAAMC,mBAAmB,MAAMF,MAAMG,UAAN,CAAiBJ,QAAjB,CAA/B;AACA,QAAI,CAACG,gBAAL,EAAuB;AACrB,YAAMF,MAAMI,aAAN,CAAoBL,QAApB,EAA8BM,YAA9B,CAAN;AACD;;AAED,UAAMC,SAAS,MAAMN,MAAMO,YAAN,CAAmBR,QAAnB,CAArB;;AAEAO,WAAOE,OAAP,GAAiBC,gBAAgBH,MAAhB,CAAjB;;AAEA,UAAMN,MAAMI,aAAN,CAAoBL,QAApB,EAA8BO,MAA9B,CAAN;;AAEA;AACA;AACA;AACA;AACD,G;;kBAjBqBI,O;;;;;QAmBNC,W,GAAAA,W;QAmBAC,G,GAAAA,G;QAKAC,O,GAAAA,O;QAKAC,I,GAAAA,I;;AA1EhB;;;;AACA;;IAAYd,K;;;;;;;;AAEZ,MAAMK,eAAe,EAAEG,SAAS,EAAX,EAArB;;AAEA,SAASC,eAAT,CAAyBM,IAAzB,EAA+B;AAC7B,SAAOA,KAAKP,OAAL,CAAaQ,GAAb,CAAiBC,UAAU;AAChC,UAAMC,mBAAWD,MAAX,CAAN;;AAEA;AACA,QAAI,EAAE,QAAQC,GAAV,CAAJ,EAAoB;AAClBA,UAAIC,EAAJ,GAAS,eAAKC,EAAL,EAAT;AACD;;AAED;AACA,QAAIF,IAAIG,GAAJ,KAAYC,SAAhB,EAA2B;AACzBJ,UAAIG,GAAJ,GAAU,KAAV;AACD;;AAED,WAAOH,GAAP;AACD,GAdM,CAAP;AAeD,CAwBM,SAASP,WAAT,GAAuB;AAC5B,QAAMZ,WAAWC,MAAMC,aAAN,EAAjB;AACA,QAAMC,mBAAmBF,MAAMuB,cAAN,CAAqBxB,QAArB,CAAzB;AACA,MAAI,CAACG,gBAAL,EAAuB;AACrBF,UAAMwB,iBAAN,CAAwBzB,QAAxB,EAAkCM,YAAlC;AACD;;AAED,QAAMC,SAASN,MAAMyB,gBAAN,CAAuB1B,QAAvB,CAAf;;AAEAO,SAAOE,OAAP,GAAiBC,gBAAgBH,MAAhB,CAAjB;;AAEAN,QAAMwB,iBAAN,CAAwBzB,QAAxB,EAAkCO,MAAlC;;AAEA;AACA;AACA;AACA;AACD;;AAEM,SAASM,GAAT,GAAe;AACpB,QAAMb,WAAWC,MAAMC,aAAN,EAAjB;AACA,SAAOD,MAAMO,YAAN,CAAmBR,QAAnB,CAAP;AACD;;AAEM,SAASc,OAAT,GAAmB;AACxB,QAAMd,WAAWC,MAAMC,aAAN,EAAjB;AACA,SAAOD,MAAMyB,gBAAN,CAAuB1B,QAAvB,CAAP;AACD;;AAEM,SAASe,IAAT,CAAcC,IAAd,EAA4B;AACjC,QAAMhB,WAAWC,MAAMC,aAAN,EAAjB;AACA,SAAOD,MAAMI,aAAN,CAAoBL,QAApB,EAA8BgB,IAA9B,CAAP;AACD","file":"Config.js","sourcesContent":["// @flow\nimport uuid from 'uuid';\nimport * as utils from './Utils';\n\nconst EMPTY_CONFIG = { servers: [] };\n\nfunction sanitizeServers(data) {\n  return data.servers.map(server => {\n    const srv = { ...server };\n\n    // ensure all server has an unique id\n    if (!('id' in srv)) {\n      srv.id = uuid.v4();\n    }\n\n    // ensure all servers has the new fileld SSL\n    if (srv.ssl === undefined) {\n      srv.ssl = false;\n    }\n\n    return srv;\n  });\n}\n\n/**\n * Prepare the configuration file sanitizing and validating all fields availbale\n */\nexport async function prepare() {\n  const filename = utils.getConfigPath();\n  const fileExistsResult = await utils.fileExists(filename);\n  if (!fileExistsResult) {\n    await utils.writeJSONFile(filename, EMPTY_CONFIG);\n  }\n\n  const result = await utils.readJSONFile(filename);\n\n  result.servers = sanitizeServers(result);\n\n  await utils.writeJSONFile(filename, result);\n\n  // @TODO: Validate whole configuration file\n  // if (!configValidate(result)) {\n  //   throw new Error('Invalid ~/.sqlectron.json file format');\n  // }\n}\n\nexport function prepareSync() {\n  const filename = utils.getConfigPath();\n  const fileExistsResult = utils.fileExistsSync(filename);\n  if (!fileExistsResult) {\n    utils.writeJSONFileSync(filename, EMPTY_CONFIG);\n  }\n\n  const result = utils.readJSONFileSync(filename);\n\n  result.servers = sanitizeServers(result);\n\n  utils.writeJSONFileSync(filename, result);\n\n  // TODO: Validate whole configuration file\n  // if (!configValidate(result)) {\n  //   throw new Error('Invalid ~/.sqlectron.json file format');\n  // }\n}\n\nexport function get() {\n  const filename = utils.getConfigPath();\n  return utils.readJSONFile(filename);\n}\n\nexport function getSync() {\n  const filename = utils.getConfigPath();\n  return utils.readJSONFileSync(filename);\n}\n\nexport function save(data: Object) {\n  const filename = utils.getConfigPath();\n  return utils.writeJSONFile(filename, data);\n}\n"]}