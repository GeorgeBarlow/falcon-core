{"version":3,"sources":["../../../src/db/provider_clients/MysqlProviderFactory.js"],"names":["server","database","databaseConfig","configDatabase","logger","debug","connection","pool","createPool","provider","MysqlProvider","driverExecuteQuery","query","MysqlProviderFactory","constructor","mysqlErrors","EMPTY_QUERY","CONNECTION_LOST","disconnect","end","runWithConnection","run","rejected","Promise","resolve","reject","rejectErr","err","getConnection","errPool","_connection","on","error","release","getRealError","_protocol","_fatalError","queryArgs","runQuery","params","data","fields","code","listTables","sql","then","res","listViews","listRoutines","map","routineName","row","routine_name","routineType","routine_type","listTableColumns","table","columnName","column_name","dataType","data_type","listTableTriggers","trigger_name","listTableIndexes","Key_name","listSchemas","getTableReferences","referenced_table_name","getTableColumns","constraintName","constraint_name","referencedTable","keyType","key_type","getTableValues","tableName","getQuerySelectTop","limit","wrapIdentifier","filterDatabase","item","databaseField","value","only","length","executeQuery","queryText","commands","identifyCommands","type","isMultipleQuery","parseRowQueryResult","_","index","pid","canceling","cancelable","CANCELED_BY_USER","sqlectronError","execute","connectionClient","dataPid","race","wait","discard","cancel","Error","listDatabases","filter","Database","getTableCreateScript","getViewCreateScript","view","getRoutineCreateScript","routine","toUpperCase","replace","getSchema","schema","truncateAllTables","truncateAllQuery","table_name","join","command","isSelect","Array","isArray","rows","rowCount","undefined","affectedRows","config","host","port","user","password","multipleStatements","dateStrings","supportBigNumbers","bigNumberStrings","sshTunnel","localHost","localPort","ssl","rejectUnauthorized"],"mappings":"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","file":"MysqlProviderFactory.js","sourcesContent":["/* eslint-disable */\n// @TODO: Add flow annotation\nimport mysql from 'mysql';\nimport { identify } from 'sql-query-identifier';\nimport BaseProvider from './BaseProvider';\nimport createLogger from '../../Logger';\nimport { createCancelablePromise } from '../../Utils';\nimport errors from '../../Errors';\nimport type {\n  ProviderInterface,\n  FactoryType,\n  serverType,\n  databaseType,\n  queryArgsType\n} from './ProviderInterface';\n\ntype driverExecuteResponse = {\n  data: Array<Object>\n};\n\n/**\n * @TODO: Why are we using this.connection.connection? Seems hard to follow\n *        Refactor to use just this.connection instead\n *\n *        Add typings for the responses of driverExecuteQuery(). Each response\n *        is different\n */\nclass MysqlProvider extends BaseProvider implements ProviderInterface {\n  mysqlErrors = {\n    EMPTY_QUERY: 'ER_EMPTY_QUERY',\n    CONNECTION_LOST: 'PROTOCOL_CONNECTION_LOST'\n  };\n\n  connection: {\n    connection: {\n      pool: {},\n      query: (\n        query: string,\n        args: Array<string>,\n        cb: (\n          err?: Error,\n          data: Array<{\n            column_name: string,\n            data_type: string,\n\n            scheme: string\n          }>,\n          fields: Array<string>\n        ) => void\n      ) => void\n    },\n    pool: {\n      end: () => void,\n      getConnection: (cb: (errPool, connection) => void) => void\n    }\n  };\n\n  constructor(server: serverType, database: databaseType, connection) {\n    super(server, database);\n    this.connection = connection;\n  }\n\n  disconnect() {\n    this.connection.pool.end();\n  }\n\n  async runWithConnection(run) {\n    const { pool } = this.connection;\n    let rejected = false;\n\n    return new Promise((resolve, reject) => {\n      const rejectErr = (err) => {\n        if (!rejected) {\n          rejected = true;\n          reject(err);\n        }\n      };\n\n      return pool.getConnection(async (errPool, _connection) => {\n        if (errPool) {\n          return rejectErr(errPool);\n        }\n\n        _connection.on('error', (error) => {\n          // it will be handled later in the next query execution\n          logger().error('Connection fatal error %j', error);\n        });\n\n        try {\n          resolve(await run(_connection));\n        } catch (err) {\n          rejectErr(err);\n        } finally {\n          _connection.release();\n        }\n\n        return _connection;\n      });\n    });\n  }\n\n  getRealError(err: Error) {\n    /* eslint no-underscore-dangle: 0 */\n    return this.connection &&\n      this.connection._protocol &&\n      this.connection._protocol._fatalError\n      ? this.connection._protocol._fatalError\n      : err;\n  }\n\n  driverExecuteQuery(queryArgs: queryArgsType): Promise<driverExecuteResponse> {\n    const runQuery = connection =>\n      new Promise((resolve, reject) => {\n        connection.query(\n          queryArgs.query,\n          queryArgs.params,\n          (err?: Error, data?: Array<{ scheme: string }>, fields) => {\n            if (err && err.code === this.mysqlErrors.EMPTY_QUERY) {\n              return resolve({});\n            }\n            if (err) return reject(this.getRealError(connection, err));\n\n            return resolve({ data, fields });\n          }\n        );\n      });\n\n    return this.connection.connection\n      ? runQuery(this.connection.connection)\n      : this.runWithConnection(runQuery);\n  }\n\n  async listTables() {\n    const sql = `\n      SELECT table_name as name\n      FROM information_schema.tables\n      WHERE table_schema = database()\n      AND table_type NOT LIKE '%VIEW%'\n      ORDER BY table_name\n    `;\n\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  listViews() {\n    const sql = `\n      SELECT table_name as name\n      FROM information_schema.views\n      WHERE table_schema = database()\n      ORDER BY table_name\n    `;\n\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  async listRoutines() {\n    const sql = `\n      SELECT routine_name, routine_type\n      FROM information_schema.routines\n      WHERE routine_schema = database()\n      ORDER BY routine_name\n    `;\n\n    type res = {\n      data: Array<{\n        routine_type: string,\n        routine_name: string\n      }>\n    };\n\n    const { data }: res = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => ({\n      routineName: row.routine_name,\n      routineType: row.routine_type\n    }));\n  }\n\n  async listTableColumns(table: string) {\n    const sql = `\n      SELECT column_name, data_type\n      FROM information_schema.columns\n      WHERE table_schema = database()\n      AND table_name = ?\n    `;\n    const params = [table];\n\n    type res = {\n      data: Array<{\n        column_name: string,\n        data_type: string\n      }>\n    };\n\n    const { data }: res = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.map(row => ({\n      columnName: row.column_name,\n      dataType: row.data_type\n    }));\n  }\n\n  async listTableTriggers(table: string) {\n    const sql = `\n      SELECT trigger_name\n      FROM information_schema.triggers\n      WHERE event_object_schema = database()\n      AND event_object_table = ?\n    `;\n    const params = [table];\n    const { data } = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.map(row => row.trigger_name);\n  }\n\n  async listTableIndexes(database: string, table: string) {\n    const sql = 'SHOW INDEX FROM ?? FROM ??';\n    const params = [table, database];\n    const { data } = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.map(row => row.Key_name);\n  }\n\n  listSchemas() {\n    return Promise.resolve([]);\n  }\n\n  async getTableReferences(table: string) {\n    const sql = `\n      SELECT referenced_table_name\n      FROM information_schema.key_column_usage\n      WHERE referenced_table_name IS NOT NULL\n      AND table_schema = database()\n      AND table_name = ?\n    `;\n    const params = [table];\n    const { data } = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.map(row => row.referenced_table_name);\n  }\n\n  async getTableColumns(database: string, table: string) {\n    const sql = `\n      SELECT constraint_name, column_name, referenced_table_name,\n        CASE WHEN (referenced_table_name IS NOT NULL) THEN 'FOREIGN'\n        ELSE constraint_name\n        END as key_type\n      FROM information_schema.key_column_usage\n      WHERE table_schema = database()\n      AND table_name = ?\n      AND ((referenced_table_name IS NOT NULL) OR constraint_name LIKE '%PRIMARY%')\n    `;\n    const params = [table];\n    const { data } = await this.driverExecuteQuery({ query: sql, params });\n\n    return data.map(row => ({\n      constraintName: `${row.constraint_name} KEY`,\n      columnName: row.column_name,\n      referencedTable: row.referenced_table_name,\n      keyType: `${row.key_type} KEY`\n    }));\n  }\n\n  async getTableValues(tableName: string) {\n    const sql = `\n      SELECT * FROM ${tableName};\n    `;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n    return data;\n  }\n\n  getQuerySelectTop(table: string, limit: number) {\n    return `SELECT * FROM ${this.wrapIdentifier(table)} LIMIT ${limit}`;\n  }\n\n  filterDatabase(item, { database } = {}, databaseField) {\n    if (!database) {\n      return true;\n    }\n\n    const value = item[databaseField];\n    if (typeof database === 'string') {\n      return database === value;\n    }\n\n    const { only } = database;\n\n    return !(only && only.length);\n  }\n\n  async executeQuery(queryText: string) {\n    const { fields, data } = await this.driverExecuteQuery({\n      query: queryText\n    });\n    if (!data) {\n      return [];\n    }\n\n    const commands = this.identifyCommands(queryText).map(item => item.type);\n\n    if (!this.isMultipleQuery(fields)) {\n      return [this.parseRowQueryResult(data, fields, commands[0])];\n    }\n\n    return data.map((_, index) =>\n      this.parseRowQueryResult(data[index], fields[index], commands[index]));\n  }\n\n  query(queryText: string) {\n    let pid = null;\n    let canceling = false;\n    const cancelable = createCancelablePromise({\n      ...errors.CANCELED_BY_USER,\n      sqlectronError: 'CANCELED_BY_USER'\n    });\n\n    return {\n      execute() {\n        return this.runWithConnection(async (connection) => {\n          const connectionClient = { connection };\n          const {\n            data: dataPid\n          } = await this.driverExecuteQuery(connectionClient, {\n            query: 'SELECT connection_id() AS pid'\n          });\n\n          pid = dataPid[0].pid;\n\n          try {\n            const data = await Promise.race([\n              cancelable.wait(),\n              this.executeQuery(connectionClient, queryText)\n            ]);\n\n            pid = null;\n\n            return data;\n          } catch (err) {\n            if (canceling && err.code === this.mysqlErrors.CONNECTION_LOST) {\n              canceling = false;\n              err.sqlectronError = 'CANCELED_BY_USER';\n            }\n\n            throw err;\n          } finally {\n            cancelable.discard();\n          }\n        });\n      },\n\n      async cancel() {\n        if (!pid) {\n          throw new Error('Query not ready to be canceled');\n        }\n\n        canceling = true;\n\n        try {\n          await this.driverExecuteQuery({\n            query: `kill ${pid};`\n          });\n          cancelable.cancel();\n        } catch (err) {\n          canceling = false;\n          throw new Error(err);\n        }\n      }\n    };\n  }\n\n  async listDatabases(filter) {\n    const sql = 'show databases';\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data\n      .filter(item => this.filterDatabase(item, filter, 'Database'))\n      .map(row => row.Database);\n  }\n\n  async getTableCreateScript(table: string) {\n    const sql = `SHOW CREATE TABLE ${table}`;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n    return data.map(row => row['Create Table']);\n  }\n\n  async getViewCreateScript(view) {\n    const sql = `SHOW CREATE VIEW ${view}`;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n    return data.map(row => row['Create View']);\n  }\n\n  async getRoutineCreateScript(routine, type: string) {\n    const sql = `SHOW CREATE ${type.toUpperCase()} ${routine}`;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n    return data.map(row => row[`Create ${type}`]);\n  }\n\n  wrapIdentifier(value) {\n    return value !== '*' ? `\\`${value.replace(/`/g, '``')}\\`` : '*';\n  }\n\n  async getSchema(): Promise<string> {\n    const sql = \"SELECT database() AS 'schema'\";\n    const { data } = await this.driverExecuteQuery({ query: sql });\n    return data[0].schema;\n  }\n\n  truncateAllTables() {\n    return this.runWithConnection(async () => {\n      const schema = await this.getSchema();\n      const sql = `\n        SELECT table_name\n        FROM information_schema.tables\n        WHERE table_schema = '${schema}'\n        AND table_type NOT LIKE '%VIEW%'\n      `;\n\n      const { data } = await this.driverExecuteQuery({ query: sql });\n\n      const truncateAllQuery = data\n        .map(row => `\n          SET FOREIGN_KEY_CHECKS = 0;\n          TRUNCATE TABLE ${this.wrapIdentifier(schema)}.${this.wrapIdentifier(row.table_name)};\n          SET FOREIGN_KEY_CHECKS = 1;\n        `)\n        .join('');\n\n      return this.driverExecuteQuery({ query: truncateAllQuery });\n    });\n  }\n\n  parseRowQueryResult(data, fields, command) {\n    // Fallback in case the identifier could not reconize the command\n    const isSelect = Array.isArray(data);\n    return {\n      command: command || (isSelect && 'SELECT'),\n      rows: isSelect ? data : [],\n      fields: fields || [],\n      rowCount: isSelect ? (data || []).length : undefined,\n      affectedRows: !isSelect ? data.affectedRows : undefined\n    };\n  }\n\n  isMultipleQuery(fields) {\n    if (!fields) {\n      return false;\n    }\n    if (!fields.length) {\n      return false;\n    }\n    return Array.isArray(fields[0]) || fields[0] === undefined;\n  }\n\n  identifyCommands(queryText) {\n    try {\n      return identify(queryText);\n    } catch (err) {\n      return [];\n    }\n  }\n}\n\nfunction configDatabase(server: serverType, database: databaseType) {\n  const config = {\n    host: server.config.host,\n    port: server.config.port,\n    user: server.config.user,\n    password: server.config.password,\n    database: database.database,\n    multipleStatements: true,\n    dateStrings: true,\n    supportBigNumbers: true,\n    bigNumberStrings: true\n  };\n\n  if (server.sshTunnel) {\n    config.host = server.config.localHost;\n    config.port = server.config.localPort;\n  }\n\n  if (server.config.ssl) {\n    config.ssl = {\n      // It is not the best recommend way to use SSL with node-mysql\n      // https://github.com/felixge/node-mysql#ssl-options\n      // But this way we have compatibility with all clients.\n      rejectUnauthorized: false\n    };\n  }\n\n  return config;\n}\n\nasync function MysqlProviderFactory(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  const databaseConfig = configDatabase(server, database);\n  const logger = createLogger('db:clients:mysql');\n  logger().debug(\n    'create driver client for mysql with config %j',\n    databaseConfig\n  );\n\n  const connection = {\n    pool: mysql.createPool(databaseConfig)\n  };\n  const provider = new MysqlProvider(server, database, connection);\n\n  // light solution to test connection with with the server\n  await provider.driverExecuteQuery({ query: 'select version();' });\n\n  return provider;\n}\n\nexport default MysqlProviderFactory;\n"]}