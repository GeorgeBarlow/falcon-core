{"version":3,"sources":["../../../src/db/provider_clients/BaseProvider.js"],"names":["config","shim","writeFileAsync","promisify","logger","BaseProvider","constructor","server","database","logs","_graphQLServerIsRunning","connect","connecting","Error","connection","disconnect","ssh","sshTunnel","debug","address","port","localHost","localPort","driver","client","Promise","all","handleSSHError","err","error","resolve","reject","on","buildSchemaFilter","schema","schemaField","where","only","ignore","length","push","map","name","join","buildDatabseFilter","databaseField","db","getQuerySelectTop","table","limit","checkIsConnected","limitValue","loadConfigLimit","limitSelect","DEFAULT_LIMIT","getTableSelectScript","columnNames","getTableColumnNames","schemaSelection","resolveSchema","wrap","getTableInsertScript","fill","columns","listTableColumns","column","columnName","getTableUpdateScript","setColumnForm","col","getTableDeleteScript","identifier","Array","isArray","wrapIdentifier","item","get","limitQueryDefaultSelectTop","getJsonString","exportOptions","exporter","dbConfig","checkUnsupported","getSingleTable","tableName","options","json","results","tables","then","tableJsonStrings","getCsvString","jsonString","parsedJson","JSON","parse","data","fields","Object","keys","exportJson","filename","exportCsv","csvString"],"mappings":"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","file":"BaseProvider.js","sourcesContent":["// @flow\nimport util from 'util';\nimport { writeFile } from 'fs';\nimport json2csv from 'json2csv';\nimport SqliteJsonExport from 'sqlite-json-export';\nimport promisify from 'util.promisify';\nimport Tunnel from '../Tunnel';\nimport clients from './';\nimport * as config from '../../Config';\nimport createLogger from '../../Logger';\nimport type { sshTunnelType } from '../Tunnel';\nimport type {\n  serverType,\n  databaseType,\n  exportOptionsType\n} from './ProviderInterface';\n\npromisify.shim();\n\nconst writeFileAsync = util.promisify(writeFile);\n\nconst logger = createLogger('db');\n\n/**\n * Common superclass of all other providers. Contains common functionalities\n */\nexport default class BaseProvider {\n  server: serverType;\n\n  database: databaseType;\n\n  logs: Array<string> = [];\n\n  _graphQLServerIsRunning: bool = false;\n\n  static DEFAULT_LIMIT: number = 1000;\n\n  static limitSelect = null;\n\n  constructor(server: Object, database: Object) {\n    this.server = server;\n    this.database = database;\n  }\n\n  async connect() {\n    if (this.database.connecting) {\n      throw new Error('There is already a connection in progress for this server. Aborting this new request.');\n    }\n\n    if (this.database.connecting) {\n      throw new Error('There is already a connection in progress for this database. Aborting this new request.');\n    }\n\n    try {\n      this.database.connecting = true;\n\n      // terminate any previous lost connection for this DB\n      if (this.database.connection) {\n        this.database.connection.disconnect();\n      }\n\n      // reuse existing tunnel\n      if (this.server.config.ssh && !this.server.sshTunnel) {\n        logger().debug('creating ssh tunnel');\n        this.server.sshTunnel = await Tunnel(this.server.config);\n\n        const { address, port } = this.server.sshTunnel.address();\n        logger().debug(\n          'ssh forwarding through local connection %s:%d',\n          address,\n          port\n        );\n\n        this.server.config.localHost = address;\n        this.server.config.localPort = port;\n      }\n\n      const driver = clients[this.server.config.client];\n\n      const [connection] = await Promise.all([\n        driver(this.server, this.database),\n        this.handleSSHError(this.server.sshTunnel)\n      ]);\n\n      this.database.connection = connection;\n    } catch (err) {\n      logger().error('Connection error %j', err);\n      this.disconnect();\n      throw err;\n    } finally {\n      this.database.connecting = false;\n    }\n  }\n\n  handleSSHError(sshTunnel?: sshTunnelType) {\n    return new Promise((resolve, reject) => {\n      if (!sshTunnel) {\n        return resolve(true);\n      }\n\n      sshTunnel.on('success', resolve);\n      sshTunnel.on('error', (error) => {\n        logger().error('ssh error %j', error);\n        reject(error);\n      });\n\n      return resolve(true);\n    });\n  }\n\n  buildSchemaFilter(\n    { schema }: Object = {},\n    schemaField: string = 'schema_name'\n  ) {\n    if (!schema) {\n      return null;\n    }\n\n    if (typeof schema === 'string') {\n      return `${schemaField} = '${schema}'`;\n    }\n\n    const where = [];\n    const { only, ignore } = schema;\n\n    if (only && only.length) {\n      where.push(`${schemaField} IN (${only.map(name => `'${name}'`).join(',')})`);\n    }\n    if (ignore && ignore.length) {\n      where.push(`${schemaField} NOT IN (${ignore.map(name => `'${name}'`).join(',')})`);\n    }\n\n    return where.join(' AND ');\n  }\n\n  buildDatabseFilter({ database }: Object = {}, databaseField: string) {\n    if (!database) {\n      return null;\n    }\n\n    if (typeof database === 'string') {\n      return `${databaseField} = '${database}'`;\n    }\n\n    const where = [];\n    const { only, ignore } = database;\n\n    if (only && only.length) {\n      where.push(`${databaseField} IN (${only.map(name => `'${name}'`).join(',')})`);\n    }\n\n    if (ignore && ignore.length) {\n      where.push(`${databaseField} NOT IN (${ignore.map(name => `'${name}'`).join(',')})`);\n    }\n\n    return where.join(' AND ');\n  }\n\n  disconnect() {\n    this.database.connecting = false;\n\n    if (this.database.connection) {\n      this.database.connection.disconnect();\n      this.database.connection = null;\n    }\n\n    if (this.server.db[this.database.database]) {\n      delete this.server.db[this.database.database];\n    }\n  }\n\n  async getQuerySelectTop(table: string, limit: number, schema: string) {\n    this.checkIsConnected();\n    let limitValue = limit;\n\n    await this.loadConfigLimit();\n    limitValue = BaseProvider.limitSelect === 'number'\n      ? BaseProvider.limitSelect\n      : BaseProvider.DEFAULT_LIMIT;\n\n    return this.database.connection.getQuerySelectTop(\n      table,\n      limitValue,\n      schema\n    );\n  }\n\n  async getTableSelectScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `SELECT ${this.wrap(columnNames).join(', ')}`,\n      `FROM ${schemaSelection}${this.wrap(table)};`\n    ].join(' ');\n  }\n\n  async getTableInsertScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `INSERT INTO ${schemaSelection}${this.wrap(table)}`,\n      `(${this.wrap(columnNames).join(', ')})\\n`,\n      `VALUES (${columnNames.fill('?').join(', ')});`\n    ].join(' ');\n  }\n\n  async getTableColumnNames(table: string) {\n    this.checkIsConnected();\n    const columns = await this.database.connection.listTableColumns(\n      this.database.database,\n      table\n    );\n    return columns.map(column => column.columnName);\n  }\n\n  async getTableUpdateScript(table: string, schema?: string) {\n    const columnNames = await this.getTableColumnNames(table);\n    const setColumnForm = this.wrap(columnNames)\n      .map(col => `${col}=?`)\n      .join(', ');\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `UPDATE ${schemaSelection}${this.wrap(table)}\\n`,\n      `SET ${setColumnForm}\\n`,\n      'WHERE <condition>;'\n    ].join(' ');\n  }\n\n  getTableDeleteScript(table: string, schema?: string) {\n    const schemaSelection = this.resolveSchema(schema);\n    return [\n      `DELETE FROM ${schemaSelection}${this.wrap(table)}`,\n      'WHERE <condition>;'\n    ].join(' ');\n  }\n\n  resolveSchema(schema?: string) {\n    return schema ? `${this.wrap(schema)}.` : '';\n  }\n\n  wrap(identifier: any) {\n    this.checkIsConnected();\n    return !Array.isArray(identifier)\n      ? this.database.connection.wrapIdentifier(identifier)\n      : identifier.map(item => this.database.connection.wrapIdentifier(item));\n  }\n\n  async loadConfigLimit() {\n    if (BaseProvider.limitSelect === null) {\n      const { limitQueryDefaultSelectTop } = await config.get();\n      BaseProvider.limitSelect = limitQueryDefaultSelectTop;\n    }\n    return BaseProvider.limitSelect;\n  }\n\n  checkIsConnected() {\n    if (this.database.connecting || !this.database.connection) {\n      throw new Error('There is no connection available.');\n    }\n    return true;\n  }\n\n  async getJsonString(exportOptions: exportOptionsType) {\n    const exporter = new SqliteJsonExport(this.connection.dbConfig.database);\n    this.checkUnsupported(exportOptions);\n\n    if ('tables' in exportOptions && 'table' in exportOptions) {\n      throw new Error('You cannot give both \"tables\" and \"table\". Choose one');\n    }\n\n    const getSingleTable = (tableName: string): Promise<string> =>\n      new Promise((resolve, reject) => {\n        const options = {\n          table: tableName\n        };\n        exporter.json(options, (err: Error, json: string) => {\n          if (err) return reject(err);\n          return resolve(json);\n        });\n      });\n\n    // Multiple tables\n    if ('tables' in exportOptions) {\n      const results = await Promise.all(exportOptions.tables.map(tableName => getSingleTable(tableName))).then(tableJsonStrings => tableJsonStrings.join(','));\n\n      return ['[', ...results, ']'].join('');\n    }\n\n    // Single table\n    return getSingleTable(exportOptions.table);\n  }\n\n  async getCsvString(exportOptions: exportOptionsType) {\n    if ('tables' in exportOptions) {\n      throw new Error('Exporting multiple tables to csv is currently not supported');\n    }\n\n    const jsonString = await this.getJsonString(exportOptions);\n    const parsedJson = JSON.parse(jsonString);\n\n    return json2csv({\n      data: parsedJson,\n      fields: Object.keys(parsedJson[0])\n    });\n  }\n\n  async exportJson(filename: string, exportOptions: exportOptionsType) {\n    const jsonString = await this.getJsonString(exportOptions);\n    await writeFileAsync(filename, jsonString);\n    return jsonString;\n  }\n\n  async exportCsv(filename: string, exportOptions: exportOptionsType) {\n    const csvString = await this.getCsvString(exportOptions);\n    await writeFileAsync(filename, csvString);\n    return csvString;\n  }\n}\n"]}