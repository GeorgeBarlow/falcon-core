{"version":3,"sources":["../../src/database/Server.js"],"names":["createServer","serverConfig","Error","some","cli","key","client","server","db","config","host","socketPath","dbName","end","Object","keys","forEach","disconnect","sshTunnel","close","createConnection","database","connection","connecting"],"mappings":";;;;;;;;QA2BgBA,Y,GAAAA,Y;;AA1BhB;;;;AACA;;;;;;AAkBA;;;;;;;;;AAVA;;;AAiBO,SAASA,YAAT,CAAsBC,YAAtB,EAAsD;AAC3D,MAAI,CAACA,YAAL,EAAmB;AACjB,UAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,MAAI,CAAC,0BAAQC,IAAR,CAAaC,OAAOA,IAAIC,GAAJ,KAAYJ,aAAaK,MAA7C,CAAL,EAA2D;AACzD,UAAM,IAAIJ,KAAJ,CAAW,wBAAuBD,aAAaK,MAAO,GAAtD,CAAN;AACD;;AAED,QAAMC,SAAqB;AACzB;;;AAGAC,QAAI,EAJqB;;AAMzBC,yBACKR,YADL;AAEES,YAAMT,aAAaS,IAAb,IAAqBT,aAAaU;AAF1C;AANyB,GAA3B;;AAYA;;;AAGA,SAAO;AACL;;;;AAIAH,OAAGI,MAAH,EAAsC;AACpC,UAAIA,UAAUL,OAAOC,EAArB,EAAyB;AACvB,eAAOD,OAAOC,EAAP,CAAUI,MAAV,CAAP;AACD;AACD,YAAM,IAAIV,KAAJ,CAAU,8CAAV,CAAN;AACD,KAVI;;AAYL;;;AAGAW,UAAM;AACJ;AACAC,aAAOC,IAAP,CAAYR,OAAOC,EAAnB,EAAuBQ,OAAvB,CAA+BX,OAAOE,OAAOC,EAAP,CAAUH,GAAV,EAAeY,UAAf,EAAtC;;AAEA;AACA,UAAIV,OAAOW,SAAX,EAAsB;AACpBX,eAAOW,SAAP,CAAiBC,KAAjB;AACAZ,eAAOW,SAAP,GAAmB,IAAnB;AACD;AACF,KAxBI;;AA0BL;;;;AAIME,oBAAN,CAAuBR,MAAvB,EAAmE;AAAA;AACjE;AACA,YAAIL,OAAOC,EAAP,CAAUI,MAAV,CAAJ,EAAuB;AACrB,iBAAOL,OAAOC,EAAP,CAAUI,MAAV,CAAP;AACD;;AAED,cAAMS,WAAW;AACfA,oBAAUT,MADK;AAEfU,sBAAY,IAFG;AAGfC,sBAAY;AAHG,SAAjB;;AAMA;AACAhB,eAAOC,EAAP,CAAUI,MAAV,IAAoB,MAAM,sBAAOL,MAAP,EAAec,QAAf,CAA1B;AACA;AACA,eAAOd,OAAOC,EAAP,CAAUI,MAAV,CAAP;AAfiE;AAgBlE;AA9CI,GAAP;AAgDD;;kBAEcZ,Y","file":"Server.js","sourcesContent":["// @flow\nimport Client from './Client';\nimport { CLIENTS } from './provider_clients';\nimport type { ProviderInterface, databasesType } from './provider_clients/ProviderInterface';\n\ntype serverType = {\n  db: { [dbName: string]: ProviderInterface },\n  sshTunnel?: { close: () => void }\n};\n\n/**\n * The config passed by the user to the external createServer() API\n */\ntype serverConfigType = {\n  +database: string,\n  +client: databasesType,\n  +socketPath?: string,\n  +host?: string\n};\n\n/**\n * Create and persist a server session. Returns a server object that\n * contains this state.\n *\n * This API is exposed to users. Users pass the configuration of their\n * server to this function\n */\nexport function createServer(serverConfig: serverConfigType) {\n  if (!serverConfig) {\n    throw new Error('Missing server configuration');\n  }\n\n  if (!CLIENTS.some(cli => cli.key === serverConfig.client)) {\n    throw new Error(`Invalid SQL client: \"${serverConfig.client}\"`);\n  }\n\n  const server: serverType = {\n    /**\n     * All connected dbs. This is the 'connection pool'\n     */\n    db: {},\n\n    config: {\n      ...serverConfig,\n      host: serverConfig.host || serverConfig.socketPath\n    }\n  };\n\n  /**\n   * Server public API\n   */\n  return {\n    /**\n     * Retrieve the database connection pool if it exists\n     * @TODO: Use use Map as dictionary instead of object literal\n     */\n    db(dbName: string): ProviderInterface {\n      if (dbName in server.db) {\n        return server.db[dbName];\n      }\n      throw new Error('DB does not exist in databse connection pool');\n    },\n\n    /**\n     * Kill the server and close the ssh tunnel\n     */\n    end() {\n      // disconnect from all DBs\n      Object.keys(server.db).forEach(key => server.db[key].disconnect());\n\n      // close SSH tunnel\n      if (server.sshTunnel) {\n        server.sshTunnel.close();\n        server.sshTunnel = null;\n      }\n    },\n\n    /**\n     * After the server session has been created, connect to a given\n     * database\n     */\n    async createConnection(dbName: string): Promise<ProviderInterface> {\n      // If connection to database already exists in pool, return in\n      if (server.db[dbName]) {\n        return server.db[dbName];\n      }\n\n      const database = {\n        database: dbName,\n        connection: null,\n        connecting: false\n      };\n\n      // Add the connection to the 'connection pool'\n      server.db[dbName] = await Client(server, database);\n      // @TODO: Handles only sqlite/sqlite3/db files\n      return server.db[dbName];\n    }\n  };\n}\n\nexport default createServer;\n"]}