{"version":3,"sources":["../../../src/database/provider_clients/CassandraProviderFactory.js"],"names":["server","database","dbConfig","configDatabase","logger","debug","client","connect","CassandraProvider","CassandraFactory","constructor","connection","disconnect","shutdown","listTables","Promise","resolve","reject","sql","params","execute","err","data","rows","map","row","name","listViews","listRoutines","listTableColumns","table","sort","a","b","position","columnName","column_name","dataType","type","listTableTriggers","listTableIndexes","listSchemas","getTableReferences","getTableColumns","constraintName","referencedTable","keyType","getTableValues","query","Error","insert","objectToInsert","executeQuery","queryText","commands","identifyCommands","item","parseRowQueryResult","listDatabases","keyspace_name","getQuerySelectTop","limit","wrapIdentifier","getTableCreateScript","getViewCreateScript","getRoutineCreateScript","value","matched","match","replace","truncateAllTables","result","tables","table_name","promises","truncateSQL","t","all","command","isSelect","Array","isArray","fields","columns","rowCount","rowLength","undefined","affectedRows","isNaN","config","contactPoints","host","protocolOptions","port","keyspace","sshTunnel","localHost","localPort","ssl"],"mappings":"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","file":"CassandraProviderFactory.js","sourcesContent":["/* eslint-disable */\n// @TODO: Add flow annotation\nimport { Client } from 'cassandra-driver';\nimport { identify } from 'sql-query-identifier';\nimport BaseProvider from './BaseProvider';\nimport createLogger from '../../Logger';\nimport type {\n  FactoryType,\n  ProviderInterface,\n  serverType,\n  databaseType\n} from './ProviderInterface';\n\nclass CassandraProvider extends BaseProvider implements ProviderInterface {\n  connection: Client;\n\n  constructor(server, database, connection: Client) {\n    super(server, database);\n    this.connection = connection;\n  }\n\n  disconnect() {\n    this.connection.shutdown();\n  }\n\n  listTables(database) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT table_name as name\n        FROM system_schema.tables\n        WHERE keyspace_name = ?\n      `;\n      const params = [database];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(data.rows.map(row => ({ name: row.name })));\n      });\n    });\n  }\n\n  listViews() {\n    return Promise.resolve([]);\n  }\n\n  listRoutines() {\n    return Promise.resolve([]);\n  }\n\n  listTableColumns(database: string, table: string) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT position, column_name, type\n        FROM system_schema.columns\n        WHERE keyspace_name = ?\n          AND table_name = ?\n      `;\n      const params = [database, table];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(\n          data.rows\n            // force pks be placed at the results beginning\n            .sort((a, b) => b.position - a.position)\n            .map(row => ({\n              columnName: row.column_name,\n              dataType: row.type\n            }))\n        );\n      });\n    });\n  }\n\n  listTableTriggers() {\n    return Promise.resolve([]);\n  }\n  listTableIndexes() {\n    return Promise.resolve([]);\n  }\n\n  listSchemas() {\n    return Promise.resolve([]);\n  }\n\n  getTableReferences() {\n    return Promise.resolve([]);\n  }\n\n  getTableColumns(database: string, table: string) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT column_name\n        FROM system_schema.columns\n        WHERE keyspace_name = ?\n          AND table_name = ?\n          AND kind = 'partition_key'\n        ALLOW FILTERING\n      `;\n      const params = [database, table];\n\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(\n          data.rows.map(row => ({\n            constraintName: null,\n            columnName: row.column_name,\n            referencedTable: null,\n            keyType: 'PRIMARY KEY'\n          }))\n        );\n      });\n    });\n  }\n\n  getTableValues() {\n    return Promise.resolve([]);\n  }\n\n  query() {\n    throw new Error('\"query\" is not implementd by cassandra this.connection.');\n  }\n\n  // @TODO\n  insert(database: string, table: string, objectToInsert: Object) {\n    return Promise.resolve([objectToInsert]);\n  }\n\n  executeQuery(queryText: string) {\n    const commands = this.identifyCommands(queryText).map(item => item.type);\n\n    return new Promise((resolve, reject) => {\n      this.connection.execute(queryText, (err, data) => {\n        if (err) return reject(err);\n        return resolve([this.parseRowQueryResult(data, commands[0])]);\n      });\n    });\n  }\n\n  listDatabases() {\n    return new Promise((resolve, reject) => {\n      const sql = 'SELECT keyspace_name FROM system_schema.keyspaces';\n      const params = [];\n      this.connection.execute(sql, params, (err, data) => {\n        if (err) return reject(err);\n        return resolve(data.rows.map(row => row.keyspace_name));\n      });\n    });\n  }\n\n  getQuerySelectTop(table: string, limit: number) {\n    return Promise.resolve(\n      `SELECT * FROM ${this.wrapIdentifier(table)} LIMIT ${limit}`\n    );\n  }\n\n  getTableCreateScript() {\n    return Promise.resolve('');\n  }\n\n  getViewCreateScript() {\n    return Promise.resolve('');\n  }\n\n  getRoutineCreateScript() {\n    return Promise.resolve('');\n  }\n\n  wrapIdentifier(value) {\n    if (value === '*') return value;\n    const matched = value.match(/(.*?)(\\[[0-9]\\])/); // eslint-disable-line no-useless-escape\n    if (matched) return this.wrapIdentifier(matched[1]) + matched[2];\n    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  async truncateAllTables(database) {\n    const sql = `\n      SELECT table_name\n      FROM system_schema.tables\n      WHERE keyspace_name = '${database}'\n    `;\n    const [result] = await this.executeQuery(sql);\n    const tables = result.rows.map(row => row.table_name);\n    const promises = tables.map(t => {\n      const truncateSQL = `\n      TRUNCATE TABLE ${this.wrapIdentifier(database)}.${this.wrapIdentifier(t)};\n    `;\n      return this.executeQuery(truncateSQL);\n    });\n\n    return Promise.all(promises);\n  }\n\n  parseRowQueryResult(data, command) {\n    // Fallback in case the identifier could not reconize the command\n    const isSelect = command ? command === 'SELECT' : Array.isArray(data.rows);\n    return {\n      command: command || (isSelect && 'SELECT'),\n      rows: data.rows || [],\n      fields: data.columns || [],\n      rowCount: isSelect ? data.rowLength || 0 : undefined,\n      affectedRows:\n        !isSelect && !isNaN(data.rowLength) ? data.rowLength : undefined\n    };\n  }\n\n  identifyCommands(queryText: string) {\n    try {\n      return identify(queryText);\n    } catch (err) {\n      return [];\n    }\n  }\n}\n\nfunction configDatabase(server: Object, database: Object) {\n  const config = {\n    contactPoints: [server.config.host],\n    protocolOptions: {\n      port: server.config.port\n    },\n    keyspace: database.database\n  };\n\n  if (server.sshTunnel) {\n    config.contactPoints = [server.config.localHost];\n    config.protocolOptions.port = server.config.localPort;\n  }\n\n  if (server.config.ssl) {\n    // TODO: sslOptions\n  }\n\n  return config;\n}\n\n/**\n * Construct the CassandraProvider. Wait for the client to connect and then instantiate\n * the provider\n */\nasync function CassandraFactory(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  const dbConfig = configDatabase(server, database);\n  const logger = createLogger('db:clients:cassandra');\n\n  logger().debug('creating database client %j', dbConfig);\n  const client = new Client(dbConfig);\n\n  logger().debug('connecting');\n  await client.connect();\n\n  return new CassandraProvider(server, database, client);\n}\n\nexport default CassandraFactory;\n"]}