{"version":3,"sources":["../../../src/database/provider_clients/SqliteProviderFactory.js"],"names":["server","database","logger","dbConfig","configDatabase","connection","debug","provider","SqliteProvider","driverExecuteQuery","query","SqliteFactory","constructor","privateGraphQLServerIsRunning","disconnect","wrapIdentifier","value","matched","match","replace","getQuerySelectTop","table","limit","Promise","resolve","getLogs","logs","map","log","setLogs","queryText","queryConnection","self","execute","runWithConnection","executeQuery","err","code","CANCELED","sqlectronError","cancel","Error","interrupt","result","multiple","parseRowQueryResult","getConnectionType","insert","rows","tableColumns","getTableColumnNames","rowSqls","rowData","row","key","join","then","res","data","update","records","tablePrimaryKey","getPrimaryKeyColumn","queries","columnNames","Object","keys","record","changes","edits","columnName","name","rowPrimaryKeyValue","finalQuery","getGraphQLServerPort","graphQLServerPort","startGraphQLServer","a","b","c","all","default","graphqlHTTP","buildSchemaFromDatabase","express","graphQLServerIsRunning","app","schema","port","use","graphQLServer","listen","console","stopGraphQLServer","close","undefined","delete","primaryKey","conditions","results","getVersion","getTableColumns","raw","sql","rawResults","columns","primaryKeyColumn","find","pk","getTableValues","getTableNames","renameTable","oldTableName","newTableName","dropTable","addTableColumn","columnType","renameTableColumns","originalColumns","forEach","includes","column","oldColumnName","propertiesArr","getTablePropertiesSql","newColumnName","dropTableColumns","columnsToDrop","temp","e","permittedColumns","filter","col","filteredPropertiesArr","substring","indexOf","lastIndexOf","getCreateTableSql","createTableArgs","creationScript","trim","betweenParaentheses","split","listTables","listViews","listRoutines","checkIsConnected","listTableColumns","dataType","type","listTableTriggers","listTableIndexes","listSchemas","listDatabases","file","getTableReferences","getTableCreateScript","getViewCreateScript","view","getRoutineCreateScript","isOnline","truncateTable","truncateSingleQuery","truncateAllTables","tables","truncateAllQuery","statement","isSelect","Array","isArray","command","fields","rowCount","length","affectedRows","identifyCommands","strict","queryArgs","runQuery","executionType","text","reject","method","resolveExecutionType","queryCallback","lastID","run","params","identifyStatementsRunQuery","statements","verbose","db","Database","on","duration","push","serialize","runErr","checkUnsupported","exportOptions","unsupportedOptions","hasUnsupported","some","option","JSON","stringify"],"mappings":";;;;;;;;;gCA8wBA,WACEA,MADF,EAEEC,QAFF,EAGe;AACb,UAAMC,SAAS,sBAAa,mBAAb,CAAf;AACA,UAAMC,WAAWC,eAAeJ,MAAf,EAAuBC,QAAvB,CAAjB;AACA,UAAMI,aAAa,EAAEF,QAAF,EAAnB;AACAD,aAASI,KAAT,CAAe,iDAAf,EAAkEH,QAAlE;;AAEA,UAAMI,WAAW,IAAIC,cAAJ,CAAmBR,MAAnB,EAA2BC,QAA3B,EAAqCI,UAArC,CAAjB;;AAEA;AACA,UAAME,SAASE,kBAAT,CAA4B,EAAEC,OAAO,yBAAT,EAA5B,CAAN;;AAEA,WAAOH,QAAP;AACD,G;;kBAfcI,a;;;;;AA7wBf;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;;;;;AAsCA;AACA;;;AAbA;;;AAcA,MAAMH,cAAN,gCAAuE;;AAYrEI,cAAYZ,MAAZ,EAA4BC,QAA5B,EAA8CI,UAA9C,EAAkE;AAChE,UAAML,MAAN,EAAcC,QAAd;AADgE,SAFlEY,6BAEkE,GAFzB,KAEyB;AAEhE,SAAKR,UAAL,GAAkBA,UAAlB;AACD;;AAED;;;AAVA;;;AAWAS,eAAa;AACX;AACA;AACA;AACA;AACD;;AAEDC,iBAAeC,KAAf,EAAsC;AACpC,QAAIA,UAAU,GAAd,EAAmB;AACjB,aAAOA,KAAP;AACD;;AAED,UAAMC,UAAUD,MAAME,KAAN,CAAY,kBAAZ,CAAhB,CALoC,CAKa;;AAEjD,WAAOD,UACH,KAAKF,cAAL,CAAoBE,QAAQ,CAAR,CAApB,IAAkCA,QAAQ,CAAR,CAD/B,GAEF,IAAGD,MAAMG,OAAN,CAAc,IAAd,EAAoB,IAApB,CAA0B,GAFlC;AAGD;;AAEDC,oBAAkBC,KAAlB,EAAiCC,KAAjC,EAAgD;AAC9C,WAAOC,QAAQC,OAAR,CACJ,iBAAgB,KAAKT,cAAL,CAAoBM,KAApB,CAA2B,UAASC,KAAM,EADtD,CAAP;AAGD;;AAEKG,SAAN,GAAyC;AAAA;;AAAA;AACvC,aAAO,MAAKC,IAAL,CAAUC,GAAV,CAAc;AAAA,4BAChBC,GADgB;AAEnBlB,iBAAOkB,IAAIlB,KAAJ,CAAUS,OAAV,CAAkB,gBAAlB,EAAoC,EAApC;AAFY;AAAA,OAAd,CAAP;AADuC;AAKxC;;AAED;;;AAGMU,SAAN,GAAgB;AAAA;AACd,aAAON,QAAQC,OAAR,EAAP;AADc;AAEf;;AAEDd,QAAMoB,SAAN,EAA6C;AAC3C,QAAIC,kBAAkB,IAAtB;AACA,UAAMC,OAAO,IAAb;;AAEA,WAAOT,QAAQC,OAAR,CAAgB;AACrBS,gBAAU;AACR,eAAOD,KAAKE,iBAAL,CAAuB,MAAM;AAClC,cAAI;AACFH,8BAAkBC,KAAK3B,UAAvB;AACA,mBAAO2B,KAAKG,YAAL,CAAkBL,SAAlB,CAAP;AACD,WAHD,CAGE,OAAOM,GAAP,EAAY;AACZ,gBAAIA,IAAIC,IAAJ,KAAaL,KAAKM,QAAtB,EAAgC;AAC9BF,kBAAIG,cAAJ,GAAqB,kBAArB;AACD;AACD,kBAAMH,GAAN;AACD;AACF,SAVM,CAAP;AAWD,OAboB;AAcrBI,eAAS;AACP,YAAI,CAACT,eAAL,EAAsB;AACpB,gBAAM,IAAIU,KAAJ,CAAU,gCAAV,CAAN;AACD;AACDV,wBAAgBW,SAAhB;AACD;AAnBoB,KAAhB,CAAP;AAqBD;;AAEKP,cAAN,CAAmBL,SAAnB,EAAsC;AAAA;;AAAA;AACpC,YAAMa,SAAS,MAAM,OAAKlC,kBAAL,CAAwB;AAC3CC,eAAOoB,SADoC;AAE3Cc,kBAAU;AAFiC,OAAxB,CAArB;AAIA,aAAOD,OAAOhB,GAAP,CAAW,OAAKkB,mBAAhB,CAAP;AALoC;AAMrC;;AAEDC,sBAAoB;AAClB,WAAOvB,QAAQC,OAAR,CAAgB,OAAhB,CAAP;AACD;;AAED;;;;AAIMuB,QAAN,CACE1B,KADF,EAEE2B,IAFF,EAG+B;AAAA;;AAAA;AAC7B,YAAMC,eAAe,MAAM,OAAKC,mBAAL,CAAyB7B,KAAzB,CAA3B;AACA,YAAM8B,UAAUH,KAAKrB,GAAL,CAAS,eAAO;AAC9B,cAAMyB,UAAUH,aAAatB,GAAb,CACd;AAAA,iBAAQ0B,IAAIC,GAAJ,IAAY,IAAGD,IAAIC,GAAJ,CAAS,GAAxB,GAA6B,MAArC;AAAA,SADc,CAAhB;AAGA,eAAQ,IAAGF,QAAQG,IAAR,CAAa,IAAb,CAAmB,GAA9B;AACD,OALe,CAAhB;AAMA,YAAM7C,QAAS;mBACAW,KAAM,KAAI4B,aAAaM,IAAb,CAAkB,IAAlB,CAAwB;;OAE9CJ,QAAQI,IAAR,CAAa,KAAb,CAAoB;KAHvB;AAKA,aAAO,OAAK9C,kBAAL,CAAwB,EAAEC,KAAF,EAAxB,EAAmC8C,IAAnC,CAAwC;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAAxC,CAAP;AAb6B;AAc9B;;AAED;;;;;AAKMC,QAAN,CACEtC,KADF,EAEEuC,OAFF,EAM+B;AAAA;;AAAA;AAC7B,YAAMC,kBAAkB,MAAM,OAAKC,mBAAL,CAAyBzC,KAAzB,CAA9B;AACA,YAAM0C,UAAUH,QAAQjC,GAAR,CAAY,kBAAU;AACpC,cAAMqC,cAAcC,OAAOC,IAAP,CAAYC,OAAOC,OAAnB,CAApB;AACA,cAAMC,QAAQL,YAAYrC,GAAZ,CACZ;AAAA,iBAAe,GAAE2C,UAAW,OAAMH,OAAOC,OAAP,CAAeE,UAAf,CAA2B,GAA7D;AAAA,SADY,CAAd;AAGA,eAAQ;iBACGjD,KAAM;cACTgD,MAAMd,IAAN,CAAW,IAAX,CAAiB;gBACfM,gBAAgBU,IAAK,MAAKJ,OAAOK,kBAAmB;KAH9D;AAKD,OAVe,CAAhB;AAWA,YAAMC,aAAaV,QAAQR,IAAR,CAAa,IAAb,CAAnB;AACA,aAAO,OAAK9C,kBAAL,CAAwB,EAAEC,OAAO+D,UAAT,EAAxB,EAA+CjB,IAA/C,CAAoD;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAApD,CAAP;AAd6B;AAe9B;;AAEDgB,yBAAuB;AACrB,WAAO,KAAKC,iBAAZ;AACD;;AAEKC,oBAAN,GAA0C;AAAA;;AAAA;AACxC,YAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAY,MAAMxD,QAAQyD,GAAR,CAAY,sCAC3B,iBAD2B,yCAE3B,MAF2B,yCAG3B,SAH2B,GAAZ,CAAxB;AAKA,YAAM,EAAEC,SAASC,WAAX,KAA2BL,CAAjC;AACA,YAAM,EAAEM,uBAAF,KAA8BL,CAApC;AACA,YAAM,EAAEG,SAASG,OAAX,KAAuBL,CAA7B;;AAEA,UAAI,OAAKM,sBAAL,EAAJ,EAAmC;AACjC;AACD;;AAED,YAAMC,MAAMF,SAAZ;AACA,YAAMG,SAAS,MAAMJ,wBACnB,OAAK9E,UAAL,CAAgBF,QAAhB,CAAyBF,QADN,CAArB;AAGA,YAAMuF,OAAO,MAAM,wBAAnB;AACAF,UAAIG,GAAJ,CAAQ,UAAR,EAAoB,qBAApB,EAA4BP,YAAY,EAAEK,MAAF,EAAZ,CAA5B;;AAEA,YAAM,IAAIhE,OAAJ,CAAY,mBAAW;AAC3B,eAAKmE,aAAL,GAAqBJ,IAAIK,MAAJ,CAAWH,IAAX,EAAiB,YAAM;AAC1C,iBAAKb,iBAAL,GAAyBa,IAAzB;AACAI,kBAAQhE,GAAR,CAAa,kCAAiC4D,IAAK,UAAnD;AACAhE;AACD,SAJoB,CAArB;AAKA,eAAKX,6BAAL,GAAqC,IAArC;AACD,OAPK,CAAN;AArBwC;AA6BzC;;AAEKgF,mBAAN,GAAyC;AAAA;;AAAA;AACvC,UAAI,OAAKR,sBAAL,EAAJ,EAAmC;AACjC,eAAKK,aAAL,CAAmBI,KAAnB;AACA,eAAKJ,aAAL,GAAqBK,SAArB;AACA,eAAKpB,iBAAL,GAAyBoB,SAAzB;AACA,eAAKlF,6BAAL,GAAqC,KAArC;AACD;AANsC;AAOxC;;AAEDwE,2BAAyB;AACvB,WAAO,KAAKxE,6BAAZ;AACD;;AAED;;;;AAIMmF,QAAN,CACE3E,KADF,EAEE6C,IAFF,EAG+B;AAAA;;AAAA;AAC7B,YAAM+B,aAAa,MAAM,OAAKnC,mBAAL,CAAyBzC,KAAzB,CAAzB;AACA,YAAM6E,aAAahC,KAAKvC,GAAL,CAAS;AAAA,eAAQ,GAAEsE,WAAW1B,IAAK,OAAMjB,GAAI,GAApC;AAAA,OAAT,CAAnB;AACA,YAAM5C,QAAS;oBACCW,KAAM;cACZ6E,WAAW3C,IAAX,CAAgB,MAAhB,CAAwB;KAFlC;AAIA,YAAM4C,UAAU,MAAM,OAAK1F,kBAAL,CAAwB,EAAEC,KAAF,EAAxB,EAAmC8C,IAAnC,CACpB;AAAA,eAAOC,IAAIC,IAAX;AAAA,OADoB,CAAtB;AAGA,aAAOyC,OAAP;AAV6B;AAW9B;;AAEDC,eAAuC;AACrC,WAAO,KAAK3F,kBAAL,CAAwB,EAAEC,OAAO,yBAAT,EAAxB,EAA8D8C,IAA9D,CACLC,OAAOA,IAAIC,IAAJ,CAAS,CAAT,EAAY,kBAAZ,CADF,CAAP;AAGD;;AAED;;;AAGM2C,iBAAN,CACEhF,KADF,EAEEiF,MAAe,KAFjB,EAGgC;AAAA;;AAAA;AAC9B,YAAMC,MAAO,qBAAoBlF,KAAM,GAAvC;AACA,YAAMmF,aAAa,OAAK/F,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CACjB;AAAA,eAAOC,IAAIC,IAAX;AAAA,OADiB,CAAnB;AAGA,aAAO4C,MAAME,UAAN,GAAmBA,WAAWhD,IAAX,CAAgB;AAAA,eAAOC,GAAP;AAAA,OAAhB,CAA1B;AAL8B;AAM/B;;AAEKK,qBAAN,CAA0BzC,KAA1B,EAAgE;AAAA;;AAAA;AAC9D,YAAMoF,UAAU,MAAM,OAAKJ,eAAL,CAAqBhF,KAArB,CAAtB;AACA,YAAMqF,mBAAmBD,QAAQE,IAAR,CAAa;AAAA,eAAOrD,IAAIsD,EAAJ,KAAW,CAAlB;AAAA,OAAb,CAAzB;AACA,UAAI,CAACF,gBAAL,EAAuB;AACrB,cAAM,IAAIjE,KAAJ,CAAW,kCAAiCpB,KAAM,EAAlD,CAAN;AACD;AACD,aAAOqF,gBAAP;AAN8D;AAO/D;;AAEKG,gBAAN,CAAqBxF,KAArB,EAAoC;AAAA;;AAAA;AAClC,YAAMkF,MAAO;;cAEHlF,KAAM;KAFhB;AAIA,aAAO,QAAKZ,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AALkC;AAMnC;;AAEKoD,eAAN,GAAsB;AAAA;;AAAA;AACpB,YAAMP,MAAO;;;;KAAb;AAKA,aAAO,QAAK9F,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAClDC,IAAIC,IAAJ,CAAS/B,GAAT,CAAa;AAAA,iBAASN,MAAMkD,IAAf;AAAA,SAAb,CADkD;AAAA,OAA7C,CAAP;AANoB;AASrB;;AAED;;;AAGMwC,aAAN,CAAkBC,YAAlB,EAAwCC,YAAxC,EAA8D;AAAA;;AAAA;AAC5D,YAAMV,MAAO;oBACGS,YAAa;oBACbC,YAAa;KAF7B;AAIA,aAAO,QAAKxG,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAL4D;AAM7D;;AAED;;;AAGMwD,WAAN,CAAgB7F,KAAhB,EAA+B;AAAA;;AAAA;AAC7B,YAAMkF,MAAO;mBACElF,KAAM;KADrB;AAGA,aAAO,QAAKZ,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAJ6B;AAK9B;;AAED;;;AAGMyD,gBAAN,CAAqB9F,KAArB,EAAoCiD,UAApC,EAAwD8C,UAAxD,EAA4E;AAAA;;AAAA;AAC1E,YAAMb,MAAO;kBACClF,KAAM;oBACJiD,UAAW,KAAI8C,UAAW;KAF1C;AAIA,aAAO,QAAK3G,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAL0E;AAM3E;;AAEK2D,oBAAN,CACEhG,KADF,EAEEoF,OAFF,EAGE;AAAA;;AAAA;AACA;AACA,YAAMa,kBAAkB,MAAM,QAAKpE,mBAAL,CAAyB7B,KAAzB,CAA9B;AACAoF,cAAQc,OAAR,CAAgB,kBAAU;AACxB,YAAI,CAACD,gBAAgBE,QAAhB,CAAyBC,OAAOC,aAAhC,CAAL,EAAqD;AACnD,gBAAM,IAAIjF,KAAJ,CAAW,GAAEgF,OAAOC,aAAc,uBAAsBrG,KAAM,EAA9D,CAAN;AACD;AACF,OAJD;;AAMA,YAAMsG,gBAAgB,MAAM,QAAKC,qBAAL,CAA2BvG,KAA3B,CAA5B;AACA,UAAIkF,MAAO;;;kBAGGlF,KAAM,cAAaA,KAAM;;;mBAGxBA,KAAM,KAAIsG,cAAcpE,IAAd,EAAqB;;;kBAGhClC,KAAM,KAAIiG,gBAAgB/D,IAAhB,CAAqB,IAArB,CAA2B;eACxC+D,gBAAgB/D,IAAhB,CAAqB,IAArB,CAA2B;aAC7BlC,KAAM;;iBAEFA,KAAM;;;4BAbnB;;AAkBA;AACAoF,cAAQc,OAAR,CAAgB,kBAAU;AACxBhB,cAAMA,IAAIpF,OAAJ,CAAYsG,OAAOC,aAAnB,EAAkCD,OAAOI,aAAzC,CAAN;AACD,OAFD;;AAIA,aAAO,QAAKpH,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAjCA;AAkCD;;AAED;;;;;;AAMMoE,kBAAN,CAAuBzG,KAAvB,EAAsC0G,aAAtC,EAAoE;AAAA;;AAAA;AAClE,YAAMC,OAAO,MAAM,QAAK9E,mBAAL,CAAyB7B,KAAzB,CAAnB;;AAEA0G,oBAAcR,OAAd,CAAsB,aAAK;AACzB,YAAI,CAACS,KAAKR,QAAL,CAAcS,CAAd,CAAL,EAAuB;AACrB,gBAAM,IAAIxF,KAAJ,CAAW,GAAEwF,CAAE,uBAAsB5G,KAAM,EAA3C,CAAN;AACD;AACF,OAJD;;AAMA,YAAM6G,mBAAmBF,KAAKG,MAAL,CAAY;AAAA,eAAO,CAACJ,cAAcP,QAAd,CAAuBY,GAAvB,CAAR;AAAA,OAAZ,CAAzB;AACA;AACA,YAAMT,gBAAgB,MAAM,QAAKC,qBAAL,CAA2BvG,KAA3B,CAA5B;AACA,YAAMgH,wBAAwBV,cAAcQ,MAAd,CAC5B;AAAA,eACE,CAACJ,cAAcP,QAAd,CACCnE,IAAIiF,SAAJ,CAAcjF,IAAIkF,OAAJ,CAAY,GAAZ,IAAmB,CAAjC,EAAoClF,IAAImF,WAAJ,CAAgB,GAAhB,CAApC,CADD,CADH;AAAA,OAD4B,CAA9B;AAMA,YAAMjC,MAAO;;;kBAGClF,KAAM,cAAaA,KAAM;;;mBAGxBA,KAAM,KAAIgH,sBAAsB9E,IAAtB,EAA6B;;;kBAGxClC,KAAM,KAAI6G,iBAAiB3E,IAAjB,CAAsB,IAAtB,CAA4B;eACzC2E,iBAAiB3E,IAAjB,CAAsB,IAAtB,CAA4B;aAC9BlC,KAAM;;iBAEFA,KAAM;;;4BAbnB;AAiBA,aAAO,QAAKZ,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAnCkE;AAoCnE;;AAED;;;;;;AAMM+E,mBAAN,CAAwBpH,KAAxB,EAAwD;AAAA;;AAAA;AACtD,YAAMqH,kBAAkB,MAAM,QAAKd,qBAAL,CAA2BvG,KAA3B,CAA9B;AACA,aAAQ,gBAAeA,KAAM,KAAIqH,gBAAgBnF,IAAhB,EAAuB,GAAxD;AAFsD;AAGvD;;AAED;;;;AAIMqE,uBAAN,CAA4BvG,KAA5B,EAAmE;AAAA;;AAAA;AACjE,YAAMkF,MAAO;;;oBAGGlF,KAAM;KAHtB;AAKA,YAAMsH,iBAAiB,MAAM,QAAKlI,kBAAL,CAAwB;AACnDC,eAAO6F;AAD4C,OAAxB,EAE1B/C,IAF0B,CAErB;AAAA,eAAOC,IAAIC,IAAJ,CAAS,CAAT,EAAY6C,GAAZ,CAAgBqC,IAAhB,EAAP;AAAA,OAFqB,CAA7B;;AAIA;AACA,YAAMC,sBAAsBF,eACzBL,SADyB,CACfK,eAAeJ,OAAf,CAAuB,GAAvB,IAA8B,CADf,EAEzBpH,OAFyB,CAEjB,KAFiB,EAEV,EAFU,EAGzB2H,KAHyB,CAGnB,GAHmB,CAA5B;;AAKA;AACA;AACA;AACA,aAAOD,oBAAoBlH,GAApB,CACL;AAAA,eACG,OACC0B,IAAImE,QAAJ,CAAa,SAAb,KAA2BnE,IAAImE,QAAJ,CAAa,SAAb,CAA3B,GACInE,IACGuF,IADH,GAEGzH,OAFH,CAEW,SAFX,EAEsB,EAFtB,EAGGA,OAHH,CAGW,SAHX,EAGsB,GAHtB,CADJ,GAKIkC,IACGuF,IADH,GAEGzH,OAFH,CAEW,SAFX,EAEsB,EAFtB,EAGGA,OAHH,CAGW,SAHX,EAGsB,GAHtB,EAIGA,OAJH,CAIW,YAJX,EAIyB,EAJzB,EAKGA,OALH,CAKW,yBALX,EAKsC,MALtC,CAML,EAbH;AAAA,OADK,CAAP;AAnBiE;AAmClE;;AAEK4H,YAAN,GAAmB;AAAA;;AAAA;AACjB,YAAMxC,MAAO;;;;;KAAb;AAMA,aAAO,QAAK9F,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AAPiB;AAQlB;;AAEKsF,WAAN,GAAkB;AAAA;;AAAA;AAChB,YAAMzC,MAAO;;;;KAAb;AAKA,aAAO,QAAK9F,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,EAAwC/C,IAAxC,CAA6C;AAAA,eAAOC,IAAIC,IAAX;AAAA,OAA7C,CAAP;AANgB;AAOjB;;AAED;AACAuF,iBAAe;AACb,WAAO1H,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEK0B,qBAAN,CAA0B7B,KAA1B,EAAyC;AAAA;;AAAA;AACvC,cAAK6H,gBAAL;AACA,YAAMzC,UAAU,MAAM,QAAK0C,gBAAL,CAAsB9H,KAAtB,CAAtB;AACA,aAAOoF,QAAQ9E,GAAR,CAAY;AAAA,eAAU8F,OAAOnD,UAAjB;AAAA,OAAZ,CAAP;AAHuC;AAIxC;;AAED;AACM6E,kBAAN,CAAuB9H,KAAvB,EAAsC;AAAA;;AAAA;AACpC,YAAMkF,MAAO,qBAAoBlF,KAAM,GAAvC;AACA,YAAM,EAAEqC,IAAF,KAAW,MAAM,QAAKjD,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,CAAvB;;AAEA,aAAO7C,KAAK/B,GAAL,CAAS;AAAA,eAAQ;AACtB2C,sBAAYjB,IAAIkB,IADM;AAEtB6E,oBAAU/F,IAAIgG;AAFQ,SAAR;AAAA,OAAT,CAAP;AAJoC;AAQrC;;AAEKC,mBAAN,CAAwBjI,KAAxB,EAAuC;AAAA;;AAAA;AACrC,YAAMkF,MAAO;;;;0BAISlF,KAAM;KAJ5B;AAMA,YAAM,EAAEqC,IAAF,KAAW,MAAM,QAAKjD,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,CAAvB;;AAEA,aAAO7C,KAAK/B,GAAL,CAAS;AAAA,eAAO0B,IAAIkB,IAAX;AAAA,OAAT,CAAP;AATqC;AAUtC;;AAEKgF,kBAAN,CAAuBlI,KAAvB,EAAsC;AAAA;;AAAA;AACpC,YAAMkF,MAAO,sBAAqBlF,KAAM,IAAxC;AACA,YAAM,EAAEqC,IAAF,KAAW,MAAM,QAAKjD,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,CAAvB;;AAEA,aAAO7C,KAAK/B,GAAL,CAAS;AAAA,eAAO0B,IAAIkB,IAAX;AAAA,OAAT,CAAP;AAJoC;AAKrC;;AAED;AACAiF,gBAAc;AACZ,WAAOjI,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEKiI,eAAN,GAAsB;AAAA;;AAAA;AACpB,YAAM9G,SAAS,MAAM,QAAKlC,kBAAL,CAAwB;AAC3CC,eAAO;AADoC,OAAxB,CAArB;;AAIA,UAAI,CAACiC,MAAL,EAAa;AACX,cAAM,IAAIF,KAAJ,CAAU,YAAV,CAAN;AACD;;AAED,aAAOE,OAAOe,IAAP,CAAY/B,GAAZ,CAAgB;AAAA,eAAO0B,IAAIqG,IAAJ,IAAY,UAAnB;AAAA,OAAhB,CAAP;AAToB;AAUrB;;AAED;AACAC,uBAAqB;AACnB,WAAOpI,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEKoI,sBAAN,CAA2BvI,KAA3B,EAA0C;AAAA;;AAAA;AACxC,YAAMkF,MAAO;;;sBAGKlF,KAAM;KAHxB;AAKA,YAAM,EAAEqC,IAAF,KAAW,MAAM,QAAKjD,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,CAAvB;;AAEA,aAAO7C,KAAK/B,GAAL,CAAS;AAAA,eAAO0B,IAAIkD,GAAX;AAAA,OAAT,CAAP;AARwC;AASzC;;AAEKsD,qBAAN,CAA0BC,IAA1B,EAAgC;AAAA;;AAAA;AAC9B,YAAMvD,MAAO;;;sBAGKuD,IAAK;KAHvB;AAKA,YAAM,EAAEpG,IAAF,KAAW,MAAM,QAAKjD,kBAAL,CAAwB,EAAEC,OAAO6F,GAAT,EAAxB,CAAvB;;AAEA,aAAO7C,KAAK/B,GAAL,CAAS;AAAA,eAAO0B,IAAIkD,GAAX;AAAA,OAAT,CAAP;AAR8B;AAS/B;;AAED;AACMwD,wBAAN,GAA+B;AAAA;AAC7B,aAAO,EAAP;AAD6B;AAE9B;;AAED;;;;;AAKAC,aAAW;AACT,WAAOzI,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDyI,gBAAc5I,KAAd,EAA4C;AAAA;;AAC1C,WAAO,KAAKa,iBAAL,mBAAuB,aAAY;AACxC,YAAMgI,sBAAuB,eAAc7I,KAAM,EAAjD;;AAEA;AACA;AACA,YAAMsB,SAAS,MAAM,QAAKlC,kBAAL,CAAwB;AAC3CC,eAAOwJ;AADoC,OAAxB,CAArB;AAGA,aAAOvH,MAAP;AACD,KATM,EAAP;AAUD;;AAEDwH,sBAAmC;AAAA;;AACjC,WAAO,KAAKjI,iBAAL,mBAAuB,aAAY;AACxC,YAAMkI,SAAkC,MAAM,QAAKrB,UAAL,EAA9C;;AAEA,YAAMsB,mBAAmBD,OACtBzI,GADsB,CAErB;AAAA,eAAU;wBACIN,MAAMkD,IAAK;SADzB;AAAA,OAFqB,EAMtBhB,IANsB,CAMjB,EANiB,CAAzB;;AAQA;AACA;AACA,YAAMZ,SAAS,MAAM,QAAKlC,kBAAL,CAAwB,EAAEC,OAAO2J,gBAAT,EAAxB,CAArB;AACA,aAAO1H,MAAP;AACD,KAfM,EAAP;AAgBD;;AAEDE,sBAAoB,EAAEa,IAAF,EAAQ4G,SAAR,EAAmBlG,OAAnB,EAApB,EAAqE;AACnE;AACA,UAAMmG,WAAWC,MAAMC,OAAN,CAAc/G,IAAd,CAAjB;AACA,UAAMV,OAAOU,QAAQ,EAArB;;AAEA,WAAO;AACLV,UADK;AAEL0H,eAASJ,UAAUjB,IAAV,IAAmBkB,YAAY,QAFnC;AAGLI,cAAQ1G,OAAOC,IAAP,CAAYlB,KAAK,CAAL,KAAW,EAAvB,EAA2BrB,GAA3B,CAA+B4C,SAAS,EAAEA,IAAF,EAAT,CAA/B,CAHH;AAILqG,gBAAU5H,KAAK6H,MAJV;AAKLC,oBAAc1G,WAAW;AALpB,KAAP;AAOD;;AAED2G,mBAAiBjJ,SAAjB,EAA4B;AAC1B,QAAI;AACF,aAAO,kCAASA,SAAT,EAAoB,EAAEkJ,QAAQ,KAAV,EAApB,CAAP;AACD,KAFD,CAEE,OAAO5I,GAAP,EAAY;AACZ,aAAO,EAAP;AACD;AACF;;AAED;;;;;;;;;;AAUM3B,oBAAN,CAAyBwK,SAAzB,EAAoE;AAAA;;AAAA;AAClE,YAAMC,WAAW,UAAC7K,UAAD,EAA6B,EAAE8K,aAAF,EAAiBC,IAAjB,EAA7B;AAAA,eACf,IAAI7J,OAAJ,CAAY,UAACC,OAAD,EAAU6J,MAAV,EAAqB;AAC/B,gBAAMC,SAAS,QAAKC,oBAAL,CAA0BJ,aAA1B,CAAf;AACA;AACA,mBAASK,aAAT,CAAuBpJ,GAAvB,EAAoCsB,IAApC,EAAmD;AACjD,gBAAItB,GAAJ,EAAS;AACP,qBAAOiJ,OAAOjJ,GAAP,CAAP;AACD;AACD,mBAAOZ,QAAQ;AACbkC,kBADa;AAEb+H,sBAAQ,KAAKA,MAFA;AAGbrH,uBAAS,KAAKA;AAHD,aAAR,CAAP;AAKD;;AAED,kBAAQkH,MAAR;AACE,iBAAK,KAAL;AAAY;AACV,uBAAOjL,WAAWqL,GAAX,CAAeN,IAAf,EAAqBH,UAAUU,MAAV,IAAoB,EAAzC,EAA6CH,aAA7C,CAAP;AACD;AACD,iBAAK,KAAL;AAAY;AACV,uBAAOnL,WAAW2E,GAAX,CAAeoG,IAAf,EAAqBH,UAAUU,MAAV,IAAoB,EAAzC,EAA6CH,aAA7C,CAAP;AACD;AACD;AAAS;AACP,sBAAM,IAAI/I,KAAJ,CAAW,8BAA6B6I,MAAO,GAA/C,CAAN;AACD;AATH;AAWD,SAzBD,CADe;AAAA,OAAjB;;AA4BA;AACA,YAAMM;AAAA,sCAA6B,WAAOvL,UAAP,EAAsC;AACvE,gBAAMwL,aAAa,QAAKd,gBAAL,CAAsBE,UAAUvK,KAAhC,CAAnB;AACA,gBAAMyF,UAAU0F,WAAWlK,GAAX,CAAe;AAAA,mBAC7BuJ,SAAS7K,UAAT,EAAqBiK,SAArB,EAAgC9G,IAAhC,CAAqC;AAAA,kCAChCb,MADgC;AAEnC2H;AAFmC;AAAA,aAArC,CAD6B;AAAA,WAAf,CAAhB;;AAOA,iBAAOW,UAAUrI,QAAV,GACHrB,QAAQyD,GAAR,CAAYmB,OAAZ,CADG,GAEH5E,QAAQC,OAAR,CAAgB2E,QAAQ,CAAR,CAAhB,CAFJ;AAGD,SAZK;;AAAA;AAAA;AAAA;AAAA,UAAN;;AAcA,aAAO,QAAK9F,UAAL,CAAgBA,UAAhB,GACH,MAAMuL,2BAA2B,QAAKvL,UAAL,CAAgBA,UAA3C,CADH,GAEH,QAAK6B,iBAAL,CAAuB0J,0BAAvB,CAFJ;AA5CkE;AA+CnE;;AAED1J,oBAAkBwJ,GAAlB,EAAoE;AAAA;;AAClE,WAAO,IAAInK,OAAJ,CAAY,CAACC,OAAD,EAAU6J,MAAV,KAAqB;AACtC,uBAAQS,OAAR;;AAEA,YAAMC,KAAK,IAAI,iBAAQC,QAAZ,CACT,KAAK3L,UAAL,CAAgBF,QAAhB,CAAyBF,QADhB;AAAA,sCAET,WAAMmC,GAAN,EAAa;AACX,cAAIA,GAAJ,EAAS;AACP,mBAAOiJ,OAAOjJ,GAAP,CAAP;AACD;;AAED2J,aAAGE,EAAH,CAAM,OAAN,EAAe,UAACvL,KAAD,EAAQwL,QAAR,EAAqB;AAClC,oBAAKxK,IAAL,CAAUyK,IAAV,CAAe;AACbzL,mBADa;AAEbwL,wBAAUA,YAAY,CAFT;AAGb7C,oBAAM;AAHO,aAAf;AAKD,WAND;AAOA0C,aAAGE,EAAH,CAAM,SAAN,EAAiB,UAACvL,KAAD,EAAQwL,QAAR,EAAqB;AACpC,oBAAKxK,IAAL,CAAUyK,IAAV,CAAe;AACbzL,mBADa;AAEbwL,wBAAUA,YAAY,CAFT;AAGb7C,oBAAM;AAHO,aAAf;AAKD,WAND;;AAQA,cAAI;AACF0C,eAAGK,SAAH;AACA,mBAAO5K,QAAQkK,IAAIK,EAAJ,CAAR,CAAP;AACD,WAHD,CAGE,OAAOM,MAAP,EAAe;AACfhB,mBAAOgB,MAAP;AACD,WALD,SAKU;AACRN,eAAGjG,KAAH;AACD;AACF,SA9BQ;;AAAA;AAAA;AAAA;AAAA,WAAX;AAgCD,KAnCM,CAAP;AAoCD;;AAED;;;AAGAyF,uBAAqBJ,aAArB,EAA2D;AACzD,YAAQA,aAAR;AACE,WAAK,cAAL;AACE,eAAO,KAAP;AACF;AACE,eAAO,KAAP;AAJJ;AAMD;;AAED;;;AAGAmB,mBAAiBC,aAAjB,EAAmD;AACjD,UAAMC,qBAAqB,CAAC,OAAD,EAAU,YAAV,EAAwB,WAAxB,EAAqC,MAArC,CAA3B;AACA,UAAMC,iBAAiBxI,OAAOC,IAAP,CAAYqI,aAAZ,EAA2BG,IAA3B,CAAgCC,UACrDH,mBAAmBhF,QAAnB,CAA4BmF,MAA5B,CADqB,CAAvB;;AAIA,QAAIF,cAAJ,EAAoB;AAClB,YAAM,IAAIhK,KAAJ,CACH,kCAAiCmK,KAAKC,SAAL,CAAeN,aAAf,CAA8B,EAD5D,CAAN;AAGD;AACF;AAttBoE;;AAytBvE,SAASnM,cAAT,CAAwBJ,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,SAAO;AACLA,cAAUA,SAASA;AADd,GAAP;AAGD;;kBAmBcU,a","file":"SqliteProviderFactory.js","sourcesContent":["// @flow\nimport sqlite3 from 'sqlite3';\nimport getPort from 'get-port';\nimport cors from 'cors';\nimport { identify } from 'sql-query-identifier';\nimport type { Application } from 'express';\nimport createLogger from '../../Logger';\nimport BaseProvider from './BaseProvider';\nimport type {\n  ProviderInterface,\n  FactoryType,\n  serverType,\n  exportOptionsType,\n  queryType,\n  queryResponseType,\n  databaseType,\n  logType\n} from './ProviderInterface';\n\ntype queryArgsType = {\n  query: string,\n  multiple?: boolean,\n  params?: Array<string>\n};\n\ntype connectionType = {\n  dbConfig: {\n    database: string\n  },\n  run: (queryText: string, args?: Array<string>, cb?: () => void) => void,\n  all: (queryText: string, args?: Array<string>, cb?: () => void) => void\n};\n\n/**\n * Contains data about a column/property/key in a table\n */\ntype tableKeyType = {\n  cid: number,\n  name: string,\n  type: string,\n  notnull: 0 | 1,\n  dflt_value: string,\n  pk: 0 | 1 | 2\n};\n\n// @TODO: Why does logging in constructor vs logging in driver execute\n// return two different things\nclass SqliteProvider extends BaseProvider implements ProviderInterface {\n  connection: connectionType;\n\n  graphQLServer: Application;\n\n  graphQLServerPort: ?number;\n\n  /**\n   * @private\n   */\n  privateGraphQLServerIsRunning: boolean = false;\n\n  constructor(server: Object, database: Object, connection: Object) {\n    super(server, database);\n    this.connection = connection;\n  }\n\n  // @NOT_SUPPORTED\n  disconnect() {\n    // SQLite does not have connection poll. So we open and close connections\n    // for every query request. This allows multiple request at same time by\n    // using a different thread for each connection.\n    // This may cause connection limit problem. So we may have to change this at some point.\n  }\n\n  wrapIdentifier(value: string): string {\n    if (value === '*') {\n      return value;\n    }\n\n    const matched = value.match(/(.*?)(\\[[0-9]\\])/); // eslint-disable-line no-useless-escape\n\n    return matched\n      ? this.wrapIdentifier(matched[1]) + matched[2]\n      : `\"${value.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  getQuerySelectTop(table: string, limit: number) {\n    return Promise.resolve(\n      `SELECT * FROM ${this.wrapIdentifier(table)} LIMIT ${limit}`\n    );\n  }\n\n  async getLogs(): Promise<Array<logType>> {\n    return this.logs.map(log => ({\n      ...log,\n      query: log.query.replace(/(\\r\\n|\\n|\\r)/gm, '')\n    }));\n  }\n\n  /**\n   * @TODO\n   */\n  async setLogs() {\n    return Promise.resolve();\n  }\n\n  query(queryText: string): Promise<queryType> {\n    let queryConnection = null;\n    const self = this;\n\n    return Promise.resolve({\n      execute() {\n        return self.runWithConnection(() => {\n          try {\n            queryConnection = self.connection;\n            return self.executeQuery(queryText);\n          } catch (err) {\n            if (err.code === self.CANCELED) {\n              err.sqlectronError = 'CANCELED_BY_USER';\n            }\n            throw err;\n          }\n        });\n      },\n      cancel() {\n        if (!queryConnection) {\n          throw new Error('Query not ready to be canceled');\n        }\n        queryConnection.interrupt();\n      }\n    });\n  }\n\n  async executeQuery(queryText: string) {\n    const result = await this.driverExecuteQuery({\n      query: queryText,\n      multiple: true\n    });\n    return result.map(this.parseRowQueryResult);\n  }\n\n  getConnectionType() {\n    return Promise.resolve('local');\n  }\n\n  /**\n   * Inserts a record into a table. If values is an empty object, will insert\n   * an empty row\n   */\n  async insert(\n    table: string,\n    rows: Array<{ [string]: any }>\n  ): Promise<{ timing: number }> {\n    const tableColumns = await this.getTableColumnNames(table);\n    const rowSqls = rows.map(row => {\n      const rowData = tableColumns.map(\n        key => (row[key] ? `'${row[key]}'` : 'NULL')\n      );\n      return `(${rowData.join(', ')})`;\n    });\n    const query = `\n     INSERT INTO ${table} (${tableColumns.join(', ')})\n     VALUES\n     ${rowSqls.join(',\\n')};\n    `;\n    return this.driverExecuteQuery({ query }).then(res => res.data);\n  }\n\n  /**\n   * Each item in records will update new values in changes\n   * @param changes - Object contaning column:newValue pairs\n   * @param rowPrimaryKey - The row's (record's) identifier\n   */\n  async update(\n    table: string,\n    records: Array<{\n      rowPrimaryKeyValue: string,\n      changes: { [string]: any }\n    }>\n  ): Promise<{ timing: number }> {\n    const tablePrimaryKey = await this.getPrimaryKeyColumn(table);\n    const queries = records.map(record => {\n      const columnNames = Object.keys(record.changes);\n      const edits = columnNames.map(\n        columnName => `${columnName} = '${record.changes[columnName]}'`\n      );\n      return `\n        UPDATE ${table}\n        SET ${edits.join(', ')}\n        WHERE ${tablePrimaryKey.name} = ${record.rowPrimaryKeyValue};\n    `;\n    });\n    const finalQuery = queries.join('\\n');\n    return this.driverExecuteQuery({ query: finalQuery }).then(res => res.data);\n  }\n\n  getGraphQLServerPort() {\n    return this.graphQLServerPort;\n  }\n\n  async startGraphQLServer(): Promise<void> {\n    const [a, b, c] = await Promise.all([\n      import('express-graphql'),\n      import('tuql'),\n      import('express')\n    ]);\n    const { default: graphqlHTTP } = a;\n    const { buildSchemaFromDatabase } = b;\n    const { default: express } = c;\n\n    if (this.graphQLServerIsRunning()) {\n      return;\n    }\n\n    const app = express();\n    const schema = await buildSchemaFromDatabase(\n      this.connection.dbConfig.database\n    );\n    const port = await getPort();\n    app.use('/graphql', cors(), graphqlHTTP({ schema }));\n\n    await new Promise(resolve => {\n      this.graphQLServer = app.listen(port, () => {\n        this.graphQLServerPort = port;\n        console.log(` > Running at http://localhost:${port}/graphql`);\n        resolve();\n      });\n      this.privateGraphQLServerIsRunning = true;\n    });\n  }\n\n  async stopGraphQLServer(): Promise<void> {\n    if (this.graphQLServerIsRunning()) {\n      this.graphQLServer.close();\n      this.graphQLServer = undefined;\n      this.graphQLServerPort = undefined;\n      this.privateGraphQLServerIsRunning = false;\n    }\n  }\n\n  graphQLServerIsRunning() {\n    return this.privateGraphQLServerIsRunning;\n  }\n\n  /**\n   * Deletes records from a table. Finds table's primary key then deletes\n   * specified columns\n   */\n  async delete(\n    table: string,\n    keys: Array<string | number>\n  ): Promise<{ timing: number }> {\n    const primaryKey = await this.getPrimaryKeyColumn(table);\n    const conditions = keys.map(key => `${primaryKey.name} = \"${key}\"`);\n    const query = `\n      DELETE FROM ${table}\n      WHERE ${conditions.join(' OR ')}\n    `;\n    const results = await this.driverExecuteQuery({ query }).then(\n      res => res.data\n    );\n    return results;\n  }\n\n  getVersion(): Promise<number | string> {\n    return this.driverExecuteQuery({ query: 'SELECT sqlite_version()' }).then(\n      res => res.data[0]['sqlite_version()']\n    );\n  }\n\n  /**\n   * Gets data about columns (properties) in a table\n   */\n  async getTableColumns(\n    table: string,\n    raw: boolean = false\n  ): Promise<Array<tableKeyType>> {\n    const sql = `PRAGMA table_info(${table})`;\n    const rawResults = this.driverExecuteQuery({ query: sql }).then(\n      res => res.data\n    );\n    return raw ? rawResults : rawResults.then(res => res);\n  }\n\n  async getPrimaryKeyColumn(table: string): Promise<tableKeyType> {\n    const columns = await this.getTableColumns(table);\n    const primaryKeyColumn = columns.find(key => key.pk === 1);\n    if (!primaryKeyColumn) {\n      throw new Error(`No primary key exists in table ${table}`);\n    }\n    return primaryKeyColumn;\n  }\n\n  async getTableValues(table: string) {\n    const sql = `\n      SELECT *\n      FROM '${table}';\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  async getTableNames() {\n    const sql = `\n      SELECT name\n      FROM sqlite_master\n      WHERE type='table'\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res =>\n      res.data.map(table => table.name)\n    );\n  }\n\n  /**\n   * Renames a table in the database\n   */\n  async renameTable(oldTableName: string, newTableName: string) {\n    const sql = `\n      ALTER TABLE ${oldTableName}\n        RENAME TO ${newTableName};\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  /**\n   * Drops a table from the database\n   */\n  async dropTable(table: string) {\n    const sql = `\n      DROP TABLE ${table};\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  /**\n   * Adds a column to the table\n   */\n  async addTableColumn(table: string, columnName: string, columnType: string) {\n    const sql = `\n    ALTER TABLE ${table}\n      ADD COLUMN \"${columnName}\" ${columnType};\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  async renameTableColumns(\n    table: string,\n    columns: Array<{ oldColumnName: string, newColumnName: string }>\n  ) {\n    // Used to make verify that each columns actually exist within the table\n    const originalColumns = await this.getTableColumnNames(table);\n    columns.forEach(column => {\n      if (!originalColumns.includes(column.oldColumnName)) {\n        throw new Error(`${column.oldColumnName} is not a column in ${table}`);\n      }\n    });\n\n    const propertiesArr = await this.getTablePropertiesSql(table);\n    let sql = `\n    PRAGMA foreign_keys=off;\n    BEGIN TRANSACTION;\n    ALTER TABLE ${table} RENAME TO ${table}_temp;\n\n\n    CREATE TABLE ${table} (${propertiesArr.join()}\n    );\n\n    INSERT INTO ${table} (${originalColumns.join(', ')})\n      SELECT ${originalColumns.join(', ')}\n      FROM ${table}_temp;\n\n    DROP TABLE ${table}_temp;\n\n    COMMIT;\n    PRAGMA foreign_keys=on;`;\n\n    // @TODO: Can probably make this more efficient\n    columns.forEach(column => {\n      sql = sql.replace(column.oldColumnName, column.newColumnName);\n    });\n\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  /**\n   * Drops columns from a table. Does this by creating a new table then\n   * importing the data from the original and ignorng columnsToDrop\n   * @param {*} table the table to drop columns from\n   * @param {*} columnsToDrop array of columns which client wants to drop\n   */\n  async dropTableColumns(table: string, columnsToDrop: Array<string>) {\n    const temp = await this.getTableColumnNames(table);\n\n    columnsToDrop.forEach(e => {\n      if (!temp.includes(e)) {\n        throw new Error(`${e} is not a column in ${table}`);\n      }\n    });\n\n    const permittedColumns = temp.filter(col => !columnsToDrop.includes(col));\n    // Create an sql statement that creates a new table excluding dropped columns\n    const propertiesArr = await this.getTablePropertiesSql(table);\n    const filteredPropertiesArr = propertiesArr.filter(\n      row =>\n        !columnsToDrop.includes(\n          row.substring(row.indexOf('\"') + 1, row.lastIndexOf('\"'))\n        )\n    );\n    const sql = `\n    PRAGMA foreign_keys=off;\n    BEGIN TRANSACTION;\n    ALTER TABLE ${table} RENAME TO ${table}_temp;\n\n\n    CREATE TABLE ${table} (${filteredPropertiesArr.join()}\n    );\n\n    INSERT INTO ${table} (${permittedColumns.join(', ')})\n      SELECT ${permittedColumns.join(', ')}\n      FROM ${table}_temp;\n\n    DROP TABLE ${table}_temp;\n\n    COMMIT;\n    PRAGMA foreign_keys=on;`;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  /**\n   * Returns the sql statement to generate this table. Returns it in a uniform\n   * format\n   * Format - after \"(\", each column creation and foreign key constraint\n   * will be in its own line\n   */\n  async getCreateTableSql(table: string): Promise<string> {\n    const createTableArgs = await this.getTablePropertiesSql(table);\n    return `CREATE TABLE ${table} (${createTableArgs.join()})`;\n  }\n\n  /**\n   * Used to get the arguments within a CREATE TABLE table(...)\n   * in a format such that getCreateTableSql() and dropTable() can\n   */\n  async getTablePropertiesSql(table: string): Promise<Array<String>> {\n    const sql = `\n      SELECT sql\n      FROM sqlite_master\n      WHERE name='${table}';\n    `;\n    const creationScript = await this.driverExecuteQuery({\n      query: sql\n    }).then(res => res.data[0].sql.trim());\n\n    // Gets all the text between '(' and ')' of script\n    const betweenParaentheses = creationScript\n      .substring(creationScript.indexOf('(') + 1)\n      .replace(/\\)$/, '')\n      .split(',');\n\n    // Formats each argument to start on a new line with no extra white space\n    // and wraps the column name in an \"<identifier>\" format. Does not\n    // wrap constraints\n    return betweenParaentheses.map(\n      row =>\n        `\\n\\t${\n          row.includes('PRIMARY') || row.includes('FOREIGN')\n            ? row\n                .trim()\n                .replace(/\\r|\\n|/g, '')\n                .replace(/\\s{2,}/g, ' ')\n            : row\n                .trim()\n                .replace(/\\r|\\n|/g, '')\n                .replace(/\\s{2,}/g, ' ')\n                .replace(/\\[|\\]|\"|'/g, '')\n                .replace(/\\[\\w+\\]|\"\\w+\"|'\\w+'|\\w+/, '\"$&\"')\n        }`\n    );\n  }\n\n  async listTables() {\n    const sql = `\n      SELECT name\n      FROM sqlite_master\n      WHERE type='table'\n      ORDER BY name\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  async listViews() {\n    const sql = `\n      SELECT name\n      FROM sqlite_master\n      WHERE type = 'view'\n    `;\n    return this.driverExecuteQuery({ query: sql }).then(res => res.data);\n  }\n\n  // @NOT_SUPPORTED\n  listRoutines() {\n    return Promise.resolve([]);\n  }\n\n  async getTableColumnNames(table: string) {\n    this.checkIsConnected();\n    const columns = await this.listTableColumns(table);\n    return columns.map(column => column.columnName);\n  }\n\n  // @TODO: Find out how this is different from getTableColumns(table)\n  async listTableColumns(table: string) {\n    const sql = `PRAGMA table_info(${table})`;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => ({\n      columnName: row.name,\n      dataType: row.type\n    }));\n  }\n\n  async listTableTriggers(table: string) {\n    const sql = `\n      SELECT name\n      FROM sqlite_master\n      WHERE type = 'trigger'\n        AND tbl_name = '${table}'\n    `;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => row.name);\n  }\n\n  async listTableIndexes(table: string) {\n    const sql = `PRAGMA INDEX_LIST('${table}')`;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => row.name);\n  }\n\n  // @NOT_SUPPORTED\n  listSchemas() {\n    return Promise.resolve([]);\n  }\n\n  async listDatabases() {\n    const result = await this.driverExecuteQuery({\n      query: 'PRAGMA database_list;'\n    });\n\n    if (!result) {\n      throw new Error('No results');\n    }\n\n    return result.data.map(row => row.file || ':memory:');\n  }\n\n  // @TODO\n  getTableReferences() {\n    return Promise.resolve([]);\n  }\n\n  async getTableCreateScript(table: string) {\n    const sql = `\n      SELECT sql\n      FROM sqlite_master\n      WHERE name = '${table}';\n    `;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => row.sql);\n  }\n\n  async getViewCreateScript(view) {\n    const sql = `\n      SELECT sql\n      FROM sqlite_master\n      WHERE name = '${view}';\n    `;\n    const { data } = await this.driverExecuteQuery({ query: sql });\n\n    return data.map(row => row.sql);\n  }\n\n  // @NOT_SUPPORTED\n  async getRoutineCreateScript() {\n    return '';\n  }\n\n  /**\n   * SQLITE is a local file in there's no concept of being 'online'. Or\n   * are we online when we can verify that the path to the sqlite database\n   * exists?\n   */\n  isOnline() {\n    return Promise.resolve(true);\n  }\n\n  truncateTable(table: string): Promise<void> {\n    return this.runWithConnection(async () => {\n      const truncateSingleQuery = `DELETE FROM ${table}`;\n\n      // @TODO: Check if sqlite_sequence exists then execute:\n      //        DELETE FROM sqlite_sequence WHERE name='${table}';\n      const result = await this.driverExecuteQuery({\n        query: truncateSingleQuery\n      });\n      return result;\n    });\n  }\n\n  truncateAllTables(): Promise<void> {\n    return this.runWithConnection(async () => {\n      const tables: Array<{ name: string }> = await this.listTables();\n\n      const truncateAllQuery = tables\n        .map(\n          table => `\n          DELETE FROM ${table.name};\n        `\n        )\n        .join('');\n\n      // @TODO: Check if sqlite_sequence exists then execute:\n      //        DELETE FROM sqlite_sequence WHERE name='${table}';\n      const result = await this.driverExecuteQuery({ query: truncateAllQuery });\n      return result;\n    });\n  }\n\n  parseRowQueryResult({ data, statement, changes }): queryResponseType {\n    // Fallback in case the identifier could not reconize the command\n    const isSelect = Array.isArray(data);\n    const rows = data || [];\n\n    return {\n      rows,\n      command: statement.type || (isSelect && 'SELECT'),\n      fields: Object.keys(rows[0] || {}).map(name => ({ name })),\n      rowCount: rows.length,\n      affectedRows: changes || 0\n    };\n  }\n\n  identifyCommands(queryText) {\n    try {\n      return identify(queryText, { strict: false });\n    } catch (err) {\n      return [];\n    }\n  }\n\n  /**\n   * 1. Various methods use driverExecutQuery to execute sql statements.\n   * 2. driverExecuteQuery creates identifyStatementsRunQuery() which uses\n   * the also created runQuery()\n   * 3. driverExecuteQuery calls runWithConnection(identifyStatementsRunQuery)\n   * 4. runWithConnection creates a node-sqlite3 db object which uses identifyStatementsRunQuery\n   * to executes the sql statement and runQuery is given to node-sqlite3 to\n   * return the results of the query\n   * @private\n   */\n  async driverExecuteQuery(queryArgs: queryArgsType): Promise<Object> {\n    const runQuery = (connection: connectionType, { executionType, text }) =>\n      new Promise((resolve, reject) => {\n        const method = this.resolveExecutionType(executionType);\n        // Callback used by node-sqlite3 to return results of query\n        function queryCallback(err?: Error, data?: Object) {\n          if (err) {\n            return reject(err);\n          }\n          return resolve({\n            data,\n            lastID: this.lastID,\n            changes: this.changes\n          });\n        }\n\n        switch (method) {\n          case 'run': {\n            return connection.run(text, queryArgs.params || [], queryCallback);\n          }\n          case 'all': {\n            return connection.all(text, queryArgs.params || [], queryCallback);\n          }\n          default: {\n            throw new Error(`Unknown connection method \"${method}\"`);\n          }\n        }\n      });\n\n    // Called in runWithConnection. connection is the node-sqlite3 db object\n    const identifyStatementsRunQuery = async (connection: connectionType) => {\n      const statements = this.identifyCommands(queryArgs.query);\n      const results = statements.map(statement =>\n        runQuery(connection, statement).then(result => ({\n          ...result,\n          statement\n        }))\n      );\n\n      return queryArgs.multiple\n        ? Promise.all(results)\n        : Promise.resolve(results[0]);\n    };\n\n    return this.connection.connection\n      ? await identifyStatementsRunQuery(this.connection.connection)\n      : this.runWithConnection(identifyStatementsRunQuery);\n  }\n\n  runWithConnection(run: () => Promise<Array<Object>>): Promise<void> {\n    return new Promise((resolve, reject) => {\n      sqlite3.verbose();\n\n      const db = new sqlite3.Database(\n        this.connection.dbConfig.database,\n        async err => {\n          if (err) {\n            return reject(err);\n          }\n\n          db.on('trace', (query, duration) => {\n            this.logs.push({\n              query,\n              duration: duration || 0,\n              type: 'trace'\n            });\n          });\n          db.on('profile', (query, duration) => {\n            this.logs.push({\n              query,\n              duration: duration || 0,\n              type: 'profile'\n            });\n          });\n\n          try {\n            db.serialize();\n            return resolve(run(db));\n          } catch (runErr) {\n            reject(runErr);\n          } finally {\n            db.close();\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  resolveExecutionType(executionType: string): 'run' | 'all' {\n    switch (executionType) {\n      case 'MODIFICATION':\n        return 'run';\n      default:\n        return 'all';\n    }\n  }\n\n  /**\n   * @private\n   */\n  checkUnsupported(exportOptions: exportOptionsType) {\n    const unsupportedOptions = ['views', 'procedures', 'functions', 'rows'];\n    const hasUnsupported = Object.keys(exportOptions).some(option =>\n      unsupportedOptions.includes(option)\n    );\n\n    if (hasUnsupported) {\n      throw new Error(\n        `Unsupported properties passed: ${JSON.stringify(exportOptions)}`\n      );\n    }\n  }\n}\n\nfunction configDatabase(server, database) {\n  return {\n    database: database.database\n  };\n}\n\nasync function SqliteFactory(\n  server: serverType,\n  database: databaseType\n): FactoryType {\n  const logger = createLogger('db:clients:sqlite');\n  const dbConfig = configDatabase(server, database);\n  const connection = { dbConfig };\n  logger().debug('create driver client for sqlite3 with config %j', dbConfig);\n\n  const provider = new SqliteProvider(server, database, connection);\n\n  // Light solution to test connection with with the server\n  await provider.driverExecuteQuery({ query: 'SELECT sqlite_version()' });\n\n  return provider;\n}\n\nexport default SqliteFactory;\n"]}