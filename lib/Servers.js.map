{"version":3,"sources":["../src/Servers.js"],"names":["result","config","get","servers","getAll","server","srv","data","newId","v4","id","push","save","add","index","findServerIndexById","slice","update","findIndex","Error","removeById","addOrUpdate","hasId","String","length"],"mappings":";;;;;;;;;;+BASO,aAAwB;AAC7B,UAAMA,SAAS,MAAMC,OAAOC,GAAP,EAArB;AACA,WAAOF,OAAOG,OAAd;AACD,G;;kBAHqBC,M;;;;;;gCAKf,WAAmBC,MAAnB,EAAuC;AAC5C,UAAMC,mBAAWD,MAAX,CAAN;AACA,UAAM,sBAASC,GAAT,CAAN;;AAEA,UAAMC,OAAO,MAAMN,OAAOC,GAAP,EAAnB;AACA,UAAMM,QAAQ,eAAKC,EAAL,EAAd;AACA,kCAAiBF,KAAKJ,OAAtB,EAA+BK,KAA/B;;AAEAF,QAAII,EAAJ,GAASF,KAAT;AACAD,SAAKJ,OAAL,CAAaQ,IAAb,CAAkBL,GAAlB;AACA,UAAML,OAAOW,IAAP,CAAYL,IAAZ,CAAN;;AAEA,WAAOD,GAAP;AACD,G;;kBAbqBO,G;;;;;;gCAef,WAAsBR,MAAtB,EAA0C;AAC/C,UAAM,sBAASA,MAAT,CAAN;;AAEA,UAAME,OAAO,MAAMN,OAAOC,GAAP,EAAnB;AACA,kCAAiBK,KAAKJ,OAAtB,EAA+BE,OAAOK,EAAtC;;AAEA,UAAMI,QAAQ,MAAMC,oBAAoBV,OAAOK,EAA3B,CAApB;AACAH,SAAKJ,OAAL,GAAe,CACb,GAAGI,KAAKJ,OAAL,CAAaa,KAAb,CAAmB,CAAnB,EAAsBF,KAAtB,CADU,EAEbT,MAFa,EAGb,GAAGE,KAAKJ,OAAL,CAAaa,KAAb,CAAmBF,QAAQ,CAA3B,CAHU,CAAf;;AAMA,UAAMb,OAAOW,IAAP,CAAYL,IAAZ,CAAN;;AAEA,WAAOF,MAAP;AACD,G;;kBAhBqBY,M;;;;;;gCAwBtB,WAAmCP,EAAnC,EAA+C;AAC7C,UAAMH,OAAO,MAAMN,OAAOC,GAAP,EAAnB;AACA,UAAMY,QAAQP,KAAKJ,OAAL,CAAae,SAAb,CAAuB;AAAA,aAAOZ,IAAII,EAAJ,KAAWA,EAAlB;AAAA,KAAvB,CAAd;;AAEA,QAAII,QAAQ,CAAZ,EAAe;AACb,YAAM,IAAIK,KAAJ,CAAW,sBAAqBT,EAAG,kBAAnC,CAAN;AACD;;AAED,WAAOI,KAAP;AACD,G;;kBATcC,mB;;;;;;gCAWR,WAA0BL,EAA1B,EAAsC;AAC3C,UAAMI,QAAQ,MAAMC,oBAAoBL,EAApB,CAApB;AACA,UAAMH,OAAO,MAAMN,OAAOC,GAAP,EAAnB;;AAEAK,SAAKJ,OAAL,GAAe,CACb,GAAGI,KAAKJ,OAAL,CAAaa,KAAb,CAAmB,CAAnB,EAAsBF,KAAtB,CADU,EAEb,GAAGP,KAAKJ,OAAL,CAAaa,KAAb,CAAmBF,QAAQ,CAA3B,CAFU,CAAf;;AAKA,WAAOb,OAAOW,IAAP,CAAYL,IAAZ,CAAP;AACD,G;;kBAVqBa,U;;;;;QAjBNC,W,GAAAA,W;;AA9ChB;;;;AACA;;AACA;;IAAYpB,M;;;;;;;;AA4CL,SAASoB,WAAT,CAAqBhB,MAArB,EAAyC;AAC9C,QAAMiB,QAAQ,CAAC,EAAEjB,OAAOK,EAAP,IAAaa,OAAOlB,OAAOK,EAAd,EAAkBc,MAAjC,CAAf;AACA;AACA,SAAOF,QAAQL,OAAOZ,MAAP,CAAR,GAAyBQ,IAAIR,MAAJ,CAAhC;AACD","file":"Servers.js","sourcesContent":["// @flow\nimport uuid from 'uuid';\nimport { validate, validateUniqueId } from './validators/Server';\nimport * as config from './Config';\n\ntype serverType = {\n  id: string\n};\n\nexport async function getAll() {\n  const result = await config.get();\n  return result.servers;\n}\n\nexport async function add(server: serverType) {\n  const srv = { ...server };\n  await validate(srv);\n\n  const data = await config.get();\n  const newId = uuid.v4();\n  validateUniqueId(data.servers, newId);\n\n  srv.id = newId;\n  data.servers.push(srv);\n  await config.save(data);\n\n  return srv;\n}\n\nexport async function update(server: serverType) {\n  await validate(server);\n\n  const data = await config.get();\n  validateUniqueId(data.servers, server.id);\n\n  const index = await findServerIndexById(server.id);\n  data.servers = [\n    ...data.servers.slice(0, index),\n    server,\n    ...data.servers.slice(index + 1)\n  ];\n\n  await config.save(data);\n\n  return server;\n}\n\nexport function addOrUpdate(server: serverType) {\n  const hasId = !!(server.id && String(server.id).length);\n  // TODO: Add validation to check if the current id is a valid uuid\n  return hasId ? update(server) : add(server);\n}\n\nasync function findServerIndexById(id: string) {\n  const data = await config.get();\n  const index = data.servers.findIndex(srv => srv.id === id);\n\n  if (index < 0) {\n    throw new Error(`Server with id of \"${id}\" does not exist`);\n  }\n\n  return index;\n}\n\nexport async function removeById(id: string) {\n  const index = await findServerIndexById(id);\n  const data = await config.get();\n\n  data.servers = [\n    ...data.servers.slice(0, index),\n    ...data.servers.slice(index + 1)\n  ];\n\n  return config.save(data);\n}\n"]}