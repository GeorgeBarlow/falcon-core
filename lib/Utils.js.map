{"version":3,"sources":["../src/Utils.js"],"names":["homedir","getConfigPath","fileExists","fileExistsSync","writeFile","writeJSONFile","writeJSONFileSync","resolveHomePathToAbsolute","readFile","readJSONFile","readJSONFileSync","getPort","createCancelablePromise","process","env","platform","NODE_ENV","join","__dirname","filename","Promise","resolve","stat","err","stats","isFile","statSync","e","data","reject","JSON","stringify","writeFileSync","test","substring","filePath","toString","then","parse","readFileSync","enconding","host","port","wait","time","setTimeout","error","timeIdle","canceled","discarded","Error","message","Object","getOwnPropertyNames","forEach","key","cancel","discard"],"mappings":"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","file":"Utils.js","sourcesContent":["// @flow\nimport fs from 'fs';\nimport path from 'path';\nimport pf from 'portfinder';\n\nexport function homedir() {\n  return (\n    process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || 'HOME'\n  );\n}\n\nexport function getConfigPath() {\n  return process.env.NODE_ENV === 'test'\n    ? path.join(__dirname, '..', 'test', 'fixtures', '.tmp.sqlectron.json')\n    : path.join(homedir(), '.sqlectron.json');\n}\n\nexport function fileExists(filename: string) {\n  return new Promise((resolve) => {\n    fs.stat(filename, (err, stats) => {\n      if (err) return resolve(false);\n      return resolve(stats.isFile());\n    });\n  });\n}\n\nexport function fileExistsSync(filename: string) {\n  try {\n    return fs.statSync(filename).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function writeFile(filename: string, data: string) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(filename, data, (err) => {\n      if (err) return reject(err);\n      return resolve();\n    });\n  });\n}\n\nexport function writeJSONFile(filename: string, data: Object) {\n  return writeFile(filename, JSON.stringify(data, null, 2));\n}\n\nexport function writeJSONFileSync(filename: string, data: Object) {\n  return fs.writeFileSync(filename, JSON.stringify(data, null, 2));\n}\n\nexport function resolveHomePathToAbsolute(filename: string) {\n  if (!/^~\\//.test(filename)) {\n    return filename;\n  }\n\n  return path.join(homedir(), filename.substring(2));\n}\n\nexport function readFile(filename: string) {\n  const filePath = resolveHomePathToAbsolute(filename);\n  return new Promise((resolve, reject) => {\n    fs.readFile(path.resolve(filePath), (err, data) => {\n      if (err) return reject(err);\n      return resolve(data.toString());\n    });\n  });\n}\n\nexport function readJSONFile(filename: string) {\n  return readFile(filename).then(data => JSON.parse(data));\n}\n\nexport function readJSONFileSync(filename: string) {\n  const filePath = resolveHomePathToAbsolute(filename);\n  const data = fs.readFileSync(path.resolve(filePath), { enconding: 'utf-8' });\n  return JSON.parse(data.toString());\n}\n\nexport function getPort() {\n  return new Promise((resolve, reject) => {\n    pf.getPort({ host: 'localhost' }, (err, port) => {\n      if (err) return reject(err);\n      return resolve(port);\n    });\n  });\n}\n\nconst wait = time => new Promise(resolve => setTimeout(resolve, time));\n\nexport function createCancelablePromise(error: Error, timeIdle: number = 100) {\n  let canceled = false;\n  let discarded = false;\n\n  return {\n    async wait() {\n      while (!canceled && !discarded) {\n        await wait(timeIdle);\n      }\n\n      if (canceled) {\n        const err = new Error(error.message || 'Promise canceled.');\n\n        Object.getOwnPropertyNames(error).forEach(key => (err[key] = error[key]));\n\n        throw new Error(err);\n      }\n    },\n    cancel() {\n      canceled = true;\n    },\n    discard() {\n      discarded = true;\n    }\n  };\n}\n"]}