{"version":3,"sources":["../../src/connections/Connections.js"],"names":["FinalStore","process","env","NODE_ENV","require","Connections","store","defaults","connections","validateBeforeCreation","connection","type","Error","create","getAll","push","set","delete","connectionId","filteredConnections","filter","id","deleteAll","update","connectionToUpdateIndex","find","conn","get","connectionIndex","findIndex"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;AAHA;;;AA0BA;AACA;AACA;AACA,MAAMA,aAAaC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GACfC,QAAQ,MAAR,CADe,CACC;AADD,yBAAnB;;AAIe,MAAMC,WAAN,CAAkB;AAAA;AAAA,SAC/BC,KAD+B,GACvB,IAAIN,UAAJ,CAAe;AACrBO,gBAAU;AACRC,qBAAa;AADL;AADW,KAAf,CADuB;AAAA;;AAOzBC,wBAAN,CAA6BC,UAA7B,EAA4F;AAAA;AAC1F,cAAQA,WAAWC,IAAnB;AACE,aAAK,QAAL;AAAe;AACb;AACA;AACA,mBAAO,EAAP;AACD;AACD;AAAS;AACP,kBAAM,IAAIC,KAAJ,CAAW,0BAAyBF,WAAWC,IAAK,4CAApD,CAAN;AACD;AARH;AAD0F;AAW3F;;AAEKE,QAAN,CAAaH,UAAb,EAAyC;AAAA;;AAAA;AACvC,YAAMF,cAAc,MAAM,MAAKM,MAAL,EAA1B;AACAN,kBAAYO,IAAZ,CAAiBL,UAAjB;AACA,YAAKJ,KAAL,CAAWU,GAAX,CAAe,aAAf,EAA8BR,WAA9B;AAHuC;AAIxC;;AAEKS,QAAN,CAAaC,YAAb,EAAmC;AAAA;;AAAA;AACjC,YAAMV,cAAc,MAAM,OAAKM,MAAL,EAA1B;AACA,YAAMK,sBACJX,YAAYY,MAAZ,CAAmB;AAAA,eAAcV,WAAWW,EAAX,KAAkBH,YAAhC;AAAA,OAAnB,CADF;AAEA,aAAKZ,KAAL,CAAWU,GAAX,CAAe,aAAf,EAA8BG,mBAA9B;AAJiC;AAKlC;;AAEKG,WAAN,GAAkB;AAAA;;AAAA;AAChB,YAAM,OAAKhB,KAAL,CAAWU,GAAX,CAAe,aAAf,EAA8B,EAA9B,CAAN;AADgB;AAEjB;;AAED;;;AAGMO,QAAN,CAAaL,YAAb,EAAmCR,UAAnC,EAA8E;AAAA;;AAAA;AAC5E,YAAMF,cAAc,MAAM,OAAKM,MAAL,EAA1B;AACA,YAAMU,0BACJhB,YAAYiB,IAAZ,CAAiB;AAAA,eAAQC,KAAKL,EAAL,KAAYH,YAApB;AAAA,OAAjB,CADF;;AAGA,cAAQM,uBAAR;AACE,aAAK,CAAC,CAAN;AAAS;AACP,kBAAM,IAAIZ,KAAJ,CAAW,uBAAsBM,YAAa,aAA9C,CAAN;AACD;AACD;AAAS;AACPV,wBAAYgB,uBAAZ,IAAuCd,UAAvC;AACD;AANH;;AASA,aAAKJ,KAAL,CAAWU,GAAX,CAAe,aAAf,EAA8BR,WAA9B;AAd4E;AAe7E;;AAEKM,QAAN,GAA+C;AAAA;;AAAA;AAC7C,aAAO,OAAKR,KAAL,CAAWqB,GAAX,CAAe,aAAf,CAAP;AAD6C;AAE9C;;AAEKA,KAAN,CAAUT,YAAV,EAAyD;AAAA;;AAAA;AACvD,YAAMV,cAAc,MAAM,OAAKM,MAAL,EAA1B;AACA,YAAMc,kBACJpB,YAAYqB,SAAZ,CAAsB;AAAA,eAAQH,KAAKL,EAAL,KAAYH,YAApB;AAAA,OAAtB,CADF;;AAGA,cAAQU,eAAR;AACE,aAAK,CAAC,CAAN;AAAS;AACP,kBAAM,IAAIhB,KAAJ,CAAW,uBAAsBM,YAAa,aAA9C,CAAN;AACD;AACD;AAAS;AACP,mBAAOV,YAAYoB,eAAZ,CAAP;AACD;AANH;AALuD;AAaxD;AA1E8B;kBAAZvB,W","file":"Connections.js","sourcesContent":["// @flow\n// Manage saved connections to databases. Encrypts passwords\nimport keytar from 'keytar';\nimport Store from 'electron-store';\nimport validator from 'validator';\n\ntype connectionValidationType = {\n  message: string,\n  passed: bool\n};\n\ntype connectionType = {\n  id: string,\n  name: string,\n  password: string,\n  type: 'sqlite' | 'mysql' | 'postgres' | 'mssql',\n  // These are properties that are specific to certain databases.\n  // The pervious properties are required for all databases\n  meta?: {\n    database?: string,\n    port?: number,\n    host?: string,\n    username?: string,\n    [otherKeys: string]: string\n  }\n};\n\n// We can't import electron in jest so electron-store won't work.\n// We need to use 'conf' as a drop-in replacement for electron-store\n// in the testing environment\nconst FinalStore = process.env.NODE_ENV === 'test'\n  ? require('conf') // eslint-disable-line\n  : Store;\n\nexport default class Connections {\n  store = new FinalStore({\n    defaults: {\n      connections: []\n    }\n  });\n\n  async validateBeforeCreation(connection: connectionType): Promise<connectionValidationType> {\n    switch (connection.type) {\n      case 'sqlite': {\n        // connection is require and is a string\n        // database is required and is a string\n        return [];\n      }\n      default: {\n        throw new Error(`Unknown database type \"${connection.type}\". This probably means it is not supported`);\n      }\n    }\n  }\n\n  async create(connection: connectionType) {\n    const connections = await this.getAll();\n    connections.push(connection);\n    this.store.set('connections', connections);\n  }\n\n  async delete(connectionId: string) {\n    const connections = await this.getAll();\n    const filteredConnections =\n      connections.filter(connection => connection.id !== connectionId);\n    this.store.set('connections', filteredConnections);\n  }\n\n  async deleteAll() {\n    await this.store.set('connections', []);\n  }\n\n  /**\n   * Update a connection by giving a new config\n   */\n  async update(connectionId: string, connection: connectionType): Promise<void> {\n    const connections = await this.getAll();\n    const connectionToUpdateIndex =\n      connections.find(conn => conn.id === connectionId);\n\n    switch (connectionToUpdateIndex) {\n      case -1: {\n        throw new Error(`Connection with id \"${connectionId}\" not found`);\n      }\n      default: {\n        connections[connectionToUpdateIndex] = connection;\n      }\n    }\n\n    this.store.set('connections', connections);\n  }\n\n  async getAll(): Promise<Array<connectionType>> {\n    return this.store.get('connections');\n  }\n\n  async get(connectionId: string): Promise<connectionType> {\n    const connections = await this.getAll();\n    const connectionIndex =\n      connections.findIndex(conn => conn.id === connectionId);\n\n    switch (connectionIndex) {\n      case -1: {\n        throw new Error(`Connection with id \"${connectionId}\" not found`);\n      }\n      default: {\n        return connections[connectionIndex];\n      }\n    }\n  }\n}\n"]}