{"version":3,"sources":["../../src/connections/Connections.js"],"names":["FinalStore","process","env","NODE_ENV","require","Connections","store","defaults","connections","validateBeforeCreation","connection","type","default","sqliteConnectionValidation","Error","create","validation","errorMessages","length","getAll","push","set","delete","connectionId","filteredConnections","filter","id","deleteAll","update","connectionToUpdateIndex","findIndex","conn","get","connectionIndex"],"mappings":"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","file":"Connections.js","sourcesContent":["// @flow\n// Manage saved connections to databases. Encrypts passwords\nimport Store from 'electron-store';\nimport { connect } from 'tls';\n\nexport type connectionValidationType = {\n  errorMessages: Array<{\n    fieldName: string,\n    message: string\n  }>,\n  passed: bool\n};\n\nexport type connectionType = {\n  // The internal id for the connection\n  id: string,\n  // The name of the connection\n  name: string,\n  // The color of the connection\n  color?: string | 'default',\n  // Which database the connection is for\n  type: 'sqlite' | 'mysql' | 'postgres' | 'mssql',\n  // These are properties that are specific to certain databases.\n  // The pervious properties are required for all databases\n  meta?: {\n    password?: string,\n    database?: string,\n    port?: number,\n    host?: string,\n    username?: string,\n    [otherKeys: string]: string\n  }\n};\n\n// We can't import electron in jest so electron-store won't work.\n// We need to use 'conf' as a drop-in replacement for electron-store\n// in the testing environment\nconst FinalStore = process.env.NODE_ENV === 'test'\n  ? require('conf') // eslint-disable-line\n  : Store;\n\n/**\n * This class is a general manager for falcon database connections.\n * It can be extended to fit the needs of specific databases. For\n * example, if a specific database requires encryption, the .get()\n * method can be modified\n */\nexport default class Connections {\n  /**\n   * @private\n   */\n  store = new FinalStore({\n    defaults: {\n      connections: []\n    }\n  });\n\n  /**\n   * @TODO\n   * @private\n   */\n  async validateBeforeCreation(connection: connectionType): Promise<connectionValidationType> {\n    switch (connection.type) {\n      case 'sqlite': {\n        const { default: sqliteConnectionValidation } = await import('./SqliteConnectionValidation.js');\n        return sqliteConnectionValidation(connection);\n      }\n      default: {\n        throw new Error(`Unknown database type \"${connection.type}\". This probably means it is not supported`);\n      }\n    }\n  }\n\n  async create(connection: connectionType): Promise<connectionValidationType | connectionType> {\n    const validation = await this.validateBeforeCreation(connection);\n    if (validation.errorMessages.length > 0) {\n      return validation;\n    }\n    const connections = await this.getAll();\n    connections.push(connection);\n    this.store.set('connections', connections);\n    return connection;\n  }\n\n  /**\n   * Delete a connection by it's id\n   */\n  async delete(connectionId: string) {\n    const connections = await this.getAll();\n    const filteredConnections =\n      connections.filter(connection => connection.id !== connectionId);\n    this.store.set('connections', filteredConnections);\n  }\n\n  async deleteAll() {\n    await this.store.set('connections', []);\n  }\n\n  /**\n   * Update a connection by giving a new config\n   */\n  async update(connectionId: string, connection: connectionType): Promise<connectionValidationType | connectionType> {\n    const connections = await this.getAll();\n    const connectionToUpdateIndex =\n      connections.findIndex(conn => conn.id === connectionId);\n\n    const validation = await this.validateBeforeCreation(connection);\n    if (validation.errorMessages.length > 0) {\n      return validation;\n    }\n\n    switch (connectionToUpdateIndex) {\n      case -1: {\n        throw new Error(`Connection with id \"${connectionId}\" not found`);\n      }\n      default: {\n        connections[connectionToUpdateIndex] = connection;\n      }\n    }\n\n    this.store.set('connections', connections);\n    return connection;\n  }\n\n  async getAll(): Promise<Array<connectionType>> {\n    return this.store.get('connections');\n  }\n\n  async get(connectionId: string): Promise<connectionType> {\n    const connections = await this.getAll();\n    const connectionIndex =\n      connections.findIndex(conn => conn.id === connectionId);\n\n    switch (connectionIndex) {\n      case -1: {\n        throw new Error(`Connection with id \"${connectionId}\" not found`);\n      }\n      default: {\n        return connections[connectionIndex];\n      }\n    }\n  }\n}\n"]}