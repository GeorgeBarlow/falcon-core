{"version":3,"sources":["../../src/formatters/SqliteFormatter.js"],"names":["sep","transform","val","fns","reduce","acc","fn","createShiftArr","space","Array","keys","i","concat","repeat","subqueryLevel","str","level","replace","length","allReplacements","tab","_","m","toUpperCase","RegExp","splitSql","r","split","splitIfEven","updateOutput","el","parensLevel","input","test","shiftArr","deep","sql","numSpaces","splitByQuotes","arr","prototype","map","len","output","originalEl","slice","Object","assign","out","trim"],"mappings":"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","file":"SqliteFormatter.js","sourcesContent":["// @flow\nconst sep = '~::~';\n\nconst transform = (val, ...fns) => {\n  return fns.reduce((acc, fn) => fn(acc), val);\n};\n\nconst createShiftArr = space => {\n  return [...Array(100).keys()].reduce(\n    (acc, i) => acc.concat(`\\n${space.repeat(i)}`),\n    []\n  );\n};\n\nconst subqueryLevel = (str, level) => {\n  return (\n    level - (str.replace(/\\(/g, '').length - str.replace(/\\)/g, '').length)\n  );\n};\n\nconst allReplacements = tab => {\n  return [\n    [/ AND /gi, sep + tab + 'AND '],\n    [/ BETWEEN /gi, sep + tab + 'BETWEEN '],\n    [/ CASE /gi, sep + tab + 'CASE '],\n    [/ ELSE /gi, sep + tab + 'ELSE '],\n    [/ END /gi, sep + tab + 'END '],\n    [/ FROM /gi, sep + 'FROM '],\n    [/ GROUP\\s+BY /gi, sep + 'GROUP BY '],\n    [/ HAVING /gi, sep + 'HAVING '],\n    [/ IN /gi, ' IN '],\n    [\n      / ((CROSS|INNER|LEFT|RIGHT) )?JOIN /gi,\n      (_, m) => (sep + (m || '') + 'JOIN ').toUpperCase()\n    ],\n    [/ ON /gi, sep + tab + 'ON '],\n    [/ OR /gi, sep + tab + 'OR '],\n    [/ ORDER\\s+BY /gi, sep + 'ORDER BY '],\n    [/ OVER /gi, sep + tab + 'OVER '],\n    [/\\(\\s*SELECT /gi, sep + '(SELECT '],\n    [/\\)\\s*SELECT /gi, ')' + sep + 'SELECT '],\n    [/ THEN /gi, ' THEN' + sep + tab],\n    [/ UNION /gi, sep + 'UNION' + sep],\n    [/ USING /gi, sep + 'USING '],\n    [/ WHEN /gi, sep + tab + 'WHEN '],\n    [/ WHERE /gi, sep + 'WHERE '],\n    [/ WITH /gi, sep + 'WITH '],\n    [/ SET /gi, sep + 'SET '],\n    [/ ALL /gi, ' ALL '],\n    [/ AS /gi, ' AS '],\n    [/ ASC /gi, ' ASC '],\n    [/ DESC /gi, ' DESC '],\n    [/ DISTINCT /gi, ' DISTINCT '],\n    [/ EXISTS /gi, ' EXISTS '],\n    [/ NOT /gi, ' NOT '],\n    [/ NULL /gi, ' NULL '],\n    [/ LIKE /gi, ' LIKE '],\n    [/\\s*SELECT /gi, 'SELECT '],\n    [/\\s*UPDATE /gi, 'UPDATE '],\n    [/\\s*DELETE /gi, 'DELETE '],\n    [new RegExp(`(${sep})+`), sep]\n  ];\n};\n\nconst splitSql = (str, tab) => {\n  return allReplacements(tab)\n    .reduce((acc, r) => {\n      return acc.replace(r[0], r[1]);\n    }, str.replace(/\\s+/g, ' '))\n    .split(sep);\n};\n\nconst splitIfEven = (i, str, tab) => {\n  return i % 2 === 0 ? splitSql(str, tab) : [str];\n};\n\nconst updateOutput = (el, parensLevel, input, i) => {\n  return /\\(\\s*SELECT/.test(el)\n    ? [`${input.str}${input.shiftArr[input.deep + 1]}${el}`, input.deep + 1]\n    : [\n        /'/.test(el)\n          ? `${input.str}${el}`\n          : `${input.str}${input.shiftArr[input.deep]}${el}`,\n        parensLevel < 1 && input.deep !== 0 ? input.deep - 1 : input.deep\n      ];\n};\n\nexport default (sql, numSpaces) => {\n  const tab = ' '.repeat(numSpaces);\n  const splitByQuotes = transform(\n    sql,\n    str => str.replace(/\\s+/g, ' '),\n    str => str.replace(/'/g, `${sep}'`),\n    str => str.split(sep)\n  );\n  const input = {\n    str: '',\n    shiftArr: createShiftArr(tab),\n    tab: tab,\n    arr: Array.prototype.concat(\n      ...[...Array(splitByQuotes.length).keys()].map(i =>\n        splitIfEven(i, splitByQuotes[i], tab)\n      )\n    ),\n    parensLevel: 0,\n    deep: 0\n  };\n\n  const len = input.arr.length;\n  const output = [...Array(len).keys()].reduce((acc, i) => {\n    const originalEl = acc.arr[i];\n    const parensLevel = subqueryLevel(originalEl, acc.parensLevel);\n    const arr = /SELECT|SET/.test(originalEl)\n      ? acc.arr\n          .slice(0, i)\n          .concat(originalEl.replace(/\\,\\s+/g, `,\\n${acc.tab}${acc.tab}`))\n          .concat(acc.arr.slice(i + 1))\n      : acc.arr;\n    const el = arr[i];\n    const [str, deep] = updateOutput(el, parensLevel, acc, i);\n    return Object.assign(acc, {\n      str,\n      arr,\n      parensLevel,\n      deep\n    });\n  }, input);\n\n  return transform(\n    output,\n    out => out.str,\n    str => str.replace(/\\s+\\n/g, '\\n'),\n    str => str.replace(/\\n+/g, '\\n'),\n    str => str.trim()\n  );\n};\n"]}