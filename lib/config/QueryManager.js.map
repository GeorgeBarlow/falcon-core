{"version":3,"sources":["../../src/config/QueryManager.js"],"names":["query","schema","object","keys","id","string","required","name","type","color","errors","validate","abortEarly","error","details","length","errorMessages","map","message","detail","fieldName","context","label","passed","validateQuery","QueryManager","itemType","validateBeforeCreation","Error"],"mappings":";;;;;;;+BAsBA,WAA6BA,KAA7B,EAA4E;AAC1E,UAAMC,SAAS,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BC,UAAI,cAAIC,MAAJ,GAAaC,QAAb,EAD2B;AAE/BC,YAAM,cAAIF,MAAJ,GAAaC,QAAb,EAFyB;AAG/BE,YAAM,cAAIH,MAAJ,GAAaC,QAAb,EAHyB;AAI/BN,aAAO,cAAIK,MAAJ,GAAaC,QAAb,EAJwB;AAK/BG,aAAO,cAAIJ,MAAJ;AALwB,KAAlB,CAAf;;AAQA,UAAMK,SAAS,cAAIC,QAAJ,CACbX,KADa,EAEbC,MAFa,EAGb;AACEW,kBAAY;AADd,KAHa,CAAf;;AAQA,QAAIF,OAAOG,KAAX,EAAkB;AAChB,UAAIH,OAAOG,KAAP,CAAaC,OAAb,CAAqBC,MAArB,GAA8B,CAAlC,EAAqC;AACnC,eAAO;AACLC,yBAAeN,OAAOG,KAAP,CAAaC,OAAb,CAAqBG,GAArB,CAAyB;AAAA,mBAAW;AACjDC,uBAASC,OAAOD,OADiC;AAEjDE,yBAAWD,OAAOE,OAAP,CAAeC;AAFuB,aAAX;AAAA,WAAzB,CADV;AAKLC,kBAAQ;AALH,SAAP;AAOD;AACF;;AAED,WAAO;AACLP,qBAAe,EADV;AAELO,cAAQ;AAFH,KAAP;AAID,G;;kBAjCcC,a;;;;;AArBf;;;;AACA;;;;;;;;AAuDe,MAAMC,YAAN,+BAAyE;AAAA;AAAA;;AAAA,wCACtFC,QADsF,GAC3E,SAD2E;AAAA;;AAGhFC,wBAAN,CAA6B3B,KAA7B,EAA4E;AAAA;;AAAA;AAC1E,cAAQA,MAAMQ,IAAd;AACE,aAAK,QAAL;AAAe;AACb,mBAAOgB,cAAcxB,KAAd,CAAP;AACD;AACD;AAAS;AACP,kBAAM,IAAI4B,KAAJ,CAAW,0BAAyB,MAAKF,QAAS,4CAAlD,CAAN;AACD;AANH;AAD0E;AAS3E;AAZqF;kBAAnED,Y","file":"QueryManager.js","sourcesContent":["// @flow\nimport BaseManager from './BaseManager';\nimport Joi from 'joi';\nimport type { itemValidationType } from './BaseManager';\nimport type { ManagerInterface } from './ManagerInterface';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\nexport type queryType = {\n  // The internal id for the query\n  id: string,\n  // The name of the query\n  name: string,\n  // The type of database which the query was created for\n  type: databasesType,\n  // The connection which the query belongs to\n  connectionId: string,\n  // The query's text\n  query: string,\n  // The optional color highlighting of the query\n  color?: string\n};\n\nasync function validateQuery(query: queryType): Promise<itemValidationType> {\n  const schema = Joi.object().keys({\n    id: Joi.string().required(),\n    name: Joi.string().required(),\n    type: Joi.string().required(),\n    query: Joi.string().required(),\n    color: Joi.string()\n  });\n\n  const errors = Joi.validate(\n    query,\n    schema,\n    {\n      abortEarly: false\n    }\n  );\n\n  if (errors.error) {\n    if (errors.error.details.length > 0) {\n      return {\n        errorMessages: errors.error.details.map(detail => ({\n          message: detail.message,\n          fieldName: detail.context.label\n        })),\n        passed: false\n      };\n    }\n  }\n\n  return {\n    errorMessages: [],\n    passed: true\n  };\n}\n\nexport default class QueryManager<T> extends BaseManager implements ManagerInterface<T> {\n  itemType = 'queries';\n\n  async validateBeforeCreation(query: queryType): Promise<itemValidationType> {\n    switch (query.type) {\n      case 'sqlite': {\n        return validateQuery(query);\n      }\n      default: {\n        throw new Error(`Unknown database type \"${this.itemType}\". This probably means it is not supported`);\n      }\n    }\n  }\n}\n"]}