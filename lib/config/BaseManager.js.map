{"version":3,"sources":["../../src/config/BaseManager.js"],"names":["FinalStore","process","env","NODE_ENV","require","BaseManager","store","defaults","connections","queries","validateBeforeCreation","item","errorMessages","passed","add","rndm","itemWithDefaults","id","color","validation","length","items","getAll","push","set","itemType","data","remove","itemId","filtereditems","filter","removeAll","update","itemToUpdateIndex","findIndex","itm","Error","get","itemIndex","conn"],"mappings":"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","file":"BaseManager.js","sourcesContent":["// @flow\n// Manage saved items to databases. Encrypts passwords\nimport Store from 'electron-store';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\ntype itemType = {\n  id: string,\n  type: databasesType,\n  [prop: string]: string,\n};\n\nexport type itemValidationType = {\n  errorMessages: Array<{\n    fieldName: string,\n    message: string\n  }>,\n  passed: bool,\n  data?: {\n    [prop: string]: any,\n  }\n};\n\n// We can't import electron in jest so electron-store won't work.\n// We need to use 'conf' as a drop-in replacement for electron-store\n// in the testing environment\nconst FinalStore = process.env.NODE_ENV === 'test'\n  ? require('conf') // eslint-disable-line\n  : Store;\n\n/**\n * This class is a general manager for falcon database items.\n * It can be extended to fit the needs of specific databases. For\n * example, if a specific database requires encryption, the .get()\n * method can be modified\n */\nexport default class BaseManager {\n  itemType: 'connections' | 'queries';\n  /**\n   * @private\n   */\n  store = new FinalStore({\n    defaults: {\n      connections: [],\n      queries: []\n    }\n  });\n\n  /**\n   * @private\n   * @abstract\n   */\n  async validateBeforeCreation(item: itemType): Promise<itemValidationType> {\n    return {\n      errorMessages: [],\n      passed: true\n    };\n  }\n\n  async add(item: itemType): Promise<itemValidationType> {\n    const rndm = await import('rndm');\n    const itemWithDefaults = {\n      id: `conn-${rndm(16)}`,\n      color: 'gray',\n      ...item\n    };\n    const validation = await this.validateBeforeCreation(itemWithDefaults);\n    if (validation.errorMessages.length > 0) {\n      return validation;\n    }\n\n    const items = await this.getAll();\n    items.push(itemWithDefaults);\n    this.store.set(this.itemType, items);\n\n    return {\n      errorMessages: [],\n      passed: true,\n      data: {\n        item: itemWithDefaults\n      }\n    };\n  }\n\n  /**\n   * Remove a item by it's id\n   */\n  async remove(itemId: string) {\n    const items = await this.getAll();\n    const filtereditems =\n      items.filter(item => item.id !== itemId);\n    this.store.set(this.itemType, filtereditems);\n  }\n\n  async removeAll() {\n    await this.store.set(this.itemType, []);\n  }\n\n  /**\n   * Update a item by giving a new config\n   */\n  async update(itemId: string, item: itemType): Promise<itemValidationType> {\n    const items = await this.getAll();\n    const itemToUpdateIndex =\n      items.findIndex(itm => itm.id === itemId);\n\n    const validation = await this.validateBeforeCreation(item);\n    if (validation.errorMessages.length > 0) {\n      return validation;\n    }\n\n    switch (itemToUpdateIndex) {\n      case -1: {\n        throw new Error(`item with id \"${itemId}\" not found`);\n      }\n      default: {\n        items[itemToUpdateIndex] = item;\n      }\n    }\n\n    this.store.set(this.itemType, items);\n\n    return {\n      errorMessages: [],\n      passed: true,\n      data: {\n        item\n      }\n    };\n  }\n\n  async getAll(): Promise<Array<itemType>> {\n    return this.store.get(this.itemType);\n  }\n\n  async get(itemId: string): Promise<itemType> {\n    const items = await this.getAll();\n    const itemIndex =\n      items.findIndex(conn => conn.id === itemId);\n\n    switch (itemIndex) {\n      case -1: {\n        throw new Error(`Item type \"${this.itemType}\" with id \"${itemId}\" not found`);\n      }\n      default: {\n        return items[itemIndex];\n      }\n    }\n  }\n}\n"]}