{"version":3,"sources":["../../src/config/ConnectionManager.js"],"names":["ConnectionManager","itemType","validateBeforeCreation","connection","type","default","sqliteConnectionValidation","Error"],"mappings":";;;;;;AAEA;;;;;;;AADA;;;AAqCA;;;;;;AAMe,MAAMA,iBAAN,+BAA8E;AAAA;AAAA;;AAAA,wCAC3FC,QAD2F,GAChF,aADgF;AAAA;;AAG3F;;;;AAIMC,wBAAN,CAA6BC,UAA7B,EAA4F;AAAA;AAC1F,cAAQA,WAAWC,IAAnB;AACE,aAAK,QAAL;AAAe;AACb,kBAAM,EAAEC,SAASC,0BAAX,KACJ,2CAAa,4CAAb,EADF;AAEA,mBAAOA,2BAA2BH,UAA3B,CAAP;AACD;AACD;AAAS;AACP,kBAAM,IAAII,KAAJ,CAAW,0BAAyBJ,WAAWC,IAAK,4CAApD,CAAN;AACD;AARH;AAD0F;AAW3F;AAlB0F;kBAAxEJ,iB","file":"ConnectionManager.js","sourcesContent":["// @flow\n// Manage saved connections to databases. Encrypts passwords\nimport BaseManager from './BaseManager';\nimport type { ManagerInterface } from './ManagerInterface';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\nexport type connectionValidationType = {\n  errorMessages: Array<{\n    fieldName: string,\n    message: string\n  }>,\n  passed: bool,\n  data?: {\n    connection: connectionType\n  }\n};\n\nexport type connectionType = {\n  // The internal id for the connection\n  id: string,\n  // The name of the connection\n  name: string,\n  // The color of the connection\n  color?: string | 'default',\n  // Which database the connection is for\n  type: databasesType,\n  // These are properties that are specific to certain databases.\n  // The pervious properties are required for all databases\n  meta?: {\n    password?: string,\n    database?: string,\n    port?: number,\n    host?: string,\n    username?: string,\n    [otherKeys: string]: string\n  }\n};\n\n/**\n * This class is a general manager for falcon database connections.\n * It can be extended to fit the needs of specific databases. For\n * example, if a specific database requires encryption, the .get()\n * method can be modified\n */\nexport default class ConnectionManager<T> extends BaseManager implements ManagerInterface<T> {\n  itemType = 'connections';\n\n  /**\n   * @TODO\n   * @private\n   */\n  async validateBeforeCreation(connection: connectionType): Promise<connectionValidationType> {\n    switch (connection.type) {\n      case 'sqlite': {\n        const { default: sqliteConnectionValidation } =\n          await import('./validation/SqliteConnectionValidation.js');\n        return sqliteConnectionValidation(connection);\n      }\n      default: {\n        throw new Error(`Unknown database type \"${connection.type}\". This probably means it is not supported`);\n      }\n    }\n  }\n}\n"]}