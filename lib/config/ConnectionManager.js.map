{"version":3,"sources":["../../src/config/ConnectionManager.js"],"names":["ConnectionManager","itemType","validateBeforeCreation","connection","type","Error"],"mappings":";;;;;;AAEA;;;;AACA;;;;;;AAoCA;;;;;;;AAtCA;AA4Ce,MAAMA,iBAAN,+BACkB;AAAA;AAAA;;AAAA,wCAC/BC,QAD+B,GACpB,aADoB;AAAA;;AAG/B;;;;AAIAC,yBAAuBC,UAAvB,EAAmD;AACjD,YAAQA,WAAWC,IAAnB;AACE,WAAK,QAAL;AAAe;AACb,oDAA2BD,UAA3B;AACA;AACD;AACD;AAAS;AACP,gBAAM,IAAIE,KAAJ,CACH,0BACCF,WAAWC,IACZ,4CAHG,CAAN;AAKD;AAXH;AAaD;AArB8B;kBADZJ,iB","file":"ConnectionManager.js","sourcesContent":["// @flow\n// Manage saved connections to databases. Encrypts passwords\nimport BaseManager from './BaseManager';\nimport sqliteConnectionValidation from './validation/SqliteConnectionValidation';\nimport type { ManagerInterface } from './ManagerInterface';\nimport type { databasesType } from '../database/provider_clients/ProviderInterface';\n\nexport type connectionValidationType = {\n  errorMessages: Array<{\n    fieldName: string,\n    message: string\n  }>,\n  passed: boolean,\n  data?: {\n    connection: connectionType\n  }\n};\n\nexport type connectionType = {\n  // The internal id for the connection\n  id: string,\n  // The name of the connection\n  name: string,\n  // The color of the connection\n  color?: string | 'default',\n  // Which database the connection is for\n  type: databasesType,\n  // These are properties that are specific to certain databases.\n  // The pervious properties are required for all databases\n  meta?: {\n    password?: string,\n    database?: string,\n    port?: number,\n    host?: string,\n    username?: string,\n    [otherKeys: string]: string\n  }\n};\n\n/**\n * This class is a general manager for falcon database connections.\n * It can be extended to fit the needs of specific databases. For\n * example, if a specific database requires encryption, the .get()\n * method can be modified\n */\nexport default class ConnectionManager<T> extends BaseManager\n  implements ManagerInterface<T> {\n  itemType = 'connections';\n\n  /**\n   * @TODO\n   * @private\n   */\n  validateBeforeCreation(connection: connectionType) {\n    switch (connection.type) {\n      case 'sqlite': {\n        sqliteConnectionValidation(connection);\n        break;\n      }\n      default: {\n        throw new Error(\n          `Unknown database type \"${\n            connection.type\n          }\". This probably means it is not supported`\n        );\n      }\n    }\n  }\n}\n"]}