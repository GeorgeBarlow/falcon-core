{"version":3,"sources":["../../src/validators/Server.js"],"names":["server","serverSchema","SERVER_SCHEMA","clientConfig","find","dbClient","key","client","disabledFeatures","forEach","item","region","field","split","validated","process","isValid","Error","JSON","stringify","errors","validate","validateUniqueId","serverAddressValidator","ctx","host","port","socketPath","obj","validator","msg","undefined","clientValidator","options","value","some","boolValidator","SSH_SCHEMA","sanitizer","Sanitizer","trim","Validator","len","min","toInt","max","user","required","password","privateKey","privateKeyWithPassphrase","name","ssl","database","ssh","schema","servers","serverId","srv","id"],"mappings":"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","file":"Server.js","sourcesContent":["// @flow\nimport Valida from 'valida';\nimport { CLIENTS } from '../db';\n\ntype validatorType =\n  | true\n  | void\n  | {\n      validator: string,\n      msg: string\n    };\n\nfunction serverAddressValidator(ctx): validatorType {\n  const { host, port, socketPath } = ctx.obj;\n  if ((!host && !port && !socketPath) || ((host || port) && socketPath)) {\n    return {\n      validator: 'serverAddressValidator',\n      msg: 'You must use host+port or socket path'\n    };\n  }\n\n  if (socketPath) {\n    return undefined;\n  }\n\n  if ((host && !port) || (!host && port)) {\n    return {\n      validator: 'serverAddressValidator',\n      msg: 'Host and port are required fields.'\n    };\n  }\n\n  return true;\n}\n\nfunction clientValidator(ctx, options, value): validatorType {\n  if (typeof value === 'undefined' || value === null) {\n    return undefined;\n  }\n  if (!CLIENTS.some(dbClient => dbClient.key === ctx.obj.client)) {\n    return {\n      validator: 'clientValidator',\n      msg: 'Invalid client type'\n    };\n  }\n\n  return true;\n}\n\nfunction boolValidator(ctx, options, value): validatorType {\n  if (typeof value === 'undefined' || value === null) {\n    return undefined;\n  }\n  if (value !== true && value !== false) {\n    return {\n      validator: 'boolValidator',\n      msg: 'Invalid boolean type.'\n    };\n  }\n\n  return true;\n}\n\nconst SSH_SCHEMA = {\n  host: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  port: [\n    { sanitizer: Valida.Sanitizer.toInt },\n    { validator: Valida.Validator.len, min: 1, max: 5 }\n  ],\n  user: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.required },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  password: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  privateKey: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  privateKeyWithPassphrase: [{ validator: boolValidator }]\n};\n\nconst SERVER_SCHEMA = {\n  name: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.required },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  client: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.required },\n    { validator: clientValidator }\n  ],\n  ssl: [{ validator: Valida.Validator.required }],\n  host: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 },\n    { validator: serverAddressValidator }\n  ],\n  port: [\n    { sanitizer: Valida.Sanitizer.toInt },\n    { validator: Valida.Validator.len, min: 1, max: 5 },\n    { validator: serverAddressValidator }\n  ],\n  socketPath: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 },\n    { validator: serverAddressValidator }\n  ],\n  database: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  user: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  password: [\n    { sanitizer: Valida.Sanitizer.trim },\n    { validator: Valida.Validator.len, min: 1 }\n  ],\n  ssh: [{ validator: Valida.Validator.schema, schema: SSH_SCHEMA }]\n};\n\n/**\n * Validations applied on creating/updating a server\n */\nexport async function validate(server: Object) {\n  const serverSchema = { ...SERVER_SCHEMA };\n\n  const clientConfig = CLIENTS.find(dbClient => dbClient.key === server.client);\n  if (clientConfig && clientConfig.disabledFeatures) {\n    clientConfig.disabledFeatures.forEach((item) => {\n      const [region, field] = item.split(':');\n      if (region === 'server') {\n        delete serverSchema[field];\n      }\n    });\n  }\n\n  const validated = await Valida.process(server, serverSchema);\n  if (!validated.isValid()) {\n    throw new Error(JSON.stringify(validated.errors()));\n  }\n}\n\nexport function validateUniqueId(servers: Array<Object>, serverId: string) {\n  if (!serverId) {\n    return;\n  }\n\n  const server = servers.find(srv => srv.id === serverId);\n  if (!server) {\n    return;\n  }\n  if (serverId && server.id === serverId) {\n    return;\n  }\n\n  throw new Error('Already exist another server with same id');\n}\n"]}