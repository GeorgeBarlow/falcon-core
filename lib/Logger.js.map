{"version":3,"sources":["../src/Logger.js"],"names":["createLogger","setLogger","loggers","namespace","Error","debugLogger","debug","bind","error","customLogger","Object","keys","forEach","logger"],"mappings":";;;;;kBAKwBA,Y;QAqBRC,S,GAAAA,S;;AAzBhB;;;;;;AAEA,MAAMC,UAAU,EAAhB;AAEe,SAASF,YAAT,CAAsBG,SAAtB,EAA0C;AACvD,MAAI,CAACA,SAAL,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED;AACA,QAAMC,cAAc,qBAAO,kBAAiBF,SAAU,EAAlC,CAApB;AACAD,UAAQC,SAAR,IAAqB;AACnBG,WAAOD,YAAYE,IAAZ,CAAiBF,WAAjB,CADY;AAEnBG,WAAOH,YAAYE,IAAZ,CAAiBF,WAAjB;AAFY,GAArB;;AAKA;AACA;AACA;AACA,SAAO,MAAMH,QAAQC,SAAR,CAAb;AACD;;AAED;;;AAGO,SAASF,SAAT,CAAmBQ,YAAnB,EAA0D;AAC/DC,SAAOC,IAAP,CAAYT,OAAZ,EAAqBU,OAArB,CAA8BC,MAAD,IAAY;AACvCX,YAAQW,MAAR,IAAkBJ,aAAaI,MAAb,CAAlB;AACD,GAFD;AAGD","file":"Logger.js","sourcesContent":["// @flow\nimport debug from 'debug';\n\nconst loggers = {};\n\nexport default function createLogger(namespace?: string) {\n  if (!namespace) {\n    throw new Error('Missing log namespace');\n  }\n\n  // default logger\n  const debugLogger = debug(`sqlectron-core:${namespace}`);\n  loggers[namespace] = {\n    debug: debugLogger.bind(debugLogger),\n    error: debugLogger.bind(debugLogger)\n  };\n\n  // The logger is load through a function\n  // so is possible to access a new logger\n  // defined with setLogger\n  return () => loggers[namespace];\n}\n\n/**\n * Allow use a different logger\n */\nexport function setLogger(customLogger: (logger: any) => string) {\n  Object.keys(loggers).forEach((logger) => {\n    loggers[logger] = customLogger(logger);\n  });\n}\n"]}